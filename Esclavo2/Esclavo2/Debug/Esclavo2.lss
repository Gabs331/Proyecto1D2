
Esclavo2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00001042  000010d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001042  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080013e  0080013e  00001114  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001170  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  000011b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019fd  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cdf  00000000  00000000  00002d7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e47  00000000  00000000  00003a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  000048a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062a  00000000  00000000  00004b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aad  00000000  00000000  000051b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005c63  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_24>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e4       	ldi	r30, 0x42	; 66
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ae 33       	cpi	r26, 0x3E	; 62
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	ae e3       	ldi	r26, 0x3E	; 62
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 34       	cpi	r26, 0x4B	; 75
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 9c 02 	call	0x538	; 0x538 <main>
      9e:	0c 94 1f 08 	jmp	0x103e	; 0x103e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <EEPROM_write_long>:
 */ 

// eeprom_util.c
#include "eeprom_util.h"

void EEPROM_write_long(uint16_t addr, long value) {
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	00 d0       	rcall	.+0      	; 0xac <EEPROM_write_long+0x6>
      ac:	00 d0       	rcall	.+0      	; 0xae <EEPROM_write_long+0x8>
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	49 83       	std	Y+1, r20	; 0x01
      b4:	5a 83       	std	Y+2, r21	; 0x02
      b6:	6b 83       	std	Y+3, r22	; 0x03
      b8:	7c 83       	std	Y+4, r23	; 0x04
	eeprom_update_block((const void*)&value, (void*)addr, sizeof(long));
      ba:	44 e0       	ldi	r20, 0x04	; 4
      bc:	50 e0       	ldi	r21, 0x00	; 0
      be:	bc 01       	movw	r22, r24
      c0:	ce 01       	movw	r24, r28
      c2:	01 96       	adiw	r24, 0x01	; 1
      c4:	0e 94 c6 07 	call	0xf8c	; 0xf8c <eeprom_update_block>
}
      c8:	0f 90       	pop	r0
      ca:	0f 90       	pop	r0
      cc:	0f 90       	pop	r0
      ce:	0f 90       	pop	r0
      d0:	df 91       	pop	r29
      d2:	cf 91       	pop	r28
      d4:	08 95       	ret

000000d6 <EEPROM_read_long>:

long EEPROM_read_long(uint16_t addr) {
      d6:	cf 93       	push	r28
      d8:	df 93       	push	r29
      da:	00 d0       	rcall	.+0      	; 0xdc <EEPROM_read_long+0x6>
      dc:	00 d0       	rcall	.+0      	; 0xde <EEPROM_read_long+0x8>
      de:	cd b7       	in	r28, 0x3d	; 61
      e0:	de b7       	in	r29, 0x3e	; 62
	long value;
	eeprom_read_block((void*)&value, (const void*)addr, sizeof(long));
      e2:	44 e0       	ldi	r20, 0x04	; 4
      e4:	50 e0       	ldi	r21, 0x00	; 0
      e6:	bc 01       	movw	r22, r24
      e8:	ce 01       	movw	r24, r28
      ea:	01 96       	adiw	r24, 0x01	; 1
      ec:	0e 94 b6 07 	call	0xf6c	; 0xf6c <eeprom_read_block>
	return value;
      f0:	69 81       	ldd	r22, Y+1	; 0x01
      f2:	7a 81       	ldd	r23, Y+2	; 0x02
      f4:	8b 81       	ldd	r24, Y+3	; 0x03
      f6:	9c 81       	ldd	r25, Y+4	; 0x04
}
      f8:	0f 90       	pop	r0
      fa:	0f 90       	pop	r0
      fc:	0f 90       	pop	r0
      fe:	0f 90       	pop	r0
     100:	df 91       	pop	r29
     102:	cf 91       	pop	r28
     104:	08 95       	ret

00000106 <HX711_init>:
static uint8_t DT, SCK;
static double SCALE = 1;
static long OFFSET = 0;

void HX711_init(uint8_t dt_pin, uint8_t sck_pin) {
	DT = dt_pin;
     106:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <DT>
	SCK = sck_pin;
     10a:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <SCK>

	DDRD &= ~(1 << DT);   // DT como entrada
     10e:	9a b1       	in	r25, 0x0a	; 10
     110:	21 e0       	ldi	r18, 0x01	; 1
     112:	30 e0       	ldi	r19, 0x00	; 0
     114:	a9 01       	movw	r20, r18
     116:	02 c0       	rjmp	.+4      	; 0x11c <HX711_init+0x16>
     118:	44 0f       	add	r20, r20
     11a:	55 1f       	adc	r21, r21
     11c:	8a 95       	dec	r24
     11e:	e2 f7       	brpl	.-8      	; 0x118 <HX711_init+0x12>
     120:	84 2f       	mov	r24, r20
     122:	80 95       	com	r24
     124:	89 23       	and	r24, r25
     126:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << SCK);   // SCK como salida
     128:	4a b1       	in	r20, 0x0a	; 10
     12a:	c9 01       	movw	r24, r18
     12c:	00 90 42 01 	lds	r0, 0x0142	; 0x800142 <SCK>
     130:	02 c0       	rjmp	.+4      	; 0x136 <HX711_init+0x30>
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	0a 94       	dec	r0
     138:	e2 f7       	brpl	.-8      	; 0x132 <HX711_init+0x2c>
     13a:	84 2b       	or	r24, r20
     13c:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~(1 << SCK); // SCK en LOW
     13e:	8b b1       	in	r24, 0x0b	; 11
     140:	00 90 42 01 	lds	r0, 0x0142	; 0x800142 <SCK>
     144:	02 c0       	rjmp	.+4      	; 0x14a <HX711_init+0x44>
     146:	22 0f       	add	r18, r18
     148:	33 1f       	adc	r19, r19
     14a:	0a 94       	dec	r0
     14c:	e2 f7       	brpl	.-8      	; 0x146 <HX711_init+0x40>
     14e:	20 95       	com	r18
     150:	28 23       	and	r18, r24
     152:	2b b9       	out	0x0b, r18	; 11
     154:	08 95       	ret

00000156 <HX711_read>:
}

long HX711_read(void) {
	long count = 0;
	while(PIND & (1 << DT)); // espera a que esté LOW
     156:	89 b1       	in	r24, 0x09	; 9
     158:	90 e0       	ldi	r25, 0x00	; 0
     15a:	00 90 43 01 	lds	r0, 0x0143	; 0x800143 <DT>
     15e:	02 c0       	rjmp	.+4      	; 0x164 <HX711_read+0xe>
     160:	95 95       	asr	r25
     162:	87 95       	ror	r24
     164:	0a 94       	dec	r0
     166:	e2 f7       	brpl	.-8      	; 0x160 <HX711_read+0xa>
     168:	80 fd       	sbrc	r24, 0
     16a:	f5 cf       	rjmp	.-22     	; 0x156 <HX711_read>
     16c:	e0 e0       	ldi	r30, 0x00	; 0
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	50 e0       	ldi	r21, 0x00	; 0
     172:	ba 01       	movw	r22, r20
     174:	2e c0       	rjmp	.+92     	; 0x1d2 <HX711_read+0x7c>
	for(uint8_t i=0; i<24; i++) {
		PORTD |= (1 << SCK);
     176:	fb b1       	in	r31, 0x0b	; 11
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	9c 01       	movw	r18, r24
     17e:	00 90 42 01 	lds	r0, 0x0142	; 0x800142 <SCK>
     182:	02 c0       	rjmp	.+4      	; 0x188 <HX711_read+0x32>
     184:	22 0f       	add	r18, r18
     186:	33 1f       	adc	r19, r19
     188:	0a 94       	dec	r0
     18a:	e2 f7       	brpl	.-8      	; 0x184 <HX711_read+0x2e>
     18c:	2f 2b       	or	r18, r31
     18e:	2b b9       	out	0x0b, r18	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     190:	00 00       	nop
		_delay_us(1);
		count = count << 1;
     192:	44 0f       	add	r20, r20
     194:	55 1f       	adc	r21, r21
     196:	66 1f       	adc	r22, r22
     198:	77 1f       	adc	r23, r23
		PORTD &= ~(1 << SCK);
     19a:	2b b1       	in	r18, 0x0b	; 11
     19c:	00 90 42 01 	lds	r0, 0x0142	; 0x800142 <SCK>
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <HX711_read+0x50>
     1a2:	88 0f       	add	r24, r24
     1a4:	99 1f       	adc	r25, r25
     1a6:	0a 94       	dec	r0
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <HX711_read+0x4c>
     1aa:	80 95       	com	r24
     1ac:	82 23       	and	r24, r18
     1ae:	8b b9       	out	0x0b, r24	; 11
		if(PIND & (1 << DT)) count++;
     1b0:	89 b1       	in	r24, 0x09	; 9
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	00 90 43 01 	lds	r0, 0x0143	; 0x800143 <DT>
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <HX711_read+0x68>
     1ba:	95 95       	asr	r25
     1bc:	87 95       	ror	r24
     1be:	0a 94       	dec	r0
     1c0:	e2 f7       	brpl	.-8      	; 0x1ba <HX711_read+0x64>
     1c2:	80 ff       	sbrs	r24, 0
     1c4:	04 c0       	rjmp	.+8      	; 0x1ce <HX711_read+0x78>
     1c6:	4f 5f       	subi	r20, 0xFF	; 255
     1c8:	5f 4f       	sbci	r21, 0xFF	; 255
     1ca:	6f 4f       	sbci	r22, 0xFF	; 255
     1cc:	7f 4f       	sbci	r23, 0xFF	; 255
     1ce:	00 00       	nop
}

long HX711_read(void) {
	long count = 0;
	while(PIND & (1 << DT)); // espera a que esté LOW
	for(uint8_t i=0; i<24; i++) {
     1d0:	ef 5f       	subi	r30, 0xFF	; 255
     1d2:	e8 31       	cpi	r30, 0x18	; 24
     1d4:	80 f2       	brcs	.-96     	; 0x176 <HX711_read+0x20>
		PORTD &= ~(1 << SCK);
		if(PIND & (1 << DT)) count++;
		_delay_us(1);
	}
	// Ganancia 128
	PORTD |= (1 << SCK);
     1d6:	eb b1       	in	r30, 0x0b	; 11
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	9c 01       	movw	r18, r24
     1de:	00 90 42 01 	lds	r0, 0x0142	; 0x800142 <SCK>
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <HX711_read+0x92>
     1e4:	22 0f       	add	r18, r18
     1e6:	33 1f       	adc	r19, r19
     1e8:	0a 94       	dec	r0
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <HX711_read+0x8e>
     1ec:	2e 2b       	or	r18, r30
     1ee:	2b b9       	out	0x0b, r18	; 11
     1f0:	00 00       	nop
	_delay_us(1);
	PORTD &= ~(1 << SCK);
     1f2:	2b b1       	in	r18, 0x0b	; 11
     1f4:	00 90 42 01 	lds	r0, 0x0142	; 0x800142 <SCK>
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <HX711_read+0xa8>
     1fa:	88 0f       	add	r24, r24
     1fc:	99 1f       	adc	r25, r25
     1fe:	0a 94       	dec	r0
     200:	e2 f7       	brpl	.-8      	; 0x1fa <HX711_read+0xa4>
     202:	80 95       	com	r24
     204:	82 23       	and	r24, r18
     206:	8b b9       	out	0x0b, r24	; 11
	count ^= 0x800000;
     208:	cb 01       	movw	r24, r22
     20a:	ba 01       	movw	r22, r20
     20c:	80 58       	subi	r24, 0x80	; 128
	return count;
}
     20e:	08 95       	ret

00000210 <HX711_read_average>:

long HX711_read_average(uint8_t times) {
     210:	cf 92       	push	r12
     212:	df 92       	push	r13
     214:	ef 92       	push	r14
     216:	ff 92       	push	r15
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	d8 2f       	mov	r29, r24
	long sum = 0;
	for(uint8_t i=0; i<times; i++) {
     21e:	c0 e0       	ldi	r28, 0x00	; 0
	count ^= 0x800000;
	return count;
}

long HX711_read_average(uint8_t times) {
	long sum = 0;
     220:	c1 2c       	mov	r12, r1
     222:	d1 2c       	mov	r13, r1
     224:	76 01       	movw	r14, r12
	for(uint8_t i=0; i<times; i++) {
     226:	07 c0       	rjmp	.+14     	; 0x236 <HX711_read_average+0x26>
		sum += HX711_read();
     228:	0e 94 ab 00 	call	0x156	; 0x156 <HX711_read>
     22c:	c6 0e       	add	r12, r22
     22e:	d7 1e       	adc	r13, r23
     230:	e8 1e       	adc	r14, r24
     232:	f9 1e       	adc	r15, r25
	return count;
}

long HX711_read_average(uint8_t times) {
	long sum = 0;
	for(uint8_t i=0; i<times; i++) {
     234:	cf 5f       	subi	r28, 0xFF	; 255
     236:	cd 17       	cp	r28, r29
     238:	b8 f3       	brcs	.-18     	; 0x228 <HX711_read_average+0x18>
		sum += HX711_read();
	}
	return sum / times;
     23a:	2d 2f       	mov	r18, r29
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	40 e0       	ldi	r20, 0x00	; 0
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	c7 01       	movw	r24, r14
     244:	b6 01       	movw	r22, r12
     246:	0e 94 b4 04 	call	0x968	; 0x968 <__divmodsi4>
}
     24a:	ca 01       	movw	r24, r20
     24c:	b9 01       	movw	r22, r18
     24e:	df 91       	pop	r29
     250:	cf 91       	pop	r28
     252:	ff 90       	pop	r15
     254:	ef 90       	pop	r14
     256:	df 90       	pop	r13
     258:	cf 90       	pop	r12
     25a:	08 95       	ret

0000025c <HX711_set_scale>:
	long sum = HX711_read_average(times);
	HX711_set_offset(sum);
}

void HX711_set_scale(double scale) {
	SCALE = scale;
     25c:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
     260:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     264:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     268:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     26c:	08 95       	ret

0000026e <HX711_set_offset>:
}

void HX711_set_offset(long offset) {
	OFFSET = offset;
     26e:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <__data_end>
     272:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <__data_end+0x1>
     276:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end+0x2>
     27a:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <__data_end+0x3>
     27e:	08 95       	ret

00000280 <HX711_tare>:
	}
	return sum / times;
}

void HX711_tare(uint8_t times) {
	long sum = HX711_read_average(times);
     280:	0e 94 08 01 	call	0x210	; 0x210 <HX711_read_average>
	HX711_set_offset(sum);
     284:	0e 94 37 01 	call	0x26e	; 0x26e <HX711_set_offset>
     288:	08 95       	ret

0000028a <HX711_get_units>:

void HX711_set_offset(long offset) {
	OFFSET = offset;
}

double HX711_get_units(uint8_t times) {
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
	long val = HX711_read_average(times);
     292:	0e 94 08 01 	call	0x210	; 0x210 <HX711_read_average>
	return (double)(val - OFFSET) / SCALE;
     296:	c0 90 3e 01 	lds	r12, 0x013E	; 0x80013e <__data_end>
     29a:	d0 90 3f 01 	lds	r13, 0x013F	; 0x80013f <__data_end+0x1>
     29e:	e0 90 40 01 	lds	r14, 0x0140	; 0x800140 <__data_end+0x2>
     2a2:	f0 90 41 01 	lds	r15, 0x0141	; 0x800141 <__data_end+0x3>
     2a6:	6c 19       	sub	r22, r12
     2a8:	7d 09       	sbc	r23, r13
     2aa:	8e 09       	sbc	r24, r14
     2ac:	9f 09       	sbc	r25, r15
     2ae:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2b2:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2b6:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2ba:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2be:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__floatsisf>
     2c2:	a7 01       	movw	r20, r14
     2c4:	96 01       	movw	r18, r12
     2c6:	0e 94 55 03 	call	0x6aa	; 0x6aa <__divsf3>
}
     2ca:	ff 90       	pop	r15
     2cc:	ef 90       	pop	r14
     2ce:	df 90       	pop	r13
     2d0:	cf 90       	pop	r12
     2d2:	08 95       	ret

000002d4 <I2C_init>:

// i2c.c
#include "i2c.h"

void I2C_init(void) {
	TWSR = 0x00;
     2d4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 72; // 100kHz @ 16MHz
     2d8:	88 e4       	ldi	r24, 0x48	; 72
     2da:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     2de:	08 95       	ret

000002e0 <I2C_start>:
}

void I2C_start(uint8_t address) {
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);
     2e0:	94 ea       	ldi	r25, 0xA4	; 164
     2e2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
     2e6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2ea:	99 23       	and	r25, r25
     2ec:	e4 f7       	brge	.-8      	; 0x2e6 <I2C_start+0x6>
	TWDR = address;
     2ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);
     2f2:	84 e8       	ldi	r24, 0x84	; 132
     2f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
     2f8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     2fc:	88 23       	and	r24, r24
     2fe:	e4 f7       	brge	.-8      	; 0x2f8 <I2C_start+0x18>
}
     300:	08 95       	ret

00000302 <I2C_write>:

void I2C_write(uint8_t data) {
	TWDR = data;
     302:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);
     306:	84 e8       	ldi	r24, 0x84	; 132
     308:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
     30c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     310:	88 23       	and	r24, r24
     312:	e4 f7       	brge	.-8      	; 0x30c <I2C_write+0xa>
}
     314:	08 95       	ret

00000316 <I2C_stop>:

void I2C_stop(void) {
	TWCR = (1<<TWSTO)|(1<<TWINT)|(1<<TWEN);
     316:	84 e9       	ldi	r24, 0x94	; 148
     318:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     31c:	08 95       	ret

0000031e <LCD_send_nibble>:
}

void LCD_setCursor(uint8_t col, uint8_t row) {
	uint8_t row_offsets[] = {0x00, 0x40};
	LCD_cmd(0x80 | (col + row_offsets[row]));
}
     31e:	cf 93       	push	r28
     320:	c1 e0       	ldi	r28, 0x01	; 1
     322:	61 11       	cpse	r22, r1
     324:	01 c0       	rjmp	.+2      	; 0x328 <LCD_send_nibble+0xa>
     326:	c0 e0       	ldi	r28, 0x00	; 0
     328:	c8 2b       	or	r28, r24
     32a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <lcd_addr>
     32e:	88 0f       	add	r24, r24
     330:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_start>
     334:	8c 2f       	mov	r24, r28
     336:	8c 60       	ori	r24, 0x0C	; 12
     338:	0e 94 81 01 	call	0x302	; 0x302 <I2C_write>
     33c:	00 00       	nop
     33e:	8c 2f       	mov	r24, r28
     340:	8b 7f       	andi	r24, 0xFB	; 251
     342:	88 60       	ori	r24, 0x08	; 8
     344:	0e 94 81 01 	call	0x302	; 0x302 <I2C_write>
     348:	0e 94 8b 01 	call	0x316	; 0x316 <I2C_stop>
     34c:	80 e1       	ldi	r24, 0x10	; 16
     34e:	8a 95       	dec	r24
     350:	f1 f7       	brne	.-4      	; 0x34e <LCD_send_nibble+0x30>
     352:	00 c0       	rjmp	.+0      	; 0x354 <LCD_send_nibble+0x36>
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <LCD_send_byte>:
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	c8 2f       	mov	r28, r24
     35e:	d6 2f       	mov	r29, r22
     360:	80 7f       	andi	r24, 0xF0	; 240
     362:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_nibble>
     366:	6d 2f       	mov	r22, r29
     368:	8c 2f       	mov	r24, r28
     36a:	82 95       	swap	r24
     36c:	80 7f       	andi	r24, 0xF0	; 240
     36e:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_nibble>
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <LCD_cmd>:
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_send_byte>
     37e:	83 ef       	ldi	r24, 0xF3	; 243
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	f1 f7       	brne	.-4      	; 0x382 <LCD_cmd+0xa>
     386:	00 c0       	rjmp	.+0      	; 0x388 <LCD_cmd+0x10>
     388:	00 00       	nop
     38a:	08 95       	ret

0000038c <LCD_init>:
     38c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <lcd_addr>
     390:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <I2C_init>
     394:	83 ed       	ldi	r24, 0xD3	; 211
     396:	90 e3       	ldi	r25, 0x30	; 48
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	f1 f7       	brne	.-4      	; 0x398 <LCD_init+0xc>
     39c:	00 c0       	rjmp	.+0      	; 0x39e <LCD_init+0x12>
     39e:	00 00       	nop
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	80 e3       	ldi	r24, 0x30	; 48
     3a4:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_nibble>
     3a8:	81 ee       	ldi	r24, 0xE1	; 225
     3aa:	94 e0       	ldi	r25, 0x04	; 4
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_init+0x20>
     3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCD_init+0x26>
     3b2:	00 00       	nop
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	80 e3       	ldi	r24, 0x30	; 48
     3b8:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_nibble>
     3bc:	92 e4       	ldi	r25, 0x42	; 66
     3be:	9a 95       	dec	r25
     3c0:	f1 f7       	brne	.-4      	; 0x3be <LCD_init+0x32>
     3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <LCD_init+0x38>
     3c4:	60 e0       	ldi	r22, 0x00	; 0
     3c6:	80 e3       	ldi	r24, 0x30	; 48
     3c8:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_nibble>
     3cc:	81 ee       	ldi	r24, 0xE1	; 225
     3ce:	94 e0       	ldi	r25, 0x04	; 4
     3d0:	01 97       	sbiw	r24, 0x01	; 1
     3d2:	f1 f7       	brne	.-4      	; 0x3d0 <LCD_init+0x44>
     3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <LCD_init+0x4a>
     3d6:	00 00       	nop
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	80 e2       	ldi	r24, 0x20	; 32
     3dc:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_send_nibble>
     3e0:	81 ee       	ldi	r24, 0xE1	; 225
     3e2:	94 e0       	ldi	r25, 0x04	; 4
     3e4:	01 97       	sbiw	r24, 0x01	; 1
     3e6:	f1 f7       	brne	.-4      	; 0x3e4 <LCD_init+0x58>
     3e8:	00 c0       	rjmp	.+0      	; 0x3ea <LCD_init+0x5e>
     3ea:	00 00       	nop
     3ec:	88 e2       	ldi	r24, 0x28	; 40
     3ee:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_cmd>
     3f2:	8c e0       	ldi	r24, 0x0C	; 12
     3f4:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_cmd>
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_cmd>
     3fe:	86 e0       	ldi	r24, 0x06	; 6
     400:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_cmd>
     404:	08 95       	ret

00000406 <LCD_clear>:
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_cmd>
     40c:	83 ef       	ldi	r24, 0xF3	; 243
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <LCD_clear+0xa>
     414:	00 c0       	rjmp	.+0      	; 0x416 <LCD_clear+0x10>
     416:	00 00       	nop
     418:	08 95       	ret

0000041a <LCD_print>:

void LCD_print(const char *str) {
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	ec 01       	movw	r28, r24
	while(*str) {
     420:	04 c0       	rjmp	.+8      	; 0x42a <LCD_print+0x10>
		LCD_send_byte(*str++, 1);
     422:	21 96       	adiw	r28, 0x01	; 1
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_send_byte>
	uint8_t row_offsets[] = {0x00, 0x40};
	LCD_cmd(0x80 | (col + row_offsets[row]));
}

void LCD_print(const char *str) {
	while(*str) {
     42a:	88 81       	ld	r24, Y
     42c:	81 11       	cpse	r24, r1
     42e:	f9 cf       	rjmp	.-14     	; 0x422 <LCD_print+0x8>
		LCD_send_byte(*str++, 1);
	}
}
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	08 95       	ret

00000436 <LCD_print_int>:

void LCD_print_int(int value) {
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	60 97       	sbiw	r28, 0x10	; 16
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
	char buffer[16];
	snprintf(buffer, sizeof(buffer), "%d", value);
     44e:	9f 93       	push	r25
     450:	8f 93       	push	r24
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	9f 93       	push	r25
     458:	8f 93       	push	r24
     45a:	1f 92       	push	r1
     45c:	80 e1       	ldi	r24, 0x10	; 16
     45e:	8f 93       	push	r24
     460:	8e 01       	movw	r16, r28
     462:	0f 5f       	subi	r16, 0xFF	; 255
     464:	1f 4f       	sbci	r17, 0xFF	; 255
     466:	1f 93       	push	r17
     468:	0f 93       	push	r16
     46a:	0e 94 f5 04 	call	0x9ea	; 0x9ea <snprintf>
	LCD_print(buffer);
     46e:	c8 01       	movw	r24, r16
     470:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_print>
}
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	f8 94       	cli
     478:	de bf       	out	0x3e, r29	; 62
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	cd bf       	out	0x3d, r28	; 61
     47e:	60 96       	adiw	r28, 0x10	; 16
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	f8 94       	cli
     484:	de bf       	out	0x3e, r29	; 62
     486:	0f be       	out	0x3f, r0	; 63
     488:	cd bf       	out	0x3d, r28	; 61
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	08 95       	ret

00000494 <calibration>:

long escala;
int peso_calibracion = 185;

void calibration() {
	LCD_clear();
     494:	0e 94 03 02 	call	0x406	; 0x406 <LCD_clear>
	LCD_print("Calibrando...");
     498:	89 e0       	ldi	r24, 0x09	; 9
     49a:	91 e0       	ldi	r25, 0x01	; 1
     49c:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a0:	2f ef       	ldi	r18, 0xFF	; 255
     4a2:	87 ea       	ldi	r24, 0xA7	; 167
     4a4:	91 e6       	ldi	r25, 0x61	; 97
     4a6:	21 50       	subi	r18, 0x01	; 1
     4a8:	80 40       	sbci	r24, 0x00	; 0
     4aa:	90 40       	sbci	r25, 0x00	; 0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <calibration+0x12>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <calibration+0x1c>
     4b0:	00 00       	nop
	_delay_ms(2000);

	HX711_set_scale(1);
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	80 e8       	ldi	r24, 0x80	; 128
     4b8:	9f e3       	ldi	r25, 0x3F	; 63
     4ba:	0e 94 2e 01 	call	0x25c	; 0x25c <HX711_set_scale>
	HX711_tare(20);
     4be:	84 e1       	ldi	r24, 0x14	; 20
     4c0:	0e 94 40 01 	call	0x280	; 0x280 <HX711_tare>

	LCD_clear();
     4c4:	0e 94 03 02 	call	0x406	; 0x406 <LCD_clear>
	LCD_print("Ponga peso ref");
     4c8:	87 e1       	ldi	r24, 0x17	; 23
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_print>
     4d0:	2f ef       	ldi	r18, 0xFF	; 255
     4d2:	8b e7       	ldi	r24, 0x7B	; 123
     4d4:	92 e9       	ldi	r25, 0x92	; 146
     4d6:	21 50       	subi	r18, 0x01	; 1
     4d8:	80 40       	sbci	r24, 0x00	; 0
     4da:	90 40       	sbci	r25, 0x00	; 0
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <calibration+0x42>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <calibration+0x4c>
     4e0:	00 00       	nop
	_delay_ms(3000);

	long adc_lecture = HX711_read_average(100);
     4e2:	84 e6       	ldi	r24, 0x64	; 100
     4e4:	0e 94 08 01 	call	0x210	; 0x210 <HX711_read_average>
	escala = adc_lecture / peso_calibracion;
     4e8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <peso_calibracion>
     4ec:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <peso_calibracion+0x1>
     4f0:	03 2e       	mov	r0, r19
     4f2:	00 0c       	add	r0, r0
     4f4:	44 0b       	sbc	r20, r20
     4f6:	55 0b       	sbc	r21, r21
     4f8:	0e 94 b4 04 	call	0x968	; 0x968 <__divmodsi4>
     4fc:	ba 01       	movw	r22, r20
     4fe:	a9 01       	movw	r20, r18
     500:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <escala>
     504:	50 93 47 01 	sts	0x0147, r21	; 0x800147 <escala+0x1>
     508:	60 93 48 01 	sts	0x0148, r22	; 0x800148 <escala+0x2>
     50c:	70 93 49 01 	sts	0x0149, r23	; 0x800149 <escala+0x3>

	EEPROM_write_long(0, escala);
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	0e 94 53 00 	call	0xa6	; 0xa6 <EEPROM_write_long>

	LCD_clear();
     518:	0e 94 03 02 	call	0x406	; 0x406 <LCD_clear>
	LCD_print("Calibrado OK");
     51c:	86 e2       	ldi	r24, 0x26	; 38
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_print>
     524:	2f ef       	ldi	r18, 0xFF	; 255
     526:	87 ea       	ldi	r24, 0xA7	; 167
     528:	91 e6       	ldi	r25, 0x61	; 97
     52a:	21 50       	subi	r18, 0x01	; 1
     52c:	80 40       	sbci	r24, 0x00	; 0
     52e:	90 40       	sbci	r25, 0x00	; 0
     530:	e1 f7       	brne	.-8      	; 0x52a <calibration+0x96>
     532:	00 c0       	rjmp	.+0      	; 0x534 <calibration+0xa0>
     534:	00 00       	nop
     536:	08 95       	ret

00000538 <main>:
	_delay_ms(2000);
}

int main(void) {
	DDRB |= (1 << LED);
     538:	84 b1       	in	r24, 0x04	; 4
     53a:	80 62       	ori	r24, 0x20	; 32
     53c:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << BTN_ZERO);
     53e:	8a b1       	in	r24, 0x0a	; 10
     540:	8b 7f       	andi	r24, 0xFB	; 251
     542:	8a b9       	out	0x0a, r24	; 10

	LCD_init(0x27);
     544:	87 e2       	ldi	r24, 0x27	; 39
     546:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_init>
	HX711_init(PD4, PD5);
     54a:	65 e0       	ldi	r22, 0x05	; 5
     54c:	84 e0       	ldi	r24, 0x04	; 4
     54e:	0e 94 83 00 	call	0x106	; 0x106 <HX711_init>

	escala = EEPROM_read_long(0);
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 6b 00 	call	0xd6	; 0xd6 <EEPROM_read_long>
     55a:	09 2e       	mov	r0, r25
     55c:	00 0c       	add	r0, r0
     55e:	aa 0b       	sbc	r26, r26
     560:	bb 0b       	sbc	r27, r27
     562:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <escala>
     566:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <escala+0x1>
     56a:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <escala+0x2>
     56e:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <escala+0x3>
	if(escala == 0) escala = 1000;
     572:	89 2b       	or	r24, r25
     574:	8a 2b       	or	r24, r26
     576:	8b 2b       	or	r24, r27
     578:	61 f4       	brne	.+24     	; 0x592 <main+0x5a>
     57a:	88 ee       	ldi	r24, 0xE8	; 232
     57c:	93 e0       	ldi	r25, 0x03	; 3
     57e:	a0 e0       	ldi	r26, 0x00	; 0
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <escala>
     586:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <escala+0x1>
     58a:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <escala+0x2>
     58e:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <escala+0x3>

	if(PIND & (1 << BTN_ZERO)) {
     592:	4a 99       	sbic	0x09, 2	; 9
		calibration();
     594:	0e 94 4a 02 	call	0x494	; 0x494 <calibration>
	}

	HX711_set_scale(escala);
     598:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <escala>
     59c:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <escala+0x1>
     5a0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <escala+0x2>
     5a4:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <escala+0x3>
     5a8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__floatsisf>
     5ac:	0e 94 2e 01 	call	0x25c	; 0x25c <HX711_set_scale>
	HX711_tare(20);
     5b0:	84 e1       	ldi	r24, 0x14	; 20
     5b2:	0e 94 40 01 	call	0x280	; 0x280 <HX711_tare>

	while(1) {
		double peso = HX711_get_units(10);
     5b6:	8a e0       	ldi	r24, 0x0A	; 10
     5b8:	0e 94 45 01 	call	0x28a	; 0x28a <HX711_get_units>
     5bc:	6b 01       	movw	r12, r22
     5be:	7c 01       	movw	r14, r24

		LCD_clear();
     5c0:	0e 94 03 02 	call	0x406	; 0x406 <LCD_clear>
		LCD_print("Peso: ");
     5c4:	83 e3       	ldi	r24, 0x33	; 51
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_print>
		LCD_print_int((int)peso);
     5cc:	c7 01       	movw	r24, r14
     5ce:	b6 01       	movw	r22, r12
     5d0:	0e 94 c7 03 	call	0x78e	; 0x78e <__fixsfsi>
     5d4:	cb 01       	movw	r24, r22
     5d6:	0e 94 1b 02 	call	0x436	; 0x436 <LCD_print_int>
		LCD_print(" g");
     5da:	8a e3       	ldi	r24, 0x3A	; 58
     5dc:	91 e0       	ldi	r25, 0x01	; 1
     5de:	0e 94 0d 02 	call	0x41a	; 0x41a <LCD_print>

		if(peso >= 500) PORTB |= (1 << LED);
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	4a ef       	ldi	r20, 0xFA	; 250
     5e8:	53 e4       	ldi	r21, 0x43	; 67
     5ea:	c7 01       	movw	r24, r14
     5ec:	b6 01       	movw	r22, r12
     5ee:	0e 94 8b 04 	call	0x916	; 0x916 <__gesf2>
     5f2:	88 23       	and	r24, r24
     5f4:	24 f0       	brlt	.+8      	; 0x5fe <main+0xc6>
     5f6:	85 b1       	in	r24, 0x05	; 5
     5f8:	80 62       	ori	r24, 0x20	; 32
     5fa:	85 b9       	out	0x05, r24	; 5
     5fc:	03 c0       	rjmp	.+6      	; 0x604 <main+0xcc>
		else PORTB &= ~(1 << LED);
     5fe:	85 b1       	in	r24, 0x05	; 5
     600:	8f 7d       	andi	r24, 0xDF	; 223
     602:	85 b9       	out	0x05, r24	; 5

		if(!(PIND & (1 << BTN_ZERO))) {
     604:	4a 99       	sbic	0x09, 2	; 9
     606:	03 c0       	rjmp	.+6      	; 0x60e <main+0xd6>
			HX711_tare(10);
     608:	8a e0       	ldi	r24, 0x0A	; 10
     60a:	0e 94 40 01 	call	0x280	; 0x280 <HX711_tare>
     60e:	2f ef       	ldi	r18, 0xFF	; 255
     610:	85 ea       	ldi	r24, 0xA5	; 165
     612:	9e e0       	ldi	r25, 0x0E	; 14
     614:	21 50       	subi	r18, 0x01	; 1
     616:	80 40       	sbci	r24, 0x00	; 0
     618:	90 40       	sbci	r25, 0x00	; 0
     61a:	e1 f7       	brne	.-8      	; 0x614 <main+0xdc>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <main+0xe6>
     61e:	00 00       	nop
     620:	ca cf       	rjmp	.-108    	; 0x5b6 <main+0x7e>

00000622 <__vector_24>:
uint8_t TWI_SlaveReceive(void) {
	twi_data_ready = 0;
	return twi_received_data;
}

ISR(TWI_vect) {
     622:	1f 92       	push	r1
     624:	0f 92       	push	r0
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	0f 92       	push	r0
     62a:	11 24       	eor	r1, r1
     62c:	8f 93       	push	r24
	switch (TWSR & 0xF8) {
     62e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     632:	88 7f       	andi	r24, 0xF8	; 248
     634:	88 3a       	cpi	r24, 0xA8	; 168
     636:	11 f1       	breq	.+68     	; 0x67c <__vector_24+0x5a>
     638:	38 f4       	brcc	.+14     	; 0x648 <__vector_24+0x26>
     63a:	88 36       	cpi	r24, 0x68	; 104
     63c:	81 f0       	breq	.+32     	; 0x65e <__vector_24+0x3c>
     63e:	80 38       	cpi	r24, 0x80	; 128
     640:	91 f0       	breq	.+36     	; 0x666 <__vector_24+0x44>
     642:	80 36       	cpi	r24, 0x60	; 96
     644:	49 f5       	brne	.+82     	; 0x698 <__vector_24+0x76>
     646:	0b c0       	rjmp	.+22     	; 0x65e <__vector_24+0x3c>
     648:	88 3b       	cpi	r24, 0xB8	; 184
     64a:	f1 f0       	breq	.+60     	; 0x688 <__vector_24+0x66>
     64c:	18 f4       	brcc	.+6      	; 0x654 <__vector_24+0x32>
     64e:	80 3b       	cpi	r24, 0xB0	; 176
     650:	a9 f0       	breq	.+42     	; 0x67c <__vector_24+0x5a>
     652:	22 c0       	rjmp	.+68     	; 0x698 <__vector_24+0x76>
     654:	80 3c       	cpi	r24, 0xC0	; 192
     656:	e1 f0       	breq	.+56     	; 0x690 <__vector_24+0x6e>
     658:	88 3c       	cpi	r24, 0xC8	; 200
     65a:	d1 f0       	breq	.+52     	; 0x690 <__vector_24+0x6e>
     65c:	1d c0       	rjmp	.+58     	; 0x698 <__vector_24+0x76>
		case 0x60:  // SLA+W recibido
		case 0x68:
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
     65e:	85 ec       	ldi	r24, 0xC5	; 197
     660:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
     664:	1c c0       	rjmp	.+56     	; 0x69e <__vector_24+0x7c>

		case 0x80:  // Datos recibidos de Maestro
		twi_received_data = TWDR;
     666:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     66a:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <twi_received_data>
		twi_data_ready = 1;
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <twi_data_ready>
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
     674:	85 ec       	ldi	r24, 0xC5	; 197
     676:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
     67a:	11 c0       	rjmp	.+34     	; 0x69e <__vector_24+0x7c>

		case 0xA8:  // SLA+R recibido ? Maestro quiere leer
		case 0xB0:
		TWDR = 0x00;  // Default, lo sobrescribimos en main
     67c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
     680:	85 ec       	ldi	r24, 0xC5	; 197
     682:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
     686:	0b c0       	rjmp	.+22     	; 0x69e <__vector_24+0x7c>

		case 0xB8:  // Maestro leyó un dato, enviar otro
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
     688:	85 ec       	ldi	r24, 0xC5	; 197
     68a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
     68e:	07 c0       	rjmp	.+14     	; 0x69e <__vector_24+0x7c>

		case 0xC0:  // Maestro terminó lectura
		case 0xC8:
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
     690:	85 ec       	ldi	r24, 0xC5	; 197
     692:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
     696:	03 c0       	rjmp	.+6      	; 0x69e <__vector_24+0x7c>

		default:
		TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
     698:	85 ec       	ldi	r24, 0xC5	; 197
     69a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		break;
	}
}
     69e:	8f 91       	pop	r24
     6a0:	0f 90       	pop	r0
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	0f 90       	pop	r0
     6a6:	1f 90       	pop	r1
     6a8:	18 95       	reti

000006aa <__divsf3>:
     6aa:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__divsf3x>
     6ae:	0c 94 51 04 	jmp	0x8a2	; 0x8a2 <__fp_round>
     6b2:	0e 94 4a 04 	call	0x894	; 0x894 <__fp_pscB>
     6b6:	58 f0       	brcs	.+22     	; 0x6ce <__divsf3+0x24>
     6b8:	0e 94 43 04 	call	0x886	; 0x886 <__fp_pscA>
     6bc:	40 f0       	brcs	.+16     	; 0x6ce <__divsf3+0x24>
     6be:	29 f4       	brne	.+10     	; 0x6ca <__divsf3+0x20>
     6c0:	5f 3f       	cpi	r21, 0xFF	; 255
     6c2:	29 f0       	breq	.+10     	; 0x6ce <__divsf3+0x24>
     6c4:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>
     6c8:	51 11       	cpse	r21, r1
     6ca:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_szero>
     6ce:	0c 94 40 04 	jmp	0x880	; 0x880 <__fp_nan>

000006d2 <__divsf3x>:
     6d2:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fp_split3>
     6d6:	68 f3       	brcs	.-38     	; 0x6b2 <__divsf3+0x8>

000006d8 <__divsf3_pse>:
     6d8:	99 23       	and	r25, r25
     6da:	b1 f3       	breq	.-20     	; 0x6c8 <__divsf3+0x1e>
     6dc:	55 23       	and	r21, r21
     6de:	91 f3       	breq	.-28     	; 0x6c4 <__divsf3+0x1a>
     6e0:	95 1b       	sub	r25, r21
     6e2:	55 0b       	sbc	r21, r21
     6e4:	bb 27       	eor	r27, r27
     6e6:	aa 27       	eor	r26, r26
     6e8:	62 17       	cp	r22, r18
     6ea:	73 07       	cpc	r23, r19
     6ec:	84 07       	cpc	r24, r20
     6ee:	38 f0       	brcs	.+14     	; 0x6fe <__divsf3_pse+0x26>
     6f0:	9f 5f       	subi	r25, 0xFF	; 255
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	22 0f       	add	r18, r18
     6f6:	33 1f       	adc	r19, r19
     6f8:	44 1f       	adc	r20, r20
     6fa:	aa 1f       	adc	r26, r26
     6fc:	a9 f3       	breq	.-22     	; 0x6e8 <__divsf3_pse+0x10>
     6fe:	35 d0       	rcall	.+106    	; 0x76a <__divsf3_pse+0x92>
     700:	0e 2e       	mov	r0, r30
     702:	3a f0       	brmi	.+14     	; 0x712 <__divsf3_pse+0x3a>
     704:	e0 e8       	ldi	r30, 0x80	; 128
     706:	32 d0       	rcall	.+100    	; 0x76c <__divsf3_pse+0x94>
     708:	91 50       	subi	r25, 0x01	; 1
     70a:	50 40       	sbci	r21, 0x00	; 0
     70c:	e6 95       	lsr	r30
     70e:	00 1c       	adc	r0, r0
     710:	ca f7       	brpl	.-14     	; 0x704 <__divsf3_pse+0x2c>
     712:	2b d0       	rcall	.+86     	; 0x76a <__divsf3_pse+0x92>
     714:	fe 2f       	mov	r31, r30
     716:	29 d0       	rcall	.+82     	; 0x76a <__divsf3_pse+0x92>
     718:	66 0f       	add	r22, r22
     71a:	77 1f       	adc	r23, r23
     71c:	88 1f       	adc	r24, r24
     71e:	bb 1f       	adc	r27, r27
     720:	26 17       	cp	r18, r22
     722:	37 07       	cpc	r19, r23
     724:	48 07       	cpc	r20, r24
     726:	ab 07       	cpc	r26, r27
     728:	b0 e8       	ldi	r27, 0x80	; 128
     72a:	09 f0       	breq	.+2      	; 0x72e <__divsf3_pse+0x56>
     72c:	bb 0b       	sbc	r27, r27
     72e:	80 2d       	mov	r24, r0
     730:	bf 01       	movw	r22, r30
     732:	ff 27       	eor	r31, r31
     734:	93 58       	subi	r25, 0x83	; 131
     736:	5f 4f       	sbci	r21, 0xFF	; 255
     738:	3a f0       	brmi	.+14     	; 0x748 <__divsf3_pse+0x70>
     73a:	9e 3f       	cpi	r25, 0xFE	; 254
     73c:	51 05       	cpc	r21, r1
     73e:	78 f0       	brcs	.+30     	; 0x75e <__divsf3_pse+0x86>
     740:	0c 94 3a 04 	jmp	0x874	; 0x874 <__fp_inf>
     744:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_szero>
     748:	5f 3f       	cpi	r21, 0xFF	; 255
     74a:	e4 f3       	brlt	.-8      	; 0x744 <__divsf3_pse+0x6c>
     74c:	98 3e       	cpi	r25, 0xE8	; 232
     74e:	d4 f3       	brlt	.-12     	; 0x744 <__divsf3_pse+0x6c>
     750:	86 95       	lsr	r24
     752:	77 95       	ror	r23
     754:	67 95       	ror	r22
     756:	b7 95       	ror	r27
     758:	f7 95       	ror	r31
     75a:	9f 5f       	subi	r25, 0xFF	; 255
     75c:	c9 f7       	brne	.-14     	; 0x750 <__divsf3_pse+0x78>
     75e:	88 0f       	add	r24, r24
     760:	91 1d       	adc	r25, r1
     762:	96 95       	lsr	r25
     764:	87 95       	ror	r24
     766:	97 f9       	bld	r25, 7
     768:	08 95       	ret
     76a:	e1 e0       	ldi	r30, 0x01	; 1
     76c:	66 0f       	add	r22, r22
     76e:	77 1f       	adc	r23, r23
     770:	88 1f       	adc	r24, r24
     772:	bb 1f       	adc	r27, r27
     774:	62 17       	cp	r22, r18
     776:	73 07       	cpc	r23, r19
     778:	84 07       	cpc	r24, r20
     77a:	ba 07       	cpc	r27, r26
     77c:	20 f0       	brcs	.+8      	; 0x786 <__divsf3_pse+0xae>
     77e:	62 1b       	sub	r22, r18
     780:	73 0b       	sbc	r23, r19
     782:	84 0b       	sbc	r24, r20
     784:	ba 0b       	sbc	r27, r26
     786:	ee 1f       	adc	r30, r30
     788:	88 f7       	brcc	.-30     	; 0x76c <__divsf3_pse+0x94>
     78a:	e0 95       	com	r30
     78c:	08 95       	ret

0000078e <__fixsfsi>:
     78e:	0e 94 ce 03 	call	0x79c	; 0x79c <__fixunssfsi>
     792:	68 94       	set
     794:	b1 11       	cpse	r27, r1
     796:	0c 94 85 04 	jmp	0x90a	; 0x90a <__fp_szero>
     79a:	08 95       	ret

0000079c <__fixunssfsi>:
     79c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__fp_splitA>
     7a0:	88 f0       	brcs	.+34     	; 0x7c4 <__fixunssfsi+0x28>
     7a2:	9f 57       	subi	r25, 0x7F	; 127
     7a4:	98 f0       	brcs	.+38     	; 0x7cc <__fixunssfsi+0x30>
     7a6:	b9 2f       	mov	r27, r25
     7a8:	99 27       	eor	r25, r25
     7aa:	b7 51       	subi	r27, 0x17	; 23
     7ac:	b0 f0       	brcs	.+44     	; 0x7da <__fixunssfsi+0x3e>
     7ae:	e1 f0       	breq	.+56     	; 0x7e8 <__fixunssfsi+0x4c>
     7b0:	66 0f       	add	r22, r22
     7b2:	77 1f       	adc	r23, r23
     7b4:	88 1f       	adc	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	1a f0       	brmi	.+6      	; 0x7c0 <__fixunssfsi+0x24>
     7ba:	ba 95       	dec	r27
     7bc:	c9 f7       	brne	.-14     	; 0x7b0 <__fixunssfsi+0x14>
     7be:	14 c0       	rjmp	.+40     	; 0x7e8 <__fixunssfsi+0x4c>
     7c0:	b1 30       	cpi	r27, 0x01	; 1
     7c2:	91 f0       	breq	.+36     	; 0x7e8 <__fixunssfsi+0x4c>
     7c4:	0e 94 84 04 	call	0x908	; 0x908 <__fp_zero>
     7c8:	b1 e0       	ldi	r27, 0x01	; 1
     7ca:	08 95       	ret
     7cc:	0c 94 84 04 	jmp	0x908	; 0x908 <__fp_zero>
     7d0:	67 2f       	mov	r22, r23
     7d2:	78 2f       	mov	r23, r24
     7d4:	88 27       	eor	r24, r24
     7d6:	b8 5f       	subi	r27, 0xF8	; 248
     7d8:	39 f0       	breq	.+14     	; 0x7e8 <__fixunssfsi+0x4c>
     7da:	b9 3f       	cpi	r27, 0xF9	; 249
     7dc:	cc f3       	brlt	.-14     	; 0x7d0 <__fixunssfsi+0x34>
     7de:	86 95       	lsr	r24
     7e0:	77 95       	ror	r23
     7e2:	67 95       	ror	r22
     7e4:	b3 95       	inc	r27
     7e6:	d9 f7       	brne	.-10     	; 0x7de <__fixunssfsi+0x42>
     7e8:	3e f4       	brtc	.+14     	; 0x7f8 <__fixunssfsi+0x5c>
     7ea:	90 95       	com	r25
     7ec:	80 95       	com	r24
     7ee:	70 95       	com	r23
     7f0:	61 95       	neg	r22
     7f2:	7f 4f       	sbci	r23, 0xFF	; 255
     7f4:	8f 4f       	sbci	r24, 0xFF	; 255
     7f6:	9f 4f       	sbci	r25, 0xFF	; 255
     7f8:	08 95       	ret

000007fa <__floatunsisf>:
     7fa:	e8 94       	clt
     7fc:	09 c0       	rjmp	.+18     	; 0x810 <__DATA_REGION_LENGTH__+0x10>

000007fe <__floatsisf>:
     7fe:	97 fb       	bst	r25, 7
     800:	3e f4       	brtc	.+14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     802:	90 95       	com	r25
     804:	80 95       	com	r24
     806:	70 95       	com	r23
     808:	61 95       	neg	r22
     80a:	7f 4f       	sbci	r23, 0xFF	; 255
     80c:	8f 4f       	sbci	r24, 0xFF	; 255
     80e:	9f 4f       	sbci	r25, 0xFF	; 255
     810:	99 23       	and	r25, r25
     812:	a9 f0       	breq	.+42     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     814:	f9 2f       	mov	r31, r25
     816:	96 e9       	ldi	r25, 0x96	; 150
     818:	bb 27       	eor	r27, r27
     81a:	93 95       	inc	r25
     81c:	f6 95       	lsr	r31
     81e:	87 95       	ror	r24
     820:	77 95       	ror	r23
     822:	67 95       	ror	r22
     824:	b7 95       	ror	r27
     826:	f1 11       	cpse	r31, r1
     828:	f8 cf       	rjmp	.-16     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     82a:	fa f4       	brpl	.+62     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     82c:	bb 0f       	add	r27, r27
     82e:	11 f4       	brne	.+4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     830:	60 ff       	sbrs	r22, 0
     832:	1b c0       	rjmp	.+54     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     834:	6f 5f       	subi	r22, 0xFF	; 255
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	8f 4f       	sbci	r24, 0xFF	; 255
     83a:	9f 4f       	sbci	r25, 0xFF	; 255
     83c:	16 c0       	rjmp	.+44     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     83e:	88 23       	and	r24, r24
     840:	11 f0       	breq	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     842:	96 e9       	ldi	r25, 0x96	; 150
     844:	11 c0       	rjmp	.+34     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
     846:	77 23       	and	r23, r23
     848:	21 f0       	breq	.+8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     84a:	9e e8       	ldi	r25, 0x8E	; 142
     84c:	87 2f       	mov	r24, r23
     84e:	76 2f       	mov	r23, r22
     850:	05 c0       	rjmp	.+10     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     852:	66 23       	and	r22, r22
     854:	71 f0       	breq	.+28     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
     856:	96 e8       	ldi	r25, 0x86	; 134
     858:	86 2f       	mov	r24, r22
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	2a f0       	brmi	.+10     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
     860:	9a 95       	dec	r25
     862:	66 0f       	add	r22, r22
     864:	77 1f       	adc	r23, r23
     866:	88 1f       	adc	r24, r24
     868:	da f7       	brpl	.-10     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
     86a:	88 0f       	add	r24, r24
     86c:	96 95       	lsr	r25
     86e:	87 95       	ror	r24
     870:	97 f9       	bld	r25, 7
     872:	08 95       	ret

00000874 <__fp_inf>:
     874:	97 f9       	bld	r25, 7
     876:	9f 67       	ori	r25, 0x7F	; 127
     878:	80 e8       	ldi	r24, 0x80	; 128
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	08 95       	ret

00000880 <__fp_nan>:
     880:	9f ef       	ldi	r25, 0xFF	; 255
     882:	80 ec       	ldi	r24, 0xC0	; 192
     884:	08 95       	ret

00000886 <__fp_pscA>:
     886:	00 24       	eor	r0, r0
     888:	0a 94       	dec	r0
     88a:	16 16       	cp	r1, r22
     88c:	17 06       	cpc	r1, r23
     88e:	18 06       	cpc	r1, r24
     890:	09 06       	cpc	r0, r25
     892:	08 95       	ret

00000894 <__fp_pscB>:
     894:	00 24       	eor	r0, r0
     896:	0a 94       	dec	r0
     898:	12 16       	cp	r1, r18
     89a:	13 06       	cpc	r1, r19
     89c:	14 06       	cpc	r1, r20
     89e:	05 06       	cpc	r0, r21
     8a0:	08 95       	ret

000008a2 <__fp_round>:
     8a2:	09 2e       	mov	r0, r25
     8a4:	03 94       	inc	r0
     8a6:	00 0c       	add	r0, r0
     8a8:	11 f4       	brne	.+4      	; 0x8ae <__fp_round+0xc>
     8aa:	88 23       	and	r24, r24
     8ac:	52 f0       	brmi	.+20     	; 0x8c2 <__fp_round+0x20>
     8ae:	bb 0f       	add	r27, r27
     8b0:	40 f4       	brcc	.+16     	; 0x8c2 <__fp_round+0x20>
     8b2:	bf 2b       	or	r27, r31
     8b4:	11 f4       	brne	.+4      	; 0x8ba <__fp_round+0x18>
     8b6:	60 ff       	sbrs	r22, 0
     8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <__fp_round+0x20>
     8ba:	6f 5f       	subi	r22, 0xFF	; 255
     8bc:	7f 4f       	sbci	r23, 0xFF	; 255
     8be:	8f 4f       	sbci	r24, 0xFF	; 255
     8c0:	9f 4f       	sbci	r25, 0xFF	; 255
     8c2:	08 95       	ret

000008c4 <__fp_split3>:
     8c4:	57 fd       	sbrc	r21, 7
     8c6:	90 58       	subi	r25, 0x80	; 128
     8c8:	44 0f       	add	r20, r20
     8ca:	55 1f       	adc	r21, r21
     8cc:	59 f0       	breq	.+22     	; 0x8e4 <__fp_splitA+0x10>
     8ce:	5f 3f       	cpi	r21, 0xFF	; 255
     8d0:	71 f0       	breq	.+28     	; 0x8ee <__fp_splitA+0x1a>
     8d2:	47 95       	ror	r20

000008d4 <__fp_splitA>:
     8d4:	88 0f       	add	r24, r24
     8d6:	97 fb       	bst	r25, 7
     8d8:	99 1f       	adc	r25, r25
     8da:	61 f0       	breq	.+24     	; 0x8f4 <__fp_splitA+0x20>
     8dc:	9f 3f       	cpi	r25, 0xFF	; 255
     8de:	79 f0       	breq	.+30     	; 0x8fe <__fp_splitA+0x2a>
     8e0:	87 95       	ror	r24
     8e2:	08 95       	ret
     8e4:	12 16       	cp	r1, r18
     8e6:	13 06       	cpc	r1, r19
     8e8:	14 06       	cpc	r1, r20
     8ea:	55 1f       	adc	r21, r21
     8ec:	f2 cf       	rjmp	.-28     	; 0x8d2 <__fp_split3+0xe>
     8ee:	46 95       	lsr	r20
     8f0:	f1 df       	rcall	.-30     	; 0x8d4 <__fp_splitA>
     8f2:	08 c0       	rjmp	.+16     	; 0x904 <__stack+0x5>
     8f4:	16 16       	cp	r1, r22
     8f6:	17 06       	cpc	r1, r23
     8f8:	18 06       	cpc	r1, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	f1 cf       	rjmp	.-30     	; 0x8e0 <__fp_splitA+0xc>
     8fe:	86 95       	lsr	r24
     900:	71 05       	cpc	r23, r1
     902:	61 05       	cpc	r22, r1
     904:	08 94       	sec
     906:	08 95       	ret

00000908 <__fp_zero>:
     908:	e8 94       	clt

0000090a <__fp_szero>:
     90a:	bb 27       	eor	r27, r27
     90c:	66 27       	eor	r22, r22
     90e:	77 27       	eor	r23, r23
     910:	cb 01       	movw	r24, r22
     912:	97 f9       	bld	r25, 7
     914:	08 95       	ret

00000916 <__gesf2>:
     916:	0e 94 90 04 	call	0x920	; 0x920 <__fp_cmp>
     91a:	08 f4       	brcc	.+2      	; 0x91e <__gesf2+0x8>
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	08 95       	ret

00000920 <__fp_cmp>:
     920:	99 0f       	add	r25, r25
     922:	00 08       	sbc	r0, r0
     924:	55 0f       	add	r21, r21
     926:	aa 0b       	sbc	r26, r26
     928:	e0 e8       	ldi	r30, 0x80	; 128
     92a:	fe ef       	ldi	r31, 0xFE	; 254
     92c:	16 16       	cp	r1, r22
     92e:	17 06       	cpc	r1, r23
     930:	e8 07       	cpc	r30, r24
     932:	f9 07       	cpc	r31, r25
     934:	c0 f0       	brcs	.+48     	; 0x966 <__fp_cmp+0x46>
     936:	12 16       	cp	r1, r18
     938:	13 06       	cpc	r1, r19
     93a:	e4 07       	cpc	r30, r20
     93c:	f5 07       	cpc	r31, r21
     93e:	98 f0       	brcs	.+38     	; 0x966 <__fp_cmp+0x46>
     940:	62 1b       	sub	r22, r18
     942:	73 0b       	sbc	r23, r19
     944:	84 0b       	sbc	r24, r20
     946:	95 0b       	sbc	r25, r21
     948:	39 f4       	brne	.+14     	; 0x958 <__fp_cmp+0x38>
     94a:	0a 26       	eor	r0, r26
     94c:	61 f0       	breq	.+24     	; 0x966 <__fp_cmp+0x46>
     94e:	23 2b       	or	r18, r19
     950:	24 2b       	or	r18, r20
     952:	25 2b       	or	r18, r21
     954:	21 f4       	brne	.+8      	; 0x95e <__fp_cmp+0x3e>
     956:	08 95       	ret
     958:	0a 26       	eor	r0, r26
     95a:	09 f4       	brne	.+2      	; 0x95e <__fp_cmp+0x3e>
     95c:	a1 40       	sbci	r26, 0x01	; 1
     95e:	a6 95       	lsr	r26
     960:	8f ef       	ldi	r24, 0xFF	; 255
     962:	81 1d       	adc	r24, r1
     964:	81 1d       	adc	r24, r1
     966:	08 95       	ret

00000968 <__divmodsi4>:
     968:	05 2e       	mov	r0, r21
     96a:	97 fb       	bst	r25, 7
     96c:	1e f4       	brtc	.+6      	; 0x974 <__divmodsi4+0xc>
     96e:	00 94       	com	r0
     970:	0e 94 cb 04 	call	0x996	; 0x996 <__negsi2>
     974:	57 fd       	sbrc	r21, 7
     976:	07 d0       	rcall	.+14     	; 0x986 <__divmodsi4_neg2>
     978:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__udivmodsi4>
     97c:	07 fc       	sbrc	r0, 7
     97e:	03 d0       	rcall	.+6      	; 0x986 <__divmodsi4_neg2>
     980:	4e f4       	brtc	.+18     	; 0x994 <__divmodsi4_exit>
     982:	0c 94 cb 04 	jmp	0x996	; 0x996 <__negsi2>

00000986 <__divmodsi4_neg2>:
     986:	50 95       	com	r21
     988:	40 95       	com	r20
     98a:	30 95       	com	r19
     98c:	21 95       	neg	r18
     98e:	3f 4f       	sbci	r19, 0xFF	; 255
     990:	4f 4f       	sbci	r20, 0xFF	; 255
     992:	5f 4f       	sbci	r21, 0xFF	; 255

00000994 <__divmodsi4_exit>:
     994:	08 95       	ret

00000996 <__negsi2>:
     996:	90 95       	com	r25
     998:	80 95       	com	r24
     99a:	70 95       	com	r23
     99c:	61 95       	neg	r22
     99e:	7f 4f       	sbci	r23, 0xFF	; 255
     9a0:	8f 4f       	sbci	r24, 0xFF	; 255
     9a2:	9f 4f       	sbci	r25, 0xFF	; 255
     9a4:	08 95       	ret

000009a6 <__udivmodsi4>:
     9a6:	a1 e2       	ldi	r26, 0x21	; 33
     9a8:	1a 2e       	mov	r1, r26
     9aa:	aa 1b       	sub	r26, r26
     9ac:	bb 1b       	sub	r27, r27
     9ae:	fd 01       	movw	r30, r26
     9b0:	0d c0       	rjmp	.+26     	; 0x9cc <__udivmodsi4_ep>

000009b2 <__udivmodsi4_loop>:
     9b2:	aa 1f       	adc	r26, r26
     9b4:	bb 1f       	adc	r27, r27
     9b6:	ee 1f       	adc	r30, r30
     9b8:	ff 1f       	adc	r31, r31
     9ba:	a2 17       	cp	r26, r18
     9bc:	b3 07       	cpc	r27, r19
     9be:	e4 07       	cpc	r30, r20
     9c0:	f5 07       	cpc	r31, r21
     9c2:	20 f0       	brcs	.+8      	; 0x9cc <__udivmodsi4_ep>
     9c4:	a2 1b       	sub	r26, r18
     9c6:	b3 0b       	sbc	r27, r19
     9c8:	e4 0b       	sbc	r30, r20
     9ca:	f5 0b       	sbc	r31, r21

000009cc <__udivmodsi4_ep>:
     9cc:	66 1f       	adc	r22, r22
     9ce:	77 1f       	adc	r23, r23
     9d0:	88 1f       	adc	r24, r24
     9d2:	99 1f       	adc	r25, r25
     9d4:	1a 94       	dec	r1
     9d6:	69 f7       	brne	.-38     	; 0x9b2 <__udivmodsi4_loop>
     9d8:	60 95       	com	r22
     9da:	70 95       	com	r23
     9dc:	80 95       	com	r24
     9de:	90 95       	com	r25
     9e0:	9b 01       	movw	r18, r22
     9e2:	ac 01       	movw	r20, r24
     9e4:	bd 01       	movw	r22, r26
     9e6:	cf 01       	movw	r24, r30
     9e8:	08 95       	ret

000009ea <snprintf>:
     9ea:	ae e0       	ldi	r26, 0x0E	; 14
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	eb ef       	ldi	r30, 0xFB	; 251
     9f0:	f4 e0       	ldi	r31, 0x04	; 4
     9f2:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__prologue_saves__+0x1c>
     9f6:	0d 89       	ldd	r16, Y+21	; 0x15
     9f8:	1e 89       	ldd	r17, Y+22	; 0x16
     9fa:	8f 89       	ldd	r24, Y+23	; 0x17
     9fc:	98 8d       	ldd	r25, Y+24	; 0x18
     9fe:	26 e0       	ldi	r18, 0x06	; 6
     a00:	2c 83       	std	Y+4, r18	; 0x04
     a02:	1a 83       	std	Y+2, r17	; 0x02
     a04:	09 83       	std	Y+1, r16	; 0x01
     a06:	97 ff       	sbrs	r25, 7
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <snprintf+0x24>
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e8       	ldi	r25, 0x80	; 128
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	9e 83       	std	Y+6, r25	; 0x06
     a12:	8d 83       	std	Y+5, r24	; 0x05
     a14:	ae 01       	movw	r20, r28
     a16:	45 5e       	subi	r20, 0xE5	; 229
     a18:	5f 4f       	sbci	r21, 0xFF	; 255
     a1a:	69 8d       	ldd	r22, Y+25	; 0x19
     a1c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     a1e:	ce 01       	movw	r24, r28
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	0e 94 25 05 	call	0xa4a	; 0xa4a <vfprintf>
     a26:	4d 81       	ldd	r20, Y+5	; 0x05
     a28:	5e 81       	ldd	r21, Y+6	; 0x06
     a2a:	57 fd       	sbrc	r21, 7
     a2c:	0a c0       	rjmp	.+20     	; 0xa42 <snprintf+0x58>
     a2e:	2f 81       	ldd	r18, Y+7	; 0x07
     a30:	38 85       	ldd	r19, Y+8	; 0x08
     a32:	42 17       	cp	r20, r18
     a34:	53 07       	cpc	r21, r19
     a36:	0c f4       	brge	.+2      	; 0xa3a <snprintf+0x50>
     a38:	9a 01       	movw	r18, r20
     a3a:	f8 01       	movw	r30, r16
     a3c:	e2 0f       	add	r30, r18
     a3e:	f3 1f       	adc	r31, r19
     a40:	10 82       	st	Z, r1
     a42:	2e 96       	adiw	r28, 0x0e	; 14
     a44:	e4 e0       	ldi	r30, 0x04	; 4
     a46:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__epilogue_restores__+0x1c>

00000a4a <vfprintf>:
     a4a:	ab e0       	ldi	r26, 0x0B	; 11
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	eb e2       	ldi	r30, 0x2B	; 43
     a50:	f5 e0       	ldi	r31, 0x05	; 5
     a52:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__prologue_saves__>
     a56:	6c 01       	movw	r12, r24
     a58:	7b 01       	movw	r14, r22
     a5a:	8a 01       	movw	r16, r20
     a5c:	fc 01       	movw	r30, r24
     a5e:	17 82       	std	Z+7, r1	; 0x07
     a60:	16 82       	std	Z+6, r1	; 0x06
     a62:	83 81       	ldd	r24, Z+3	; 0x03
     a64:	81 ff       	sbrs	r24, 1
     a66:	cc c1       	rjmp	.+920    	; 0xe00 <vfprintf+0x3b6>
     a68:	ce 01       	movw	r24, r28
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	3c 01       	movw	r6, r24
     a6e:	f6 01       	movw	r30, r12
     a70:	93 81       	ldd	r25, Z+3	; 0x03
     a72:	f7 01       	movw	r30, r14
     a74:	93 fd       	sbrc	r25, 3
     a76:	85 91       	lpm	r24, Z+
     a78:	93 ff       	sbrs	r25, 3
     a7a:	81 91       	ld	r24, Z+
     a7c:	7f 01       	movw	r14, r30
     a7e:	88 23       	and	r24, r24
     a80:	09 f4       	brne	.+2      	; 0xa84 <vfprintf+0x3a>
     a82:	ba c1       	rjmp	.+884    	; 0xdf8 <vfprintf+0x3ae>
     a84:	85 32       	cpi	r24, 0x25	; 37
     a86:	39 f4       	brne	.+14     	; 0xa96 <vfprintf+0x4c>
     a88:	93 fd       	sbrc	r25, 3
     a8a:	85 91       	lpm	r24, Z+
     a8c:	93 ff       	sbrs	r25, 3
     a8e:	81 91       	ld	r24, Z+
     a90:	7f 01       	movw	r14, r30
     a92:	85 32       	cpi	r24, 0x25	; 37
     a94:	29 f4       	brne	.+10     	; 0xaa0 <vfprintf+0x56>
     a96:	b6 01       	movw	r22, r12
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 1c 07 	call	0xe38	; 0xe38 <fputc>
     a9e:	e7 cf       	rjmp	.-50     	; 0xa6e <vfprintf+0x24>
     aa0:	91 2c       	mov	r9, r1
     aa2:	21 2c       	mov	r2, r1
     aa4:	31 2c       	mov	r3, r1
     aa6:	ff e1       	ldi	r31, 0x1F	; 31
     aa8:	f3 15       	cp	r31, r3
     aaa:	d8 f0       	brcs	.+54     	; 0xae2 <vfprintf+0x98>
     aac:	8b 32       	cpi	r24, 0x2B	; 43
     aae:	79 f0       	breq	.+30     	; 0xace <vfprintf+0x84>
     ab0:	38 f4       	brcc	.+14     	; 0xac0 <vfprintf+0x76>
     ab2:	80 32       	cpi	r24, 0x20	; 32
     ab4:	79 f0       	breq	.+30     	; 0xad4 <vfprintf+0x8a>
     ab6:	83 32       	cpi	r24, 0x23	; 35
     ab8:	a1 f4       	brne	.+40     	; 0xae2 <vfprintf+0x98>
     aba:	23 2d       	mov	r18, r3
     abc:	20 61       	ori	r18, 0x10	; 16
     abe:	1d c0       	rjmp	.+58     	; 0xafa <vfprintf+0xb0>
     ac0:	8d 32       	cpi	r24, 0x2D	; 45
     ac2:	61 f0       	breq	.+24     	; 0xadc <vfprintf+0x92>
     ac4:	80 33       	cpi	r24, 0x30	; 48
     ac6:	69 f4       	brne	.+26     	; 0xae2 <vfprintf+0x98>
     ac8:	23 2d       	mov	r18, r3
     aca:	21 60       	ori	r18, 0x01	; 1
     acc:	16 c0       	rjmp	.+44     	; 0xafa <vfprintf+0xb0>
     ace:	83 2d       	mov	r24, r3
     ad0:	82 60       	ori	r24, 0x02	; 2
     ad2:	38 2e       	mov	r3, r24
     ad4:	e3 2d       	mov	r30, r3
     ad6:	e4 60       	ori	r30, 0x04	; 4
     ad8:	3e 2e       	mov	r3, r30
     ada:	2a c0       	rjmp	.+84     	; 0xb30 <vfprintf+0xe6>
     adc:	f3 2d       	mov	r31, r3
     ade:	f8 60       	ori	r31, 0x08	; 8
     ae0:	1d c0       	rjmp	.+58     	; 0xb1c <vfprintf+0xd2>
     ae2:	37 fc       	sbrc	r3, 7
     ae4:	2d c0       	rjmp	.+90     	; 0xb40 <vfprintf+0xf6>
     ae6:	20 ed       	ldi	r18, 0xD0	; 208
     ae8:	28 0f       	add	r18, r24
     aea:	2a 30       	cpi	r18, 0x0A	; 10
     aec:	40 f0       	brcs	.+16     	; 0xafe <vfprintf+0xb4>
     aee:	8e 32       	cpi	r24, 0x2E	; 46
     af0:	b9 f4       	brne	.+46     	; 0xb20 <vfprintf+0xd6>
     af2:	36 fc       	sbrc	r3, 6
     af4:	81 c1       	rjmp	.+770    	; 0xdf8 <vfprintf+0x3ae>
     af6:	23 2d       	mov	r18, r3
     af8:	20 64       	ori	r18, 0x40	; 64
     afa:	32 2e       	mov	r3, r18
     afc:	19 c0       	rjmp	.+50     	; 0xb30 <vfprintf+0xe6>
     afe:	36 fe       	sbrs	r3, 6
     b00:	06 c0       	rjmp	.+12     	; 0xb0e <vfprintf+0xc4>
     b02:	8a e0       	ldi	r24, 0x0A	; 10
     b04:	98 9e       	mul	r9, r24
     b06:	20 0d       	add	r18, r0
     b08:	11 24       	eor	r1, r1
     b0a:	92 2e       	mov	r9, r18
     b0c:	11 c0       	rjmp	.+34     	; 0xb30 <vfprintf+0xe6>
     b0e:	ea e0       	ldi	r30, 0x0A	; 10
     b10:	2e 9e       	mul	r2, r30
     b12:	20 0d       	add	r18, r0
     b14:	11 24       	eor	r1, r1
     b16:	22 2e       	mov	r2, r18
     b18:	f3 2d       	mov	r31, r3
     b1a:	f0 62       	ori	r31, 0x20	; 32
     b1c:	3f 2e       	mov	r3, r31
     b1e:	08 c0       	rjmp	.+16     	; 0xb30 <vfprintf+0xe6>
     b20:	8c 36       	cpi	r24, 0x6C	; 108
     b22:	21 f4       	brne	.+8      	; 0xb2c <vfprintf+0xe2>
     b24:	83 2d       	mov	r24, r3
     b26:	80 68       	ori	r24, 0x80	; 128
     b28:	38 2e       	mov	r3, r24
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <vfprintf+0xe6>
     b2c:	88 36       	cpi	r24, 0x68	; 104
     b2e:	41 f4       	brne	.+16     	; 0xb40 <vfprintf+0xf6>
     b30:	f7 01       	movw	r30, r14
     b32:	93 fd       	sbrc	r25, 3
     b34:	85 91       	lpm	r24, Z+
     b36:	93 ff       	sbrs	r25, 3
     b38:	81 91       	ld	r24, Z+
     b3a:	7f 01       	movw	r14, r30
     b3c:	81 11       	cpse	r24, r1
     b3e:	b3 cf       	rjmp	.-154    	; 0xaa6 <vfprintf+0x5c>
     b40:	98 2f       	mov	r25, r24
     b42:	9f 7d       	andi	r25, 0xDF	; 223
     b44:	95 54       	subi	r25, 0x45	; 69
     b46:	93 30       	cpi	r25, 0x03	; 3
     b48:	28 f4       	brcc	.+10     	; 0xb54 <vfprintf+0x10a>
     b4a:	0c 5f       	subi	r16, 0xFC	; 252
     b4c:	1f 4f       	sbci	r17, 0xFF	; 255
     b4e:	9f e3       	ldi	r25, 0x3F	; 63
     b50:	99 83       	std	Y+1, r25	; 0x01
     b52:	0d c0       	rjmp	.+26     	; 0xb6e <vfprintf+0x124>
     b54:	83 36       	cpi	r24, 0x63	; 99
     b56:	31 f0       	breq	.+12     	; 0xb64 <vfprintf+0x11a>
     b58:	83 37       	cpi	r24, 0x73	; 115
     b5a:	71 f0       	breq	.+28     	; 0xb78 <vfprintf+0x12e>
     b5c:	83 35       	cpi	r24, 0x53	; 83
     b5e:	09 f0       	breq	.+2      	; 0xb62 <vfprintf+0x118>
     b60:	59 c0       	rjmp	.+178    	; 0xc14 <vfprintf+0x1ca>
     b62:	21 c0       	rjmp	.+66     	; 0xba6 <vfprintf+0x15c>
     b64:	f8 01       	movw	r30, r16
     b66:	80 81       	ld	r24, Z
     b68:	89 83       	std	Y+1, r24	; 0x01
     b6a:	0e 5f       	subi	r16, 0xFE	; 254
     b6c:	1f 4f       	sbci	r17, 0xFF	; 255
     b6e:	88 24       	eor	r8, r8
     b70:	83 94       	inc	r8
     b72:	91 2c       	mov	r9, r1
     b74:	53 01       	movw	r10, r6
     b76:	13 c0       	rjmp	.+38     	; 0xb9e <vfprintf+0x154>
     b78:	28 01       	movw	r4, r16
     b7a:	f2 e0       	ldi	r31, 0x02	; 2
     b7c:	4f 0e       	add	r4, r31
     b7e:	51 1c       	adc	r5, r1
     b80:	f8 01       	movw	r30, r16
     b82:	a0 80       	ld	r10, Z
     b84:	b1 80       	ldd	r11, Z+1	; 0x01
     b86:	36 fe       	sbrs	r3, 6
     b88:	03 c0       	rjmp	.+6      	; 0xb90 <vfprintf+0x146>
     b8a:	69 2d       	mov	r22, r9
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <vfprintf+0x14a>
     b90:	6f ef       	ldi	r22, 0xFF	; 255
     b92:	7f ef       	ldi	r23, 0xFF	; 255
     b94:	c5 01       	movw	r24, r10
     b96:	0e 94 11 07 	call	0xe22	; 0xe22 <strnlen>
     b9a:	4c 01       	movw	r8, r24
     b9c:	82 01       	movw	r16, r4
     b9e:	f3 2d       	mov	r31, r3
     ba0:	ff 77       	andi	r31, 0x7F	; 127
     ba2:	3f 2e       	mov	r3, r31
     ba4:	16 c0       	rjmp	.+44     	; 0xbd2 <vfprintf+0x188>
     ba6:	28 01       	movw	r4, r16
     ba8:	22 e0       	ldi	r18, 0x02	; 2
     baa:	42 0e       	add	r4, r18
     bac:	51 1c       	adc	r5, r1
     bae:	f8 01       	movw	r30, r16
     bb0:	a0 80       	ld	r10, Z
     bb2:	b1 80       	ldd	r11, Z+1	; 0x01
     bb4:	36 fe       	sbrs	r3, 6
     bb6:	03 c0       	rjmp	.+6      	; 0xbbe <vfprintf+0x174>
     bb8:	69 2d       	mov	r22, r9
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <vfprintf+0x178>
     bbe:	6f ef       	ldi	r22, 0xFF	; 255
     bc0:	7f ef       	ldi	r23, 0xFF	; 255
     bc2:	c5 01       	movw	r24, r10
     bc4:	0e 94 06 07 	call	0xe0c	; 0xe0c <strnlen_P>
     bc8:	4c 01       	movw	r8, r24
     bca:	f3 2d       	mov	r31, r3
     bcc:	f0 68       	ori	r31, 0x80	; 128
     bce:	3f 2e       	mov	r3, r31
     bd0:	82 01       	movw	r16, r4
     bd2:	33 fc       	sbrc	r3, 3
     bd4:	1b c0       	rjmp	.+54     	; 0xc0c <vfprintf+0x1c2>
     bd6:	82 2d       	mov	r24, r2
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	88 16       	cp	r8, r24
     bdc:	99 06       	cpc	r9, r25
     bde:	b0 f4       	brcc	.+44     	; 0xc0c <vfprintf+0x1c2>
     be0:	b6 01       	movw	r22, r12
     be2:	80 e2       	ldi	r24, 0x20	; 32
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 1c 07 	call	0xe38	; 0xe38 <fputc>
     bea:	2a 94       	dec	r2
     bec:	f4 cf       	rjmp	.-24     	; 0xbd6 <vfprintf+0x18c>
     bee:	f5 01       	movw	r30, r10
     bf0:	37 fc       	sbrc	r3, 7
     bf2:	85 91       	lpm	r24, Z+
     bf4:	37 fe       	sbrs	r3, 7
     bf6:	81 91       	ld	r24, Z+
     bf8:	5f 01       	movw	r10, r30
     bfa:	b6 01       	movw	r22, r12
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 1c 07 	call	0xe38	; 0xe38 <fputc>
     c02:	21 10       	cpse	r2, r1
     c04:	2a 94       	dec	r2
     c06:	21 e0       	ldi	r18, 0x01	; 1
     c08:	82 1a       	sub	r8, r18
     c0a:	91 08       	sbc	r9, r1
     c0c:	81 14       	cp	r8, r1
     c0e:	91 04       	cpc	r9, r1
     c10:	71 f7       	brne	.-36     	; 0xbee <vfprintf+0x1a4>
     c12:	e8 c0       	rjmp	.+464    	; 0xde4 <vfprintf+0x39a>
     c14:	84 36       	cpi	r24, 0x64	; 100
     c16:	11 f0       	breq	.+4      	; 0xc1c <vfprintf+0x1d2>
     c18:	89 36       	cpi	r24, 0x69	; 105
     c1a:	41 f5       	brne	.+80     	; 0xc6c <vfprintf+0x222>
     c1c:	f8 01       	movw	r30, r16
     c1e:	37 fe       	sbrs	r3, 7
     c20:	07 c0       	rjmp	.+14     	; 0xc30 <vfprintf+0x1e6>
     c22:	60 81       	ld	r22, Z
     c24:	71 81       	ldd	r23, Z+1	; 0x01
     c26:	82 81       	ldd	r24, Z+2	; 0x02
     c28:	93 81       	ldd	r25, Z+3	; 0x03
     c2a:	0c 5f       	subi	r16, 0xFC	; 252
     c2c:	1f 4f       	sbci	r17, 0xFF	; 255
     c2e:	08 c0       	rjmp	.+16     	; 0xc40 <vfprintf+0x1f6>
     c30:	60 81       	ld	r22, Z
     c32:	71 81       	ldd	r23, Z+1	; 0x01
     c34:	07 2e       	mov	r0, r23
     c36:	00 0c       	add	r0, r0
     c38:	88 0b       	sbc	r24, r24
     c3a:	99 0b       	sbc	r25, r25
     c3c:	0e 5f       	subi	r16, 0xFE	; 254
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	f3 2d       	mov	r31, r3
     c42:	ff 76       	andi	r31, 0x6F	; 111
     c44:	3f 2e       	mov	r3, r31
     c46:	97 ff       	sbrs	r25, 7
     c48:	09 c0       	rjmp	.+18     	; 0xc5c <vfprintf+0x212>
     c4a:	90 95       	com	r25
     c4c:	80 95       	com	r24
     c4e:	70 95       	com	r23
     c50:	61 95       	neg	r22
     c52:	7f 4f       	sbci	r23, 0xFF	; 255
     c54:	8f 4f       	sbci	r24, 0xFF	; 255
     c56:	9f 4f       	sbci	r25, 0xFF	; 255
     c58:	f0 68       	ori	r31, 0x80	; 128
     c5a:	3f 2e       	mov	r3, r31
     c5c:	2a e0       	ldi	r18, 0x0A	; 10
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	a3 01       	movw	r20, r6
     c62:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__ultoa_invert>
     c66:	88 2e       	mov	r8, r24
     c68:	86 18       	sub	r8, r6
     c6a:	45 c0       	rjmp	.+138    	; 0xcf6 <vfprintf+0x2ac>
     c6c:	85 37       	cpi	r24, 0x75	; 117
     c6e:	31 f4       	brne	.+12     	; 0xc7c <vfprintf+0x232>
     c70:	23 2d       	mov	r18, r3
     c72:	2f 7e       	andi	r18, 0xEF	; 239
     c74:	b2 2e       	mov	r11, r18
     c76:	2a e0       	ldi	r18, 0x0A	; 10
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	25 c0       	rjmp	.+74     	; 0xcc6 <vfprintf+0x27c>
     c7c:	93 2d       	mov	r25, r3
     c7e:	99 7f       	andi	r25, 0xF9	; 249
     c80:	b9 2e       	mov	r11, r25
     c82:	8f 36       	cpi	r24, 0x6F	; 111
     c84:	c1 f0       	breq	.+48     	; 0xcb6 <vfprintf+0x26c>
     c86:	18 f4       	brcc	.+6      	; 0xc8e <vfprintf+0x244>
     c88:	88 35       	cpi	r24, 0x58	; 88
     c8a:	79 f0       	breq	.+30     	; 0xcaa <vfprintf+0x260>
     c8c:	b5 c0       	rjmp	.+362    	; 0xdf8 <vfprintf+0x3ae>
     c8e:	80 37       	cpi	r24, 0x70	; 112
     c90:	19 f0       	breq	.+6      	; 0xc98 <vfprintf+0x24e>
     c92:	88 37       	cpi	r24, 0x78	; 120
     c94:	21 f0       	breq	.+8      	; 0xc9e <vfprintf+0x254>
     c96:	b0 c0       	rjmp	.+352    	; 0xdf8 <vfprintf+0x3ae>
     c98:	e9 2f       	mov	r30, r25
     c9a:	e0 61       	ori	r30, 0x10	; 16
     c9c:	be 2e       	mov	r11, r30
     c9e:	b4 fe       	sbrs	r11, 4
     ca0:	0d c0       	rjmp	.+26     	; 0xcbc <vfprintf+0x272>
     ca2:	fb 2d       	mov	r31, r11
     ca4:	f4 60       	ori	r31, 0x04	; 4
     ca6:	bf 2e       	mov	r11, r31
     ca8:	09 c0       	rjmp	.+18     	; 0xcbc <vfprintf+0x272>
     caa:	34 fe       	sbrs	r3, 4
     cac:	0a c0       	rjmp	.+20     	; 0xcc2 <vfprintf+0x278>
     cae:	29 2f       	mov	r18, r25
     cb0:	26 60       	ori	r18, 0x06	; 6
     cb2:	b2 2e       	mov	r11, r18
     cb4:	06 c0       	rjmp	.+12     	; 0xcc2 <vfprintf+0x278>
     cb6:	28 e0       	ldi	r18, 0x08	; 8
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	05 c0       	rjmp	.+10     	; 0xcc6 <vfprintf+0x27c>
     cbc:	20 e1       	ldi	r18, 0x10	; 16
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	02 c0       	rjmp	.+4      	; 0xcc6 <vfprintf+0x27c>
     cc2:	20 e1       	ldi	r18, 0x10	; 16
     cc4:	32 e0       	ldi	r19, 0x02	; 2
     cc6:	f8 01       	movw	r30, r16
     cc8:	b7 fe       	sbrs	r11, 7
     cca:	07 c0       	rjmp	.+14     	; 0xcda <vfprintf+0x290>
     ccc:	60 81       	ld	r22, Z
     cce:	71 81       	ldd	r23, Z+1	; 0x01
     cd0:	82 81       	ldd	r24, Z+2	; 0x02
     cd2:	93 81       	ldd	r25, Z+3	; 0x03
     cd4:	0c 5f       	subi	r16, 0xFC	; 252
     cd6:	1f 4f       	sbci	r17, 0xFF	; 255
     cd8:	06 c0       	rjmp	.+12     	; 0xce6 <vfprintf+0x29c>
     cda:	60 81       	ld	r22, Z
     cdc:	71 81       	ldd	r23, Z+1	; 0x01
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 5f       	subi	r16, 0xFE	; 254
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	a3 01       	movw	r20, r6
     ce8:	0e 94 58 07 	call	0xeb0	; 0xeb0 <__ultoa_invert>
     cec:	88 2e       	mov	r8, r24
     cee:	86 18       	sub	r8, r6
     cf0:	fb 2d       	mov	r31, r11
     cf2:	ff 77       	andi	r31, 0x7F	; 127
     cf4:	3f 2e       	mov	r3, r31
     cf6:	36 fe       	sbrs	r3, 6
     cf8:	0d c0       	rjmp	.+26     	; 0xd14 <vfprintf+0x2ca>
     cfa:	23 2d       	mov	r18, r3
     cfc:	2e 7f       	andi	r18, 0xFE	; 254
     cfe:	a2 2e       	mov	r10, r18
     d00:	89 14       	cp	r8, r9
     d02:	58 f4       	brcc	.+22     	; 0xd1a <vfprintf+0x2d0>
     d04:	34 fe       	sbrs	r3, 4
     d06:	0b c0       	rjmp	.+22     	; 0xd1e <vfprintf+0x2d4>
     d08:	32 fc       	sbrc	r3, 2
     d0a:	09 c0       	rjmp	.+18     	; 0xd1e <vfprintf+0x2d4>
     d0c:	83 2d       	mov	r24, r3
     d0e:	8e 7e       	andi	r24, 0xEE	; 238
     d10:	a8 2e       	mov	r10, r24
     d12:	05 c0       	rjmp	.+10     	; 0xd1e <vfprintf+0x2d4>
     d14:	b8 2c       	mov	r11, r8
     d16:	a3 2c       	mov	r10, r3
     d18:	03 c0       	rjmp	.+6      	; 0xd20 <vfprintf+0x2d6>
     d1a:	b8 2c       	mov	r11, r8
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <vfprintf+0x2d6>
     d1e:	b9 2c       	mov	r11, r9
     d20:	a4 fe       	sbrs	r10, 4
     d22:	0f c0       	rjmp	.+30     	; 0xd42 <vfprintf+0x2f8>
     d24:	fe 01       	movw	r30, r28
     d26:	e8 0d       	add	r30, r8
     d28:	f1 1d       	adc	r31, r1
     d2a:	80 81       	ld	r24, Z
     d2c:	80 33       	cpi	r24, 0x30	; 48
     d2e:	21 f4       	brne	.+8      	; 0xd38 <vfprintf+0x2ee>
     d30:	9a 2d       	mov	r25, r10
     d32:	99 7e       	andi	r25, 0xE9	; 233
     d34:	a9 2e       	mov	r10, r25
     d36:	09 c0       	rjmp	.+18     	; 0xd4a <vfprintf+0x300>
     d38:	a2 fe       	sbrs	r10, 2
     d3a:	06 c0       	rjmp	.+12     	; 0xd48 <vfprintf+0x2fe>
     d3c:	b3 94       	inc	r11
     d3e:	b3 94       	inc	r11
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <vfprintf+0x300>
     d42:	8a 2d       	mov	r24, r10
     d44:	86 78       	andi	r24, 0x86	; 134
     d46:	09 f0       	breq	.+2      	; 0xd4a <vfprintf+0x300>
     d48:	b3 94       	inc	r11
     d4a:	a3 fc       	sbrc	r10, 3
     d4c:	11 c0       	rjmp	.+34     	; 0xd70 <vfprintf+0x326>
     d4e:	a0 fe       	sbrs	r10, 0
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <vfprintf+0x314>
     d52:	b2 14       	cp	r11, r2
     d54:	88 f4       	brcc	.+34     	; 0xd78 <vfprintf+0x32e>
     d56:	28 0c       	add	r2, r8
     d58:	92 2c       	mov	r9, r2
     d5a:	9b 18       	sub	r9, r11
     d5c:	0e c0       	rjmp	.+28     	; 0xd7a <vfprintf+0x330>
     d5e:	b2 14       	cp	r11, r2
     d60:	60 f4       	brcc	.+24     	; 0xd7a <vfprintf+0x330>
     d62:	b6 01       	movw	r22, r12
     d64:	80 e2       	ldi	r24, 0x20	; 32
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	0e 94 1c 07 	call	0xe38	; 0xe38 <fputc>
     d6c:	b3 94       	inc	r11
     d6e:	f7 cf       	rjmp	.-18     	; 0xd5e <vfprintf+0x314>
     d70:	b2 14       	cp	r11, r2
     d72:	18 f4       	brcc	.+6      	; 0xd7a <vfprintf+0x330>
     d74:	2b 18       	sub	r2, r11
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <vfprintf+0x332>
     d78:	98 2c       	mov	r9, r8
     d7a:	21 2c       	mov	r2, r1
     d7c:	a4 fe       	sbrs	r10, 4
     d7e:	10 c0       	rjmp	.+32     	; 0xda0 <vfprintf+0x356>
     d80:	b6 01       	movw	r22, r12
     d82:	80 e3       	ldi	r24, 0x30	; 48
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 1c 07 	call	0xe38	; 0xe38 <fputc>
     d8a:	a2 fe       	sbrs	r10, 2
     d8c:	17 c0       	rjmp	.+46     	; 0xdbc <vfprintf+0x372>
     d8e:	a1 fc       	sbrc	r10, 1
     d90:	03 c0       	rjmp	.+6      	; 0xd98 <vfprintf+0x34e>
     d92:	88 e7       	ldi	r24, 0x78	; 120
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x352>
     d98:	88 e5       	ldi	r24, 0x58	; 88
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	b6 01       	movw	r22, r12
     d9e:	0c c0       	rjmp	.+24     	; 0xdb8 <vfprintf+0x36e>
     da0:	8a 2d       	mov	r24, r10
     da2:	86 78       	andi	r24, 0x86	; 134
     da4:	59 f0       	breq	.+22     	; 0xdbc <vfprintf+0x372>
     da6:	a1 fe       	sbrs	r10, 1
     da8:	02 c0       	rjmp	.+4      	; 0xdae <vfprintf+0x364>
     daa:	8b e2       	ldi	r24, 0x2B	; 43
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <vfprintf+0x366>
     dae:	80 e2       	ldi	r24, 0x20	; 32
     db0:	a7 fc       	sbrc	r10, 7
     db2:	8d e2       	ldi	r24, 0x2D	; 45
     db4:	b6 01       	movw	r22, r12
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 1c 07 	call	0xe38	; 0xe38 <fputc>
     dbc:	89 14       	cp	r8, r9
     dbe:	38 f4       	brcc	.+14     	; 0xdce <vfprintf+0x384>
     dc0:	b6 01       	movw	r22, r12
     dc2:	80 e3       	ldi	r24, 0x30	; 48
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 1c 07 	call	0xe38	; 0xe38 <fputc>
     dca:	9a 94       	dec	r9
     dcc:	f7 cf       	rjmp	.-18     	; 0xdbc <vfprintf+0x372>
     dce:	8a 94       	dec	r8
     dd0:	f3 01       	movw	r30, r6
     dd2:	e8 0d       	add	r30, r8
     dd4:	f1 1d       	adc	r31, r1
     dd6:	80 81       	ld	r24, Z
     dd8:	b6 01       	movw	r22, r12
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 1c 07 	call	0xe38	; 0xe38 <fputc>
     de0:	81 10       	cpse	r8, r1
     de2:	f5 cf       	rjmp	.-22     	; 0xdce <vfprintf+0x384>
     de4:	22 20       	and	r2, r2
     de6:	09 f4       	brne	.+2      	; 0xdea <vfprintf+0x3a0>
     de8:	42 ce       	rjmp	.-892    	; 0xa6e <vfprintf+0x24>
     dea:	b6 01       	movw	r22, r12
     dec:	80 e2       	ldi	r24, 0x20	; 32
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 1c 07 	call	0xe38	; 0xe38 <fputc>
     df4:	2a 94       	dec	r2
     df6:	f6 cf       	rjmp	.-20     	; 0xde4 <vfprintf+0x39a>
     df8:	f6 01       	movw	r30, r12
     dfa:	86 81       	ldd	r24, Z+6	; 0x06
     dfc:	97 81       	ldd	r25, Z+7	; 0x07
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vfprintf+0x3ba>
     e00:	8f ef       	ldi	r24, 0xFF	; 255
     e02:	9f ef       	ldi	r25, 0xFF	; 255
     e04:	2b 96       	adiw	r28, 0x0b	; 11
     e06:	e2 e1       	ldi	r30, 0x12	; 18
     e08:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__epilogue_restores__>

00000e0c <strnlen_P>:
     e0c:	fc 01       	movw	r30, r24
     e0e:	05 90       	lpm	r0, Z+
     e10:	61 50       	subi	r22, 0x01	; 1
     e12:	70 40       	sbci	r23, 0x00	; 0
     e14:	01 10       	cpse	r0, r1
     e16:	d8 f7       	brcc	.-10     	; 0xe0e <strnlen_P+0x2>
     e18:	80 95       	com	r24
     e1a:	90 95       	com	r25
     e1c:	8e 0f       	add	r24, r30
     e1e:	9f 1f       	adc	r25, r31
     e20:	08 95       	ret

00000e22 <strnlen>:
     e22:	fc 01       	movw	r30, r24
     e24:	61 50       	subi	r22, 0x01	; 1
     e26:	70 40       	sbci	r23, 0x00	; 0
     e28:	01 90       	ld	r0, Z+
     e2a:	01 10       	cpse	r0, r1
     e2c:	d8 f7       	brcc	.-10     	; 0xe24 <strnlen+0x2>
     e2e:	80 95       	com	r24
     e30:	90 95       	com	r25
     e32:	8e 0f       	add	r24, r30
     e34:	9f 1f       	adc	r25, r31
     e36:	08 95       	ret

00000e38 <fputc>:
     e38:	0f 93       	push	r16
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	fb 01       	movw	r30, r22
     e42:	23 81       	ldd	r18, Z+3	; 0x03
     e44:	21 fd       	sbrc	r18, 1
     e46:	03 c0       	rjmp	.+6      	; 0xe4e <fputc+0x16>
     e48:	8f ef       	ldi	r24, 0xFF	; 255
     e4a:	9f ef       	ldi	r25, 0xFF	; 255
     e4c:	2c c0       	rjmp	.+88     	; 0xea6 <fputc+0x6e>
     e4e:	22 ff       	sbrs	r18, 2
     e50:	16 c0       	rjmp	.+44     	; 0xe7e <fputc+0x46>
     e52:	46 81       	ldd	r20, Z+6	; 0x06
     e54:	57 81       	ldd	r21, Z+7	; 0x07
     e56:	24 81       	ldd	r18, Z+4	; 0x04
     e58:	35 81       	ldd	r19, Z+5	; 0x05
     e5a:	42 17       	cp	r20, r18
     e5c:	53 07       	cpc	r21, r19
     e5e:	44 f4       	brge	.+16     	; 0xe70 <fputc+0x38>
     e60:	a0 81       	ld	r26, Z
     e62:	b1 81       	ldd	r27, Z+1	; 0x01
     e64:	9d 01       	movw	r18, r26
     e66:	2f 5f       	subi	r18, 0xFF	; 255
     e68:	3f 4f       	sbci	r19, 0xFF	; 255
     e6a:	31 83       	std	Z+1, r19	; 0x01
     e6c:	20 83       	st	Z, r18
     e6e:	8c 93       	st	X, r24
     e70:	26 81       	ldd	r18, Z+6	; 0x06
     e72:	37 81       	ldd	r19, Z+7	; 0x07
     e74:	2f 5f       	subi	r18, 0xFF	; 255
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	37 83       	std	Z+7, r19	; 0x07
     e7a:	26 83       	std	Z+6, r18	; 0x06
     e7c:	14 c0       	rjmp	.+40     	; 0xea6 <fputc+0x6e>
     e7e:	8b 01       	movw	r16, r22
     e80:	ec 01       	movw	r28, r24
     e82:	fb 01       	movw	r30, r22
     e84:	00 84       	ldd	r0, Z+8	; 0x08
     e86:	f1 85       	ldd	r31, Z+9	; 0x09
     e88:	e0 2d       	mov	r30, r0
     e8a:	09 95       	icall
     e8c:	89 2b       	or	r24, r25
     e8e:	e1 f6       	brne	.-72     	; 0xe48 <fputc+0x10>
     e90:	d8 01       	movw	r26, r16
     e92:	16 96       	adiw	r26, 0x06	; 6
     e94:	8d 91       	ld	r24, X+
     e96:	9c 91       	ld	r25, X
     e98:	17 97       	sbiw	r26, 0x07	; 7
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	17 96       	adiw	r26, 0x07	; 7
     e9e:	9c 93       	st	X, r25
     ea0:	8e 93       	st	-X, r24
     ea2:	16 97       	sbiw	r26, 0x06	; 6
     ea4:	ce 01       	movw	r24, r28
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	1f 91       	pop	r17
     eac:	0f 91       	pop	r16
     eae:	08 95       	ret

00000eb0 <__ultoa_invert>:
     eb0:	fa 01       	movw	r30, r20
     eb2:	aa 27       	eor	r26, r26
     eb4:	28 30       	cpi	r18, 0x08	; 8
     eb6:	51 f1       	breq	.+84     	; 0xf0c <__ultoa_invert+0x5c>
     eb8:	20 31       	cpi	r18, 0x10	; 16
     eba:	81 f1       	breq	.+96     	; 0xf1c <__ultoa_invert+0x6c>
     ebc:	e8 94       	clt
     ebe:	6f 93       	push	r22
     ec0:	6e 7f       	andi	r22, 0xFE	; 254
     ec2:	6e 5f       	subi	r22, 0xFE	; 254
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	8f 4f       	sbci	r24, 0xFF	; 255
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	af 4f       	sbci	r26, 0xFF	; 255
     ecc:	b1 e0       	ldi	r27, 0x01	; 1
     ece:	3e d0       	rcall	.+124    	; 0xf4c <__ultoa_invert+0x9c>
     ed0:	b4 e0       	ldi	r27, 0x04	; 4
     ed2:	3c d0       	rcall	.+120    	; 0xf4c <__ultoa_invert+0x9c>
     ed4:	67 0f       	add	r22, r23
     ed6:	78 1f       	adc	r23, r24
     ed8:	89 1f       	adc	r24, r25
     eda:	9a 1f       	adc	r25, r26
     edc:	a1 1d       	adc	r26, r1
     ede:	68 0f       	add	r22, r24
     ee0:	79 1f       	adc	r23, r25
     ee2:	8a 1f       	adc	r24, r26
     ee4:	91 1d       	adc	r25, r1
     ee6:	a1 1d       	adc	r26, r1
     ee8:	6a 0f       	add	r22, r26
     eea:	71 1d       	adc	r23, r1
     eec:	81 1d       	adc	r24, r1
     eee:	91 1d       	adc	r25, r1
     ef0:	a1 1d       	adc	r26, r1
     ef2:	20 d0       	rcall	.+64     	; 0xf34 <__ultoa_invert+0x84>
     ef4:	09 f4       	brne	.+2      	; 0xef8 <__ultoa_invert+0x48>
     ef6:	68 94       	set
     ef8:	3f 91       	pop	r19
     efa:	2a e0       	ldi	r18, 0x0A	; 10
     efc:	26 9f       	mul	r18, r22
     efe:	11 24       	eor	r1, r1
     f00:	30 19       	sub	r19, r0
     f02:	30 5d       	subi	r19, 0xD0	; 208
     f04:	31 93       	st	Z+, r19
     f06:	de f6       	brtc	.-74     	; 0xebe <__ultoa_invert+0xe>
     f08:	cf 01       	movw	r24, r30
     f0a:	08 95       	ret
     f0c:	46 2f       	mov	r20, r22
     f0e:	47 70       	andi	r20, 0x07	; 7
     f10:	40 5d       	subi	r20, 0xD0	; 208
     f12:	41 93       	st	Z+, r20
     f14:	b3 e0       	ldi	r27, 0x03	; 3
     f16:	0f d0       	rcall	.+30     	; 0xf36 <__ultoa_invert+0x86>
     f18:	c9 f7       	brne	.-14     	; 0xf0c <__ultoa_invert+0x5c>
     f1a:	f6 cf       	rjmp	.-20     	; 0xf08 <__ultoa_invert+0x58>
     f1c:	46 2f       	mov	r20, r22
     f1e:	4f 70       	andi	r20, 0x0F	; 15
     f20:	40 5d       	subi	r20, 0xD0	; 208
     f22:	4a 33       	cpi	r20, 0x3A	; 58
     f24:	18 f0       	brcs	.+6      	; 0xf2c <__ultoa_invert+0x7c>
     f26:	49 5d       	subi	r20, 0xD9	; 217
     f28:	31 fd       	sbrc	r19, 1
     f2a:	40 52       	subi	r20, 0x20	; 32
     f2c:	41 93       	st	Z+, r20
     f2e:	02 d0       	rcall	.+4      	; 0xf34 <__ultoa_invert+0x84>
     f30:	a9 f7       	brne	.-22     	; 0xf1c <__ultoa_invert+0x6c>
     f32:	ea cf       	rjmp	.-44     	; 0xf08 <__ultoa_invert+0x58>
     f34:	b4 e0       	ldi	r27, 0x04	; 4
     f36:	a6 95       	lsr	r26
     f38:	97 95       	ror	r25
     f3a:	87 95       	ror	r24
     f3c:	77 95       	ror	r23
     f3e:	67 95       	ror	r22
     f40:	ba 95       	dec	r27
     f42:	c9 f7       	brne	.-14     	; 0xf36 <__ultoa_invert+0x86>
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	61 05       	cpc	r22, r1
     f48:	71 05       	cpc	r23, r1
     f4a:	08 95       	ret
     f4c:	9b 01       	movw	r18, r22
     f4e:	ac 01       	movw	r20, r24
     f50:	0a 2e       	mov	r0, r26
     f52:	06 94       	lsr	r0
     f54:	57 95       	ror	r21
     f56:	47 95       	ror	r20
     f58:	37 95       	ror	r19
     f5a:	27 95       	ror	r18
     f5c:	ba 95       	dec	r27
     f5e:	c9 f7       	brne	.-14     	; 0xf52 <__ultoa_invert+0xa2>
     f60:	62 0f       	add	r22, r18
     f62:	73 1f       	adc	r23, r19
     f64:	84 1f       	adc	r24, r20
     f66:	95 1f       	adc	r25, r21
     f68:	a0 1d       	adc	r26, r0
     f6a:	08 95       	ret

00000f6c <eeprom_read_block>:
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22

00000f70 <eeprom_read_blraw>:
     f70:	fc 01       	movw	r30, r24
     f72:	f9 99       	sbic	0x1f, 1	; 31
     f74:	fe cf       	rjmp	.-4      	; 0xf72 <eeprom_read_blraw+0x2>
     f76:	06 c0       	rjmp	.+12     	; 0xf84 <eeprom_read_blraw+0x14>
     f78:	f2 bd       	out	0x22, r31	; 34
     f7a:	e1 bd       	out	0x21, r30	; 33
     f7c:	f8 9a       	sbi	0x1f, 0	; 31
     f7e:	31 96       	adiw	r30, 0x01	; 1
     f80:	00 b4       	in	r0, 0x20	; 32
     f82:	0d 92       	st	X+, r0
     f84:	41 50       	subi	r20, 0x01	; 1
     f86:	50 40       	sbci	r21, 0x00	; 0
     f88:	b8 f7       	brcc	.-18     	; 0xf78 <eeprom_read_blraw+0x8>
     f8a:	08 95       	ret

00000f8c <eeprom_update_block>:
     f8c:	dc 01       	movw	r26, r24
     f8e:	a4 0f       	add	r26, r20
     f90:	b5 1f       	adc	r27, r21
     f92:	41 50       	subi	r20, 0x01	; 1
     f94:	50 40       	sbci	r21, 0x00	; 0
     f96:	48 f0       	brcs	.+18     	; 0xfaa <eeprom_update_block+0x1e>
     f98:	cb 01       	movw	r24, r22
     f9a:	84 0f       	add	r24, r20
     f9c:	95 1f       	adc	r25, r21
     f9e:	2e 91       	ld	r18, -X
     fa0:	0e 94 d7 07 	call	0xfae	; 0xfae <eeprom_update_r18>
     fa4:	41 50       	subi	r20, 0x01	; 1
     fa6:	50 40       	sbci	r21, 0x00	; 0
     fa8:	d0 f7       	brcc	.-12     	; 0xf9e <eeprom_update_block+0x12>
     faa:	08 95       	ret

00000fac <eeprom_update_byte>:
     fac:	26 2f       	mov	r18, r22

00000fae <eeprom_update_r18>:
     fae:	f9 99       	sbic	0x1f, 1	; 31
     fb0:	fe cf       	rjmp	.-4      	; 0xfae <eeprom_update_r18>
     fb2:	92 bd       	out	0x22, r25	; 34
     fb4:	81 bd       	out	0x21, r24	; 33
     fb6:	f8 9a       	sbi	0x1f, 0	; 31
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	00 b4       	in	r0, 0x20	; 32
     fbc:	02 16       	cp	r0, r18
     fbe:	39 f0       	breq	.+14     	; 0xfce <eeprom_update_r18+0x20>
     fc0:	1f ba       	out	0x1f, r1	; 31
     fc2:	20 bd       	out	0x20, r18	; 32
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	fa 9a       	sbi	0x1f, 2	; 31
     fca:	f9 9a       	sbi	0x1f, 1	; 31
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	08 95       	ret

00000fd0 <__prologue_saves__>:
     fd0:	2f 92       	push	r2
     fd2:	3f 92       	push	r3
     fd4:	4f 92       	push	r4
     fd6:	5f 92       	push	r5
     fd8:	6f 92       	push	r6
     fda:	7f 92       	push	r7
     fdc:	8f 92       	push	r8
     fde:	9f 92       	push	r9
     fe0:	af 92       	push	r10
     fe2:	bf 92       	push	r11
     fe4:	cf 92       	push	r12
     fe6:	df 92       	push	r13
     fe8:	ef 92       	push	r14
     fea:	ff 92       	push	r15
     fec:	0f 93       	push	r16
     fee:	1f 93       	push	r17
     ff0:	cf 93       	push	r28
     ff2:	df 93       	push	r29
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
     ff8:	ca 1b       	sub	r28, r26
     ffa:	db 0b       	sbc	r29, r27
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	09 94       	ijmp

00001008 <__epilogue_restores__>:
    1008:	2a 88       	ldd	r2, Y+18	; 0x12
    100a:	39 88       	ldd	r3, Y+17	; 0x11
    100c:	48 88       	ldd	r4, Y+16	; 0x10
    100e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1010:	6e 84       	ldd	r6, Y+14	; 0x0e
    1012:	7d 84       	ldd	r7, Y+13	; 0x0d
    1014:	8c 84       	ldd	r8, Y+12	; 0x0c
    1016:	9b 84       	ldd	r9, Y+11	; 0x0b
    1018:	aa 84       	ldd	r10, Y+10	; 0x0a
    101a:	b9 84       	ldd	r11, Y+9	; 0x09
    101c:	c8 84       	ldd	r12, Y+8	; 0x08
    101e:	df 80       	ldd	r13, Y+7	; 0x07
    1020:	ee 80       	ldd	r14, Y+6	; 0x06
    1022:	fd 80       	ldd	r15, Y+5	; 0x05
    1024:	0c 81       	ldd	r16, Y+4	; 0x04
    1026:	1b 81       	ldd	r17, Y+3	; 0x03
    1028:	aa 81       	ldd	r26, Y+2	; 0x02
    102a:	b9 81       	ldd	r27, Y+1	; 0x01
    102c:	ce 0f       	add	r28, r30
    102e:	d1 1d       	adc	r29, r1
    1030:	0f b6       	in	r0, 0x3f	; 63
    1032:	f8 94       	cli
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	0f be       	out	0x3f, r0	; 63
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	ed 01       	movw	r28, r26
    103c:	08 95       	ret

0000103e <_exit>:
    103e:	f8 94       	cli

00001040 <__stop_program>:
    1040:	ff cf       	rjmp	.-2      	; 0x1040 <__stop_program>
