
Esclavo1P1D2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000d3c  00000dd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800144  00800144  00000e14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001965  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c6c  00000000  00000000  00002979  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe5  00000000  00000000  000035e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  000045cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b7  00000000  00000000  00004a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000130b  00000000  00000000  0000520f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000651a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 34       	cpi	r26, 0x48	; 72
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c8 00 	call	0x190	; 0x190 <main>
  9e:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Slave_Init>:

//*****************************************************************************
// Inicializa el módulo I2C en modo Esclavo
//*****************************************************************************
void I2C_Slave_Init(uint8_t address) {
    DDRC &= ~((1 << DDC4) | (1 << DDC5));  // Configura SDA y SCL como entradas
  a6:	97 b1       	in	r25, 0x07	; 7
  a8:	9f 7c       	andi	r25, 0xCF	; 207
  aa:	97 b9       	out	0x07, r25	; 7

    TWAR = address << 1;  // Asigna la dirección del esclavo (bit 0 es para lectura/escritura)
  ac:	88 0f       	add	r24, r24
  ae:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>

    // Habilita ACK automático, el módulo TWI y su interrupción
    TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWIE);
  b2:	85 e4       	ldi	r24, 0x45	; 69
  b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b8:	08 95       	ret

000000ba <__vector_24>:
}

//********************************************
// INTERRUPCIONES
//********************************************
ISR(TWI_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
    uint8_t estado = TWSR & 0xFC; // Obtener estado I2C
  ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ce:	8c 7f       	andi	r24, 0xFC	; 252

    switch(estado){
  d0:	80 38       	cpi	r24, 0x80	; 128
  d2:	99 f0       	breq	.+38     	; 0xfa <__vector_24+0x40>
  d4:	28 f4       	brcc	.+10     	; 0xe0 <__vector_24+0x26>
  d6:	80 36       	cpi	r24, 0x60	; 96
  d8:	51 f0       	breq	.+20     	; 0xee <__vector_24+0x34>
  da:	80 37       	cpi	r24, 0x70	; 112
  dc:	41 f0       	breq	.+16     	; 0xee <__vector_24+0x34>
  de:	3b c0       	rjmp	.+118    	; 0x156 <__vector_24+0x9c>
  e0:	88 3a       	cpi	r24, 0xA8	; 168
  e2:	71 f1       	breq	.+92     	; 0x140 <__vector_24+0x86>
  e4:	88 3b       	cpi	r24, 0xB8	; 184
  e6:	61 f1       	breq	.+88     	; 0x140 <__vector_24+0x86>
  e8:	80 39       	cpi	r24, 0x90	; 144
  ea:	a9 f5       	brne	.+106    	; 0x156 <__vector_24+0x9c>
  ec:	06 c0       	rjmp	.+12     	; 0xfa <__vector_24+0x40>
        case 0x60: case 0x70: // SLA+W recibido
            TWCR |= (1 << TWINT) | (1 << TWEA); // Preparar para recibir dato
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 6c       	ori	r24, 0xC0	; 192
  f6:	80 83       	st	Z, r24
            break;
  f8:	33 c0       	rjmp	.+102    	; 0x160 <__vector_24+0xa6>

        case 0x80: case 0x90: // Dato recibido
            if(TWDR == 'S') flag_servo = 1;
  fa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  fe:	83 35       	cpi	r24, 0x53	; 83
 100:	21 f4       	brne	.+8      	; 0x10a <__vector_24+0x50>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <flag_servo>
 108:	15 c0       	rjmp	.+42     	; 0x134 <__vector_24+0x7a>
            else if(TWDR == 's') flag_servo = 0;
 10a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 10e:	83 37       	cpi	r24, 0x73	; 115
 110:	19 f4       	brne	.+6      	; 0x118 <__vector_24+0x5e>
 112:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <flag_servo>
 116:	0e c0       	rjmp	.+28     	; 0x134 <__vector_24+0x7a>
            else if(TWDR == 'V') flag_ventilador = 1;
 118:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 11c:	86 35       	cpi	r24, 0x56	; 86
 11e:	21 f4       	brne	.+8      	; 0x128 <__vector_24+0x6e>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 126:	06 c0       	rjmp	.+12     	; 0x134 <__vector_24+0x7a>
            else if(TWDR == 'v') flag_ventilador = 0;
 128:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 12c:	86 37       	cpi	r24, 0x76	; 118
 12e:	11 f4       	brne	.+4      	; 0x134 <__vector_24+0x7a>
 130:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
            TWCR |= (1 << TWINT) | (1 << TWEA); // Preparar siguiente dato
 134:	ec eb       	ldi	r30, 0xBC	; 188
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 6c       	ori	r24, 0xC0	; 192
 13c:	80 83       	st	Z, r24
            break;
 13e:	10 c0       	rjmp	.+32     	; 0x160 <__vector_24+0xa6>

        case 0xA8: case 0xB8: // SLA+R recibido
            TWDR = send_user;  // Enviar estado al maestro
 140:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <send_user>
 144:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
            send_user = 3;     // Reset "sin novedad"
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <send_user>
            TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
 14e:	85 ec       	ldi	r24, 0xC5	; 197
 150:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
            break;
 154:	05 c0       	rjmp	.+10     	; 0x160 <__vector_24+0xa6>

        default:
            TWCR |= (1 << TWINT) | (1 << TWEA); // Manejo default
 156:	ec eb       	ldi	r30, 0xBC	; 188
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	80 6c       	ori	r24, 0xC0	; 192
 15e:	80 83       	st	Z, r24
            break;
    }
}
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	8f 91       	pop	r24
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <setup_pines>:

//********************************************
// FUNCIONES
//********************************************
void setup_pines(void){
    DDRD |= (1 << DDD4);  // PD4 como salida ventilador
 170:	8a b1       	in	r24, 0x0a	; 10
 172:	80 61       	ori	r24, 0x10	; 16
 174:	8a b9       	out	0x0a, r24	; 10
    PORTD &= ~(1 << PD4); // Apagar ventilador al inicio
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	8f 7e       	andi	r24, 0xEF	; 239
 17a:	8b b9       	out	0x0b, r24	; 11

    DDRD |= (1 << 3);     // PD3 como salida servo
 17c:	8a b1       	in	r24, 0x0a	; 10
 17e:	88 60       	ori	r24, 0x08	; 8
 180:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << PD2);  // PD2 como entrada (botón)
 182:	8a b1       	in	r24, 0x0a	; 10
 184:	8b 7f       	andi	r24, 0xFB	; 251
 186:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << PD2);  // Habilitar pull-up en botón
 188:	8b b1       	in	r24, 0x0b	; 11
 18a:	84 60       	ori	r24, 0x04	; 4
 18c:	8b b9       	out	0x0b, r24	; 11
 18e:	08 95       	ret

00000190 <main>:

//********************************************
// MAIN
//********************************************
int main(void)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	cd b7       	in	r28, 0x3d	; 61
 196:	de b7       	in	r29, 0x3e	; 62
 198:	60 97       	sbiw	r28, 0x10	; 16
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	f8 94       	cli
 19e:	de bf       	out	0x3e, r29	; 62
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	cd bf       	out	0x3d, r28	; 61
    setup_pines();       // Inicializa los pines
 1a4:	0e 94 b8 00 	call	0x170	; 0x170 <setup_pines>

    UART_Init();          // Inicializa UART
 1a8:	0e 94 1c 04 	call	0x838	; 0x838 <UART_Init>
    I2C_Slave_Init(SlaveAddress);  // Inicializa I2C como esclavo
 1ac:	80 e4       	ldi	r24, 0x40	; 64
 1ae:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Slave_Init>
    spi_init();           // Inicializa SPI
 1b2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <spi_init>
    mfrc522_init();       // Inicializa lector RFID
 1b6:	0e 94 de 01 	call	0x3bc	; 0x3bc <mfrc522_init>
    PWM_init_Timer0();    // Inicializa PWM para servo
 1ba:	0e 94 12 04 	call	0x824	; 0x824 <PWM_init_Timer0>
    servo_write_Timer0(180); // Mantener servo cerrado al inicio
 1be:	84 eb       	ldi	r24, 0xB4	; 180
 1c0:	0e 94 de 03 	call	0x7bc	; 0x7bc <servo_write_Timer0>
    sei();                // Habilitar interrupciones globales
 1c4:	78 94       	sei
    while(1)
    {
        // ===========================
        // Control servo según abrir_servo
        // ===========================
        if (abrir_servo){
 1c6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <abrir_servo>
 1ca:	88 23       	and	r24, r24
 1cc:	21 f0       	breq	.+8      	; 0x1d6 <main+0x46>
            servo_write_Timer0(0);   // Abrir
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	0e 94 de 03 	call	0x7bc	; 0x7bc <servo_write_Timer0>
 1d4:	03 c0       	rjmp	.+6      	; 0x1dc <main+0x4c>
        } else {
            servo_write_Timer0(180); // Cerrar
 1d6:	84 eb       	ldi	r24, 0xB4	; 180
 1d8:	0e 94 de 03 	call	0x7bc	; 0x7bc <servo_write_Timer0>
        }

        // ===========================
        // Comandos I2C para abrir/cerrar servo
        // ===========================
        if (buffer == 's'){
 1dc:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <buffer>
 1e0:	83 37       	cpi	r24, 0x73	; 115
 1e2:	29 f4       	brne	.+10     	; 0x1ee <main+0x5e>
            buffer = 0;
 1e4:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <buffer>
            abrir_servo = 0;   // Cerrar servo
 1e8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <abrir_servo>
 1ec:	07 c0       	rjmp	.+14     	; 0x1fc <main+0x6c>
        }
        else if (buffer == 'S'){
 1ee:	83 35       	cpi	r24, 0x53	; 83
 1f0:	29 f4       	brne	.+10     	; 0x1fc <main+0x6c>
            buffer = 0;
 1f2:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <buffer>
            abrir_servo = 1;   // Abrir servo
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <abrir_servo>
        }
		
        // ===========================
        // Control servo según flag_servo I2C
        // ===========================
        if(flag_servo) {
 1fc:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <flag_servo>
 200:	88 23       	and	r24, r24
 202:	21 f0       	breq	.+8      	; 0x20c <main+0x7c>
            servo_write_Timer0(0);   // Abrir
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 de 03 	call	0x7bc	; 0x7bc <servo_write_Timer0>
 20a:	03 c0       	rjmp	.+6      	; 0x212 <main+0x82>
        } else {
            servo_write_Timer0(180); // Cerrar
 20c:	84 eb       	ldi	r24, 0xB4	; 180
 20e:	0e 94 de 03 	call	0x7bc	; 0x7bc <servo_write_Timer0>
        }

        // ===========================
        // Control ventilador
        // ===========================
        if(flag_ventilador) {
 212:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 216:	88 23       	and	r24, r24
 218:	21 f0       	breq	.+8      	; 0x222 <main+0x92>
            PORTD |= (1 << PD4);    // Encender ventilador
 21a:	8b b1       	in	r24, 0x0b	; 11
 21c:	80 61       	ori	r24, 0x10	; 16
 21e:	8b b9       	out	0x0b, r24	; 11
 220:	03 c0       	rjmp	.+6      	; 0x228 <main+0x98>
        } else {
            PORTD &= ~(1 << PD4);   // Apagar ventilador
 222:	8b b1       	in	r24, 0x0b	; 11
 224:	8f 7e       	andi	r24, 0xEF	; 239
 226:	8b b9       	out	0x0b, r24	; 11
        }

        // ===========================
        // Lectura de tarjeta RFID
        // ===========================
        byte = mfrc522_request(PICC_REQALL, str); // Solicitar tarjeta
 228:	be 01       	movw	r22, r28
 22a:	6f 5f       	subi	r22, 0xFF	; 255
 22c:	7f 4f       	sbci	r23, 0xFF	; 255
 22e:	82 e5       	ldi	r24, 0x52	; 82
 230:	0e 94 03 03 	call	0x606	; 0x606 <mfrc522_request>
        if(byte == CARD_FOUND)
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	09 f0       	breq	.+2      	; 0x23a <main+0xaa>
 238:	6c c0       	rjmp	.+216    	; 0x312 <main+0x182>
        {
            byte = mfrc522_get_card_serial(str);  // Obtener UID
 23a:	ce 01       	movw	r24, r28
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	0e 94 38 03 	call	0x670	; 0x670 <mfrc522_get_card_serial>
            if(byte == CARD_FOUND)
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	09 f0       	breq	.+2      	; 0x248 <main+0xb8>
 246:	61 c0       	rjmp	.+194    	; 0x30a <main+0x17a>
            {
                all_match_Pablo = 1;
 248:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <all_match_Pablo>
                all_match_Pedro = 1;
 24c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>

                // Comparar UID recibido con usuarios autorizados
                for(byte = 0; byte <= 3; byte++)
 250:	d1 2c       	mov	r13, r1
 252:	21 c0       	rjmp	.+66     	; 0x296 <main+0x106>
                {
                    uint8_to_string(str[byte]);   // Enviar UID a UART
 254:	0d 2d       	mov	r16, r13
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	ee 24       	eor	r14, r14
 25a:	e3 94       	inc	r14
 25c:	f1 2c       	mov	r15, r1
 25e:	ec 0e       	add	r14, r28
 260:	fd 1e       	adc	r15, r29
 262:	e0 0e       	add	r14, r16
 264:	f1 1e       	adc	r15, r17
 266:	f7 01       	movw	r30, r14
 268:	80 81       	ld	r24, Z
 26a:	0e 94 40 04 	call	0x880	; 0x880 <uint8_to_string>
                    UART_Char('\n');
 26e:	8a e0       	ldi	r24, 0x0A	; 10
 270:	0e 94 28 04 	call	0x850	; 0x850 <UART_Char>

                    if(str[byte] != Pablo[byte]) { all_match_Pablo = 0;}
 274:	f7 01       	movw	r30, r14
 276:	80 81       	ld	r24, Z
 278:	f8 01       	movw	r30, r16
 27a:	ea 5f       	subi	r30, 0xFA	; 250
 27c:	fe 4f       	sbci	r31, 0xFE	; 254
 27e:	90 81       	ld	r25, Z
 280:	89 13       	cpse	r24, r25
 282:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <all_match_Pablo>
                    if(str[byte] != Pedro[byte]) { all_match_Pedro = 0;}
 286:	f8 01       	movw	r30, r16
 288:	ee 5f       	subi	r30, 0xFE	; 254
 28a:	fe 4f       	sbci	r31, 0xFE	; 254
 28c:	90 81       	ld	r25, Z
 28e:	89 13       	cpse	r24, r25
 290:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
            {
                all_match_Pablo = 1;
                all_match_Pedro = 1;

                // Comparar UID recibido con usuarios autorizados
                for(byte = 0; byte <= 3; byte++)
 294:	d3 94       	inc	r13
 296:	f3 e0       	ldi	r31, 0x03	; 3
 298:	fd 15       	cp	r31, r13
 29a:	e0 f6       	brcc	.-72     	; 0x254 <main+0xc4>
                }

                // ===========================
                // Decisión según coincidencia de UID
                // ===========================
                if(all_match_Pablo){
 29c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <all_match_Pablo>
 2a0:	88 23       	and	r24, r24
 2a2:	69 f0       	breq	.+26     	; 0x2be <main+0x12e>
                    send_user = 1;
 2a4:	11 e0       	ldi	r17, 0x01	; 1
 2a6:	10 93 0a 01 	sts	0x010A, r17	; 0x80010a <send_user>
                    UART_Write("Bienvenido Pablo");
 2aa:	8b e0       	ldi	r24, 0x0B	; 11
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 2f 04 	call	0x85e	; 0x85e <UART_Write>
                    abrir_servo = 1;          // Abrir servo
 2b2:	10 93 46 01 	sts	0x0146, r17	; 0x800146 <abrir_servo>
                    UART_Char('\n');
 2b6:	8a e0       	ldi	r24, 0x0A	; 10
 2b8:	0e 94 28 04 	call	0x850	; 0x850 <UART_Char>
 2bc:	22 c0       	rjmp	.+68     	; 0x302 <main+0x172>
                }
                else if(all_match_Pedro){
 2be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2c2:	88 23       	and	r24, r24
 2c4:	71 f0       	breq	.+28     	; 0x2e2 <main+0x152>
                    send_user = 2;
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <send_user>
                    UART_Write("Bienvenido Pedro");
 2cc:	8c e1       	ldi	r24, 0x1C	; 28
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	0e 94 2f 04 	call	0x85e	; 0x85e <UART_Write>
                    abrir_servo = 1;          // Abrir servo
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <abrir_servo>
                    UART_Char('\n');
 2da:	8a e0       	ldi	r24, 0x0A	; 10
 2dc:	0e 94 28 04 	call	0x850	; 0x850 <UART_Char>
 2e0:	10 c0       	rjmp	.+32     	; 0x302 <main+0x172>
                }
                else{
                    UART_Write("Acceso denegado");
 2e2:	8d e2       	ldi	r24, 0x2D	; 45
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 2f 04 	call	0x85e	; 0x85e <UART_Write>
                    send_user = 0;
 2ea:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <send_user>
                    abrir_servo = 0;          // Cerrar servo
 2ee:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <abrir_servo>
                    all_match_Pablo = 1;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <all_match_Pablo>
                    all_match_Pedro = 1;
 2f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
                    UART_Char('\n');
 2fc:	8a e0       	ldi	r24, 0x0A	; 10
 2fe:	0e 94 28 04 	call	0x850	; 0x850 <UART_Char>
                }
                UART_Char('\n');
 302:	8a e0       	ldi	r24, 0x0A	; 10
 304:	0e 94 28 04 	call	0x850	; 0x850 <UART_Char>
 308:	04 c0       	rjmp	.+8      	; 0x312 <main+0x182>
            }
            else {
                UART_Write("error"); // Error al leer UID
 30a:	8d e3       	ldi	r24, 0x3D	; 61
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	0e 94 2f 04 	call	0x85e	; 0x85e <UART_Write>
        }

        // ===========================
        // Botón manual PD2
        // ===========================
        if (!(PIND & (1 << PD2))){
 312:	4a 99       	sbic	0x09, 2	; 9
 314:	0e c0       	rjmp	.+28     	; 0x332 <main+0x1a2>
            abrir_servo = 0;          // Cerrar servo
 316:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <abrir_servo>
            send_user = 4;            // Notificar cierre manual
 31a:	84 e0       	ldi	r24, 0x04	; 4
 31c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <send_user>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	89 e6       	ldi	r24, 0x69	; 105
 324:	98 e1       	ldi	r25, 0x18	; 24
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x196>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x1a0>
 330:	00 00       	nop
        }

        // ===========================
        // Control ventilador vía I2C
        // ===========================
        if(buffer == 'V'){
 332:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <buffer>
 336:	86 35       	cpi	r24, 0x56	; 86
 338:	29 f4       	brne	.+10     	; 0x344 <main+0x1b4>
            PORTD |= (1 << PD4);      // Encender ventilador
 33a:	8b b1       	in	r24, 0x0b	; 11
 33c:	80 61       	ori	r24, 0x10	; 16
 33e:	8b b9       	out	0x0b, r24	; 11
            buffer = 0;
 340:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <buffer>
        }
        if(buffer == 'v'){
 344:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <buffer>
 348:	86 37       	cpi	r24, 0x76	; 118
 34a:	29 f4       	brne	.+10     	; 0x356 <main+0x1c6>
            PORTD &= ~(1 << PD4);     // Apagar ventilador
 34c:	8b b1       	in	r24, 0x0b	; 11
 34e:	8f 7e       	andi	r24, 0xEF	; 239
 350:	8b b9       	out	0x0b, r24	; 11
            buffer = 0;
 352:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <buffer>
 356:	ef ef       	ldi	r30, 0xFF	; 255
 358:	f0 e7       	ldi	r31, 0x70	; 112
 35a:	22 e0       	ldi	r18, 0x02	; 2
 35c:	e1 50       	subi	r30, 0x01	; 1
 35e:	f0 40       	sbci	r31, 0x00	; 0
 360:	20 40       	sbci	r18, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x1cc>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x1d6>
 366:	00 00       	nop
 368:	2e cf       	rjmp	.-420    	; 0x1c6 <main+0x36>

0000036a <mfrc522_write>:
		mfrc522_write(TxControlReg,byte|0x03);
	}
}

void mfrc522_write(uint8_t reg, uint8_t data)
{
 36a:	cf 93       	push	r28
 36c:	c6 2f       	mov	r28, r22
	ENABLE_CHIP();
 36e:	95 b1       	in	r25, 0x05	; 5
 370:	9b 7f       	andi	r25, 0xFB	; 251
 372:	95 b9       	out	0x05, r25	; 5
	spi_transmit((reg<<1)&0x7E);
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	8e 77       	andi	r24, 0x7E	; 126
 37c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <spi_transmit>
	spi_transmit(data);
 380:	8c 2f       	mov	r24, r28
 382:	0e 94 79 03 	call	0x6f2	; 0x6f2 <spi_transmit>
	DISABLE_CHIP();
 386:	85 b1       	in	r24, 0x05	; 5
 388:	84 60       	ori	r24, 0x04	; 4
 38a:	85 b9       	out	0x05, r24	; 5
}
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <mfrc522_read>:

uint8_t mfrc522_read(uint8_t reg)
{
	uint8_t data;
	ENABLE_CHIP();
 390:	95 b1       	in	r25, 0x05	; 5
 392:	9b 7f       	andi	r25, 0xFB	; 251
 394:	95 b9       	out	0x05, r25	; 5
	spi_transmit(((reg<<1)&0x7E)|0x80);
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	8e 77       	andi	r24, 0x7E	; 126
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <spi_transmit>
	data = spi_transmit(0x00);
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <spi_transmit>
	DISABLE_CHIP();
 3aa:	95 b1       	in	r25, 0x05	; 5
 3ac:	94 60       	ori	r25, 0x04	; 4
 3ae:	95 b9       	out	0x05, r25	; 5
	return data;
}
 3b0:	08 95       	ret

000003b2 <mfrc522_reset>:

void mfrc522_reset()
{
	mfrc522_write(CommandReg,SoftReset_CMD);
 3b2:	6f e0       	ldi	r22, 0x0F	; 15
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
 3ba:	08 95       	ret

000003bc <mfrc522_init>:
#include "spi.h"

void mfrc522_init()
{
	uint8_t byte;
	mfrc522_reset();
 3bc:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <mfrc522_reset>
	
	mfrc522_write(TModeReg, 0x8D);
 3c0:	6d e8       	ldi	r22, 0x8D	; 141
 3c2:	8a e2       	ldi	r24, 0x2A	; 42
 3c4:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	mfrc522_write(TPrescalerReg, 0x3E);
 3c8:	6e e3       	ldi	r22, 0x3E	; 62
 3ca:	8b e2       	ldi	r24, 0x2B	; 43
 3cc:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	mfrc522_write(TReloadReg_1, 30);
 3d0:	6e e1       	ldi	r22, 0x1E	; 30
 3d2:	8c e2       	ldi	r24, 0x2C	; 44
 3d4:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	mfrc522_write(TReloadReg_2, 0);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	8d e2       	ldi	r24, 0x2D	; 45
 3dc:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);
 3e0:	60 e4       	ldi	r22, 0x40	; 64
 3e2:	85 e1       	ldi	r24, 0x15	; 21
 3e4:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
 3e8:	6d e3       	ldi	r22, 0x3D	; 61
 3ea:	81 e1       	ldi	r24, 0x11	; 17
 3ec:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	
	byte = mfrc522_read(TxControlReg);
 3f0:	84 e1       	ldi	r24, 0x14	; 20
 3f2:	0e 94 c8 01 	call	0x390	; 0x390 <mfrc522_read>
	if(!(byte&0x03))
 3f6:	98 2f       	mov	r25, r24
 3f8:	93 70       	andi	r25, 0x03	; 3
 3fa:	29 f4       	brne	.+10     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
	{
		mfrc522_write(TxControlReg,byte|0x03);
 3fc:	68 2f       	mov	r22, r24
 3fe:	63 60       	ori	r22, 0x03	; 3
 400:	84 e1       	ldi	r24, 0x14	; 20
 402:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
 406:	08 95       	ret

00000408 <mfrc522_to_card>:
	
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
 408:	4f 92       	push	r4
 40a:	5f 92       	push	r5
 40c:	6f 92       	push	r6
 40e:	7f 92       	push	r7
 410:	8f 92       	push	r8
 412:	9f 92       	push	r9
 414:	af 92       	push	r10
 416:	bf 92       	push	r11
 418:	cf 92       	push	r12
 41a:	df 92       	push	r13
 41c:	ef 92       	push	r14
 41e:	ff 92       	push	r15
 420:	0f 93       	push	r16
 422:	1f 93       	push	r17
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	d8 2f       	mov	r29, r24
 42a:	7b 01       	movw	r14, r22
 42c:	c4 2f       	mov	r28, r20
 42e:	59 01       	movw	r10, r18
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

	switch (cmd)
 430:	8c 30       	cpi	r24, 0x0C	; 12
 432:	29 f0       	breq	.+10     	; 0x43e <mfrc522_to_card+0x36>
 434:	8e 30       	cpi	r24, 0x0E	; 14
 436:	61 f0       	breq	.+24     	; 0x450 <mfrc522_to_card+0x48>

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
 438:	91 2c       	mov	r9, r1
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
 43a:	81 2c       	mov	r8, r1
 43c:	10 c0       	rjmp	.+32     	; 0x45e <mfrc522_to_card+0x56>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
 43e:	0f 2e       	mov	r0, r31
 440:	f0 e3       	ldi	r31, 0x30	; 48
 442:	9f 2e       	mov	r9, r31
 444:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
 446:	0f 2e       	mov	r0, r31
 448:	f7 e7       	ldi	r31, 0x77	; 119
 44a:	8f 2e       	mov	r8, r31
 44c:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
 44e:	07 c0       	rjmp	.+14     	; 0x45e <mfrc522_to_card+0x56>
	switch (cmd)
	{
		case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
 450:	68 94       	set
 452:	99 24       	eor	r9, r9
 454:	94 f8       	bld	r9, 4

	switch (cmd)
	{
		case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
 456:	0f 2e       	mov	r0, r31
 458:	f2 e1       	ldi	r31, 0x12	; 18
 45a:	8f 2e       	mov	r8, r31
 45c:	f0 2d       	mov	r31, r0
		default:
		break;
	}
	
	//mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
	n=mfrc522_read(ComIrqReg);
 45e:	84 e0       	ldi	r24, 0x04	; 4
 460:	0e 94 c8 01 	call	0x390	; 0x390 <mfrc522_read>
	mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
 464:	68 2f       	mov	r22, r24
 466:	6f 77       	andi	r22, 0x7F	; 127
 468:	84 e0       	ldi	r24, 0x04	; 4
 46a:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	n=mfrc522_read(FIFOLevelReg);
 46e:	8a e0       	ldi	r24, 0x0A	; 10
 470:	0e 94 c8 01 	call	0x390	; 0x390 <mfrc522_read>
	mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
 474:	68 2f       	mov	r22, r24
 476:	60 68       	ori	r22, 0x80	; 128
 478:	8a e0       	ldi	r24, 0x0A	; 10
 47a:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
 47e:	60 e0       	ldi	r22, 0x00	; 0
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
 486:	41 2c       	mov	r4, r1
 488:	51 2c       	mov	r5, r1
 48a:	32 01       	movw	r6, r4
 48c:	0c c0       	rjmp	.+24     	; 0x4a6 <mfrc522_to_card+0x9e>
	{
		mfrc522_write(FIFODataReg, send_data[i]);
 48e:	f7 01       	movw	r30, r14
 490:	e4 0d       	add	r30, r4
 492:	f5 1d       	adc	r31, r5
 494:	60 81       	ld	r22, Z
 496:	89 e0       	ldi	r24, 0x09	; 9
 498:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
	
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
 49c:	8f ef       	ldi	r24, 0xFF	; 255
 49e:	48 1a       	sub	r4, r24
 4a0:	58 0a       	sbc	r5, r24
 4a2:	68 0a       	sbc	r6, r24
 4a4:	78 0a       	sbc	r7, r24
 4a6:	8c 2f       	mov	r24, r28
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	a0 e0       	ldi	r26, 0x00	; 0
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	48 16       	cp	r4, r24
 4b0:	59 06       	cpc	r5, r25
 4b2:	6a 06       	cpc	r6, r26
 4b4:	7b 06       	cpc	r7, r27
 4b6:	58 f3       	brcs	.-42     	; 0x48e <mfrc522_to_card+0x86>
	{
		mfrc522_write(FIFODataReg, send_data[i]);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
 4b8:	6d 2f       	mov	r22, r29
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	if (cmd == Transceive_CMD)
 4c0:	dc 30       	cpi	r29, 0x0C	; 12
 4c2:	41 f4       	brne	.+16     	; 0x4d4 <mfrc522_to_card+0xcc>
	{
		n=mfrc522_read(BitFramingReg);
 4c4:	8d e0       	ldi	r24, 0x0D	; 13
 4c6:	0e 94 c8 01 	call	0x390	; 0x390 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);
 4ca:	68 2f       	mov	r22, r24
 4cc:	60 68       	ori	r22, 0x80	; 128
 4ce:	8d e0       	ldi	r24, 0x0D	; 13
 4d0:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
	
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
 4d4:	0f 2e       	mov	r0, r31
 4d6:	f0 ed       	ldi	r31, 0xD0	; 208
 4d8:	cf 2e       	mov	r12, r31
 4da:	f7 e0       	ldi	r31, 0x07	; 7
 4dc:	df 2e       	mov	r13, r31
 4de:	e1 2c       	mov	r14, r1
 4e0:	f1 2c       	mov	r15, r1
 4e2:	f0 2d       	mov	r31, r0
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg);
 4e4:	84 e0       	ldi	r24, 0x04	; 4
 4e6:	0e 94 c8 01 	call	0x390	; 0x390 <mfrc522_read>
 4ea:	c8 2f       	mov	r28, r24
		i--;
 4ec:	e1 e0       	ldi	r30, 0x01	; 1
 4ee:	ce 1a       	sub	r12, r30
 4f0:	d1 08       	sbc	r13, r1
 4f2:	e1 08       	sbc	r14, r1
 4f4:	f1 08       	sbc	r15, r1
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 4f6:	29 f0       	breq	.+10     	; 0x502 <mfrc522_to_card+0xfa>
 4f8:	80 fd       	sbrc	r24, 0
 4fa:	03 c0       	rjmp	.+6      	; 0x502 <mfrc522_to_card+0xfa>
 4fc:	89 2d       	mov	r24, r9
 4fe:	8c 23       	and	r24, r28
 500:	89 f3       	breq	.-30     	; 0x4e4 <mfrc522_to_card+0xdc>

	tmp=mfrc522_read(BitFramingReg);
 502:	8d e0       	ldi	r24, 0x0D	; 13
 504:	0e 94 c8 01 	call	0x390	; 0x390 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
 508:	68 2f       	mov	r22, r24
 50a:	6f 77       	andi	r22, 0x7F	; 127
 50c:	8d e0       	ldi	r24, 0x0D	; 13
 50e:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	
	if (i != 0)
 512:	cd 28       	or	r12, r13
 514:	ce 28       	or	r12, r14
 516:	cf 28       	or	r12, r15
 518:	09 f4       	brne	.+2      	; 0x51c <mfrc522_to_card+0x114>
 51a:	60 c0       	rjmp	.+192    	; 0x5dc <mfrc522_to_card+0x1d4>
	{
		if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 51c:	86 e0       	ldi	r24, 0x06	; 6
 51e:	0e 94 c8 01 	call	0x390	; 0x390 <mfrc522_read>
 522:	8b 71       	andi	r24, 0x1B	; 27
 524:	09 f0       	breq	.+2      	; 0x528 <mfrc522_to_card+0x120>
 526:	5c c0       	rjmp	.+184    	; 0x5e0 <mfrc522_to_card+0x1d8>
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
 528:	c8 21       	and	r28, r8
 52a:	c0 fd       	sbrc	r28, 0
 52c:	02 c0       	rjmp	.+4      	; 0x532 <mfrc522_to_card+0x12a>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
 52e:	c1 e0       	ldi	r28, 0x01	; 1
 530:	01 c0       	rjmp	.+2      	; 0x534 <mfrc522_to_card+0x12c>
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
 532:	c2 e0       	ldi	r28, 0x02	; 2
			}

			if (cmd == Transceive_CMD)
 534:	dc 30       	cpi	r29, 0x0C	; 12
 536:	09 f0       	breq	.+2      	; 0x53a <mfrc522_to_card+0x132>
 538:	54 c0       	rjmp	.+168    	; 0x5e2 <mfrc522_to_card+0x1da>
			{
				n = mfrc522_read(FIFOLevelReg);
 53a:	8a e0       	ldi	r24, 0x0A	; 10
 53c:	0e 94 c8 01 	call	0x390	; 0x390 <mfrc522_read>
 540:	d8 2f       	mov	r29, r24
				lastBits = mfrc522_read(ControlReg) & 0x07;
 542:	8c e0       	ldi	r24, 0x0C	; 12
 544:	0e 94 c8 01 	call	0x390	; 0x390 <mfrc522_read>
 548:	28 2f       	mov	r18, r24
 54a:	27 70       	andi	r18, 0x07	; 7
				if (lastBits)
 54c:	a9 f0       	breq	.+42     	; 0x578 <mfrc522_to_card+0x170>
				{
					*back_data_len = (n-1)*8 + lastBits;
 54e:	8d 2f       	mov	r24, r29
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	82 0f       	add	r24, r18
 562:	91 1d       	adc	r25, r1
 564:	09 2e       	mov	r0, r25
 566:	00 0c       	add	r0, r0
 568:	aa 0b       	sbc	r26, r26
 56a:	bb 0b       	sbc	r27, r27
 56c:	f8 01       	movw	r30, r16
 56e:	80 83       	st	Z, r24
 570:	91 83       	std	Z+1, r25	; 0x01
 572:	a2 83       	std	Z+2, r26	; 0x02
 574:	b3 83       	std	Z+3, r27	; 0x03
 576:	11 c0       	rjmp	.+34     	; 0x59a <mfrc522_to_card+0x192>
				}
				else
				{
					*back_data_len = n*8;
 578:	8d 2f       	mov	r24, r29
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	88 0f       	add	r24, r24
 586:	99 1f       	adc	r25, r25
 588:	09 2e       	mov	r0, r25
 58a:	00 0c       	add	r0, r0
 58c:	aa 0b       	sbc	r26, r26
 58e:	bb 0b       	sbc	r27, r27
 590:	f8 01       	movw	r30, r16
 592:	80 83       	st	Z, r24
 594:	91 83       	std	Z+1, r25	; 0x01
 596:	a2 83       	std	Z+2, r26	; 0x02
 598:	b3 83       	std	Z+3, r27	; 0x03
				}

				if (n == 0)
 59a:	d1 11       	cpse	r29, r1
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <mfrc522_to_card+0x198>
				{
					n = 1;
 59e:	d1 e0       	ldi	r29, 0x01	; 1
				}
				if (n > MAX_LEN)
 5a0:	d1 31       	cpi	r29, 0x11	; 17
 5a2:	08 f0       	brcs	.+2      	; 0x5a6 <mfrc522_to_card+0x19e>
				{
					n = MAX_LEN;
 5a4:	d0 e1       	ldi	r29, 0x10	; 16
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
 5a6:	c1 2c       	mov	r12, r1
 5a8:	d1 2c       	mov	r13, r1
 5aa:	76 01       	movw	r14, r12
 5ac:	0d c0       	rjmp	.+26     	; 0x5c8 <mfrc522_to_card+0x1c0>
				{
					back_data[i] = mfrc522_read(FIFODataReg);
 5ae:	85 01       	movw	r16, r10
 5b0:	0c 0d       	add	r16, r12
 5b2:	1d 1d       	adc	r17, r13
 5b4:	89 e0       	ldi	r24, 0x09	; 9
 5b6:	0e 94 c8 01 	call	0x390	; 0x390 <mfrc522_read>
 5ba:	f8 01       	movw	r30, r16
 5bc:	80 83       	st	Z, r24
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
 5be:	ff ef       	ldi	r31, 0xFF	; 255
 5c0:	cf 1a       	sub	r12, r31
 5c2:	df 0a       	sbc	r13, r31
 5c4:	ef 0a       	sbc	r14, r31
 5c6:	ff 0a       	sbc	r15, r31
 5c8:	8d 2f       	mov	r24, r29
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	a0 e0       	ldi	r26, 0x00	; 0
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	c8 16       	cp	r12, r24
 5d2:	d9 06       	cpc	r13, r25
 5d4:	ea 06       	cpc	r14, r26
 5d6:	fb 06       	cpc	r15, r27
 5d8:	50 f3       	brcs	.-44     	; 0x5ae <mfrc522_to_card+0x1a6>
 5da:	03 c0       	rjmp	.+6      	; 0x5e2 <mfrc522_to_card+0x1da>
	return status;
}

uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
 5dc:	c3 e0       	ldi	r28, 0x03	; 3
 5de:	01 c0       	rjmp	.+2      	; 0x5e2 <mfrc522_to_card+0x1da>
				}
			}
		}
		else
		{
			status = ERROR;
 5e0:	c3 e0       	ldi	r28, 0x03	; 3
	
	//SetBitMask(ControlReg,0x80);           //timer stops
	//mfrc522_write(cmdReg, PCD_IDLE);

	return status;
}
 5e2:	8c 2f       	mov	r24, r28
 5e4:	df 91       	pop	r29
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	ff 90       	pop	r15
 5ee:	ef 90       	pop	r14
 5f0:	df 90       	pop	r13
 5f2:	cf 90       	pop	r12
 5f4:	bf 90       	pop	r11
 5f6:	af 90       	pop	r10
 5f8:	9f 90       	pop	r9
 5fa:	8f 90       	pop	r8
 5fc:	7f 90       	pop	r7
 5fe:	6f 90       	pop	r6
 600:	5f 90       	pop	r5
 602:	4f 90       	pop	r4
 604:	08 95       	ret

00000606 <mfrc522_request>:
{
	mfrc522_write(CommandReg,SoftReset_CMD);
}

uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
 606:	ef 92       	push	r14
 608:	ff 92       	push	r15
 60a:	0f 93       	push	r16
 60c:	1f 93       	push	r17
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	00 d0       	rcall	.+0      	; 0x614 <mfrc522_request+0xe>
 614:	00 d0       	rcall	.+0      	; 0x616 <mfrc522_request+0x10>
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
 61a:	18 2f       	mov	r17, r24
 61c:	7b 01       	movw	r14, r22
	uint8_t  status;
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 61e:	67 e0       	ldi	r22, 0x07	; 7
 620:	8d e0       	ldi	r24, 0x0D	; 13
 622:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	
	tag_type[0] = req_mode;
 626:	f7 01       	movw	r30, r14
 628:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
 62a:	8e 01       	movw	r16, r28
 62c:	0f 5f       	subi	r16, 0xFF	; 255
 62e:	1f 4f       	sbci	r17, 0xFF	; 255
 630:	97 01       	movw	r18, r14
 632:	41 e0       	ldi	r20, 0x01	; 1
 634:	b7 01       	movw	r22, r14
 636:	8c e0       	ldi	r24, 0x0C	; 12
 638:	0e 94 04 02 	call	0x408	; 0x408 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
 63c:	81 30       	cpi	r24, 0x01	; 1
 63e:	51 f4       	brne	.+20     	; 0x654 <mfrc522_request+0x4e>
 640:	49 81       	ldd	r20, Y+1	; 0x01
 642:	5a 81       	ldd	r21, Y+2	; 0x02
 644:	6b 81       	ldd	r22, Y+3	; 0x03
 646:	7c 81       	ldd	r23, Y+4	; 0x04
 648:	40 31       	cpi	r20, 0x10	; 16
 64a:	51 05       	cpc	r21, r1
 64c:	61 05       	cpc	r22, r1
 64e:	71 05       	cpc	r23, r1
 650:	19 f4       	brne	.+6      	; 0x658 <mfrc522_request+0x52>
 652:	03 c0       	rjmp	.+6      	; 0x65a <mfrc522_request+0x54>
	{
		status = ERROR;
 654:	83 e0       	ldi	r24, 0x03	; 3
 656:	01 c0       	rjmp	.+2      	; 0x65a <mfrc522_request+0x54>
 658:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return status;
}
 65a:	0f 90       	pop	r0
 65c:	0f 90       	pop	r0
 65e:	0f 90       	pop	r0
 660:	0f 90       	pop	r0
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	1f 91       	pop	r17
 668:	0f 91       	pop	r16
 66a:	ff 90       	pop	r15
 66c:	ef 90       	pop	r14
 66e:	08 95       	ret

00000670 <mfrc522_get_card_serial>:
	return status;
}


uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
 670:	ef 92       	push	r14
 672:	ff 92       	push	r15
 674:	0f 93       	push	r16
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	00 d0       	rcall	.+0      	; 0x67e <mfrc522_get_card_serial+0xe>
 67e:	00 d0       	rcall	.+0      	; 0x680 <mfrc522_get_card_serial+0x10>
 680:	cd b7       	in	r28, 0x3d	; 61
 682:	de b7       	in	r29, 0x3e	; 62
 684:	7c 01       	movw	r14, r24
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	8d e0       	ldi	r24, 0x0D	; 13
 68a:	0e 94 b5 01 	call	0x36a	; 0x36a <mfrc522_write>
	
	serial_out[0] = PICC_ANTICOLL;
 68e:	83 e9       	ldi	r24, 0x93	; 147
 690:	f7 01       	movw	r30, r14
 692:	80 83       	st	Z, r24
	serial_out[1] = 0x20;
 694:	80 e2       	ldi	r24, 0x20	; 32
 696:	81 83       	std	Z+1, r24	; 0x01
	status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
 698:	8e 01       	movw	r16, r28
 69a:	0f 5f       	subi	r16, 0xFF	; 255
 69c:	1f 4f       	sbci	r17, 0xFF	; 255
 69e:	97 01       	movw	r18, r14
 6a0:	42 e0       	ldi	r20, 0x02	; 2
 6a2:	b7 01       	movw	r22, r14
 6a4:	8c e0       	ldi	r24, 0x0C	; 12
 6a6:	0e 94 04 02 	call	0x408	; 0x408 <mfrc522_to_card>

	if (status == CARD_FOUND)
 6aa:	81 30       	cpi	r24, 0x01	; 1
 6ac:	91 f4       	brne	.+36     	; 0x6d2 <mfrc522_get_card_serial+0x62>
 6ae:	07 c0       	rjmp	.+14     	; 0x6be <mfrc522_get_card_serial+0x4e>
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
 6b0:	f7 01       	movw	r30, r14
 6b2:	e9 0f       	add	r30, r25
 6b4:	f1 1d       	adc	r31, r1
 6b6:	30 81       	ld	r19, Z
 6b8:	23 27       	eor	r18, r19
	status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

	if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
 6ba:	9f 5f       	subi	r25, 0xFF	; 255
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <mfrc522_get_card_serial+0x52>
 6be:	20 e0       	ldi	r18, 0x00	; 0
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	94 30       	cpi	r25, 0x04	; 4
 6c4:	a8 f3       	brcs	.-22     	; 0x6b0 <mfrc522_get_card_serial+0x40>
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
 6c6:	f7 01       	movw	r30, r14
 6c8:	e9 0f       	add	r30, r25
 6ca:	f1 1d       	adc	r31, r1
 6cc:	90 81       	ld	r25, Z
 6ce:	29 13       	cpse	r18, r25
		{
			status = ERROR;
 6d0:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return status;
}
 6d2:	0f 90       	pop	r0
 6d4:	0f 90       	pop	r0
 6d6:	0f 90       	pop	r0
 6d8:	0f 90       	pop	r0
 6da:	df 91       	pop	r29
 6dc:	cf 91       	pop	r28
 6de:	1f 91       	pop	r17
 6e0:	0f 91       	pop	r16
 6e2:	ff 90       	pop	r15
 6e4:	ef 90       	pop	r14
 6e6:	08 95       	ret

000006e8 <spi_init>:
#include "spi.h"

#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR = (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS);
 6e8:	8c e2       	ldi	r24, 0x2C	; 44
 6ea:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
 6ec:	81 e5       	ldi	r24, 0x51	; 81
 6ee:	8c bd       	out	0x2c, r24	; 44
 6f0:	08 95       	ret

000006f2 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
 6f2:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
 6f4:	0d b4       	in	r0, 0x2d	; 45
 6f6:	07 fe       	sbrs	r0, 7
 6f8:	fd cf       	rjmp	.-6      	; 0x6f4 <spi_transmit+0x2>
	
	return SPDR;
 6fa:	8e b5       	in	r24, 0x2e	; 46
}
 6fc:	08 95       	ret

000006fe <map>:
	TCCR1B = (1 << WGM13) | (1 << WGM12); // Fast PWM TOP ICR1
	TCCR1B |= (0 << CS12) | (1 << CS11) | ( 0 << CS10 ); // Prescaler 8
}
void servo_writeA(float servo180a){
	OCR1A = map(servo180a, 0, 180, 1000, 4800);
}
 6fe:	4f 92       	push	r4
 700:	5f 92       	push	r5
 702:	6f 92       	push	r6
 704:	7f 92       	push	r7
 706:	af 92       	push	r10
 708:	bf 92       	push	r11
 70a:	cf 92       	push	r12
 70c:	df 92       	push	r13
 70e:	ef 92       	push	r14
 710:	ff 92       	push	r15
 712:	0f 93       	push	r16
 714:	1f 93       	push	r17
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
 71e:	28 97       	sbiw	r28, 0x08	; 8
 720:	0f b6       	in	r0, 0x3f	; 63
 722:	f8 94       	cli
 724:	de bf       	out	0x3e, r29	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	cd bf       	out	0x3d, r28	; 61
 72a:	29 01       	movw	r4, r18
 72c:	3a 01       	movw	r6, r20
 72e:	ed 82       	std	Y+5, r14	; 0x05
 730:	fe 82       	std	Y+6, r15	; 0x06
 732:	0f 83       	std	Y+7, r16	; 0x07
 734:	18 87       	std	Y+8, r17	; 0x08
 736:	0e 94 93 04 	call	0x926	; 0x926 <__subsf3>
 73a:	69 83       	std	Y+1, r22	; 0x01
 73c:	7a 83       	std	Y+2, r23	; 0x02
 73e:	8b 83       	std	Y+3, r24	; 0x03
 740:	9c 83       	std	Y+4, r25	; 0x04
 742:	a6 01       	movw	r20, r12
 744:	95 01       	movw	r18, r10
 746:	69 8d       	ldd	r22, Y+25	; 0x19
 748:	7a 8d       	ldd	r23, Y+26	; 0x1a
 74a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 74c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 74e:	0e 94 93 04 	call	0x926	; 0x926 <__subsf3>
 752:	9b 01       	movw	r18, r22
 754:	ac 01       	movw	r20, r24
 756:	69 81       	ldd	r22, Y+1	; 0x01
 758:	7a 81       	ldd	r23, Y+2	; 0x02
 75a:	8b 81       	ldd	r24, Y+3	; 0x03
 75c:	9c 81       	ldd	r25, Y+4	; 0x04
 75e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__mulsf3>
 762:	69 83       	std	Y+1, r22	; 0x01
 764:	7a 83       	std	Y+2, r23	; 0x02
 766:	8b 83       	std	Y+3, r24	; 0x03
 768:	9c 83       	std	Y+4, r25	; 0x04
 76a:	a3 01       	movw	r20, r6
 76c:	92 01       	movw	r18, r4
 76e:	c8 01       	movw	r24, r16
 770:	b7 01       	movw	r22, r14
 772:	0e 94 93 04 	call	0x926	; 0x926 <__subsf3>
 776:	9b 01       	movw	r18, r22
 778:	ac 01       	movw	r20, r24
 77a:	69 81       	ldd	r22, Y+1	; 0x01
 77c:	7a 81       	ldd	r23, Y+2	; 0x02
 77e:	8b 81       	ldd	r24, Y+3	; 0x03
 780:	9c 81       	ldd	r25, Y+4	; 0x04
 782:	0e 94 00 05 	call	0xa00	; 0xa00 <__divsf3>
 786:	9b 01       	movw	r18, r22
 788:	ac 01       	movw	r20, r24
 78a:	c6 01       	movw	r24, r12
 78c:	b5 01       	movw	r22, r10
 78e:	0e 94 94 04 	call	0x928	; 0x928 <__addsf3>
 792:	28 96       	adiw	r28, 0x08	; 8
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	f8 94       	cli
 798:	de bf       	out	0x3e, r29	; 62
 79a:	0f be       	out	0x3f, r0	; 63
 79c:	cd bf       	out	0x3d, r28	; 61
 79e:	df 91       	pop	r29
 7a0:	cf 91       	pop	r28
 7a2:	1f 91       	pop	r17
 7a4:	0f 91       	pop	r16
 7a6:	ff 90       	pop	r15
 7a8:	ef 90       	pop	r14
 7aa:	df 90       	pop	r13
 7ac:	cf 90       	pop	r12
 7ae:	bf 90       	pop	r11
 7b0:	af 90       	pop	r10
 7b2:	7f 90       	pop	r7
 7b4:	6f 90       	pop	r6
 7b6:	5f 90       	pop	r5
 7b8:	4f 90       	pop	r4
 7ba:	08 95       	ret

000007bc <servo_write_Timer0>:

float map(float x, float in_min, float in_max, float out_min, float out_max){
	return ((x - in_min)*(out_max - out_min)/(in_max - in_min)) + out_min;
}

void servo_write_Timer0(uint8_t angle) {
 7bc:	af 92       	push	r10
 7be:	bf 92       	push	r11
 7c0:	cf 92       	push	r12
 7c2:	df 92       	push	r13
 7c4:	ef 92       	push	r14
 7c6:	ff 92       	push	r15
 7c8:	0f 93       	push	r16
 7ca:	1f 93       	push	r17
	OCR0B = map(angle, 0, 180, 8, 38);  // Pulso entre 0.5ms (8) y 2.5ms (31)
 7cc:	68 2f       	mov	r22, r24
 7ce:	70 e0       	ldi	r23, 0x00	; 0
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 a1 05 	call	0xb42	; 0xb42 <__floatunsisf>
 7d8:	22 e4       	ldi	r18, 0x42	; 66
 7da:	2f 93       	push	r18
 7dc:	28 e1       	ldi	r18, 0x18	; 24
 7de:	2f 93       	push	r18
 7e0:	1f 92       	push	r1
 7e2:	1f 92       	push	r1
 7e4:	0f 2e       	mov	r0, r31
 7e6:	a1 2c       	mov	r10, r1
 7e8:	b1 2c       	mov	r11, r1
 7ea:	c1 2c       	mov	r12, r1
 7ec:	f1 e4       	ldi	r31, 0x41	; 65
 7ee:	df 2e       	mov	r13, r31
 7f0:	f0 2d       	mov	r31, r0
 7f2:	e1 2c       	mov	r14, r1
 7f4:	f1 2c       	mov	r15, r1
 7f6:	04 e3       	ldi	r16, 0x34	; 52
 7f8:	13 e4       	ldi	r17, 0x43	; 67
 7fa:	20 e0       	ldi	r18, 0x00	; 0
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	a9 01       	movw	r20, r18
 800:	0e 94 7f 03 	call	0x6fe	; 0x6fe <map>
 804:	0f 90       	pop	r0
 806:	0f 90       	pop	r0
 808:	0f 90       	pop	r0
 80a:	0f 90       	pop	r0
 80c:	0e 94 72 05 	call	0xae4	; 0xae4 <__fixunssfsi>
 810:	68 bd       	out	0x28, r22	; 40
}
 812:	1f 91       	pop	r17
 814:	0f 91       	pop	r16
 816:	ff 90       	pop	r15
 818:	ef 90       	pop	r14
 81a:	df 90       	pop	r13
 81c:	cf 90       	pop	r12
 81e:	bf 90       	pop	r11
 820:	af 90       	pop	r10
 822:	08 95       	ret

00000824 <PWM_init_Timer0>:

void PWM_init_Timer0(void) {
	DDRD |= (1 << PD5);  // Configurar PD5 (OC0B) como salida
 824:	8a b1       	in	r24, 0x0a	; 10
 826:	80 62       	ori	r24, 0x20	; 32
 828:	8a b9       	out	0x0a, r24	; 10

	TCCR0A = (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  // Fast PWM
 82a:	83 e2       	ldi	r24, 0x23	; 35
 82c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << WGM02) | (1 << CS02) | (1 << CS00);     // Prescaler 1024 para 60Hz aprox.
 82e:	8d e0       	ldi	r24, 0x0D	; 13
 830:	85 bd       	out	0x25, r24	; 37

	OCR0A = 249;  // Ajustar para frecuencia de 50Hz
 832:	89 ef       	ldi	r24, 0xF9	; 249
 834:	87 bd       	out	0x27, r24	; 39
 836:	08 95       	ret

00000838 <UART_Init>:

void UART_Var(float v){
	char str[10];
	float_to_stringu(v, str, 2);
	UART_Write(str);
}
 838:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 83c:	87 e6       	ldi	r24, 0x67	; 103
 83e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 842:	88 e9       	ldi	r24, 0x98	; 152
 844:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 848:	86 e0       	ldi	r24, 0x06	; 6
 84a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 84e:	08 95       	ret

00000850 <UART_Char>:
 850:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 854:	95 ff       	sbrs	r25, 5
 856:	fc cf       	rjmp	.-8      	; 0x850 <UART_Char>
 858:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 85c:	08 95       	ret

0000085e <UART_Write>:
 85e:	ac 01       	movw	r20, r24
 860:	20 e0       	ldi	r18, 0x00	; 0
 862:	07 c0       	rjmp	.+14     	; 0x872 <UART_Write+0x14>
 864:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 868:	95 ff       	sbrs	r25, 5
 86a:	fc cf       	rjmp	.-8      	; 0x864 <UART_Write+0x6>
 86c:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 870:	2f 5f       	subi	r18, 0xFF	; 255
 872:	fa 01       	movw	r30, r20
 874:	e2 0f       	add	r30, r18
 876:	f1 1d       	adc	r31, r1
 878:	30 81       	ld	r19, Z
 87a:	31 11       	cpse	r19, r1
 87c:	f3 cf       	rjmp	.-26     	; 0x864 <UART_Write+0x6>
 87e:	08 95       	ret

00000880 <uint8_to_string>:

void uint8_to_string(uint8_t num) {
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	cd b7       	in	r28, 0x3d	; 61
 886:	de b7       	in	r29, 0x3e	; 62
 888:	28 97       	sbiw	r28, 0x08	; 8
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	f8 94       	cli
 88e:	de bf       	out	0x3e, r29	; 62
 890:	0f be       	out	0x3f, r0	; 63
 892:	cd bf       	out	0x3d, r28	; 61
	char buffer[4];  // Maximo 3 digitos + '\0'
	uint8_t i = 0;
	char temp[4];  // Almacena los digitos en orden inverso
	uint8_t j = 0;

	if (num == 0) {
 894:	81 11       	cpse	r24, r1
 896:	1d c0       	rjmp	.+58     	; 0x8d2 <uint8_to_string+0x52>
		buffer[i++] = '0';
 898:	80 e3       	ldi	r24, 0x30	; 48
 89a:	89 83       	std	Y+1, r24	; 0x01
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	2f c0       	rjmp	.+94     	; 0x8fe <uint8_to_string+0x7e>
		} else {
		while (num > 0) {
			temp[j++] = (num % 10) + '0';  // Extrae el ultimo digito
 8a0:	e5 e0       	ldi	r30, 0x05	; 5
 8a2:	f0 e0       	ldi	r31, 0x00	; 0
 8a4:	ec 0f       	add	r30, r28
 8a6:	fd 1f       	adc	r31, r29
 8a8:	e2 0f       	add	r30, r18
 8aa:	f1 1d       	adc	r31, r1
 8ac:	9d ec       	ldi	r25, 0xCD	; 205
 8ae:	89 9f       	mul	r24, r25
 8b0:	91 2d       	mov	r25, r1
 8b2:	11 24       	eor	r1, r1
 8b4:	96 95       	lsr	r25
 8b6:	96 95       	lsr	r25
 8b8:	96 95       	lsr	r25
 8ba:	49 2f       	mov	r20, r25
 8bc:	44 0f       	add	r20, r20
 8be:	34 2f       	mov	r19, r20
 8c0:	33 0f       	add	r19, r19
 8c2:	33 0f       	add	r19, r19
 8c4:	34 0f       	add	r19, r20
 8c6:	83 1b       	sub	r24, r19
 8c8:	80 5d       	subi	r24, 0xD0	; 208
 8ca:	80 83       	st	Z, r24
			num /= 10;
 8cc:	89 2f       	mov	r24, r25

	if (num == 0) {
		buffer[i++] = '0';
		} else {
		while (num > 0) {
			temp[j++] = (num % 10) + '0';  // Extrae el ultimo digito
 8ce:	2f 5f       	subi	r18, 0xFF	; 255
 8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <uint8_to_string+0x54>
 8d2:	20 e0       	ldi	r18, 0x00	; 0
	uint8_t j = 0;

	if (num == 0) {
		buffer[i++] = '0';
		} else {
		while (num > 0) {
 8d4:	81 11       	cpse	r24, r1
 8d6:	e4 cf       	rjmp	.-56     	; 0x8a0 <uint8_to_string+0x20>
 8d8:	10 c0       	rjmp	.+32     	; 0x8fa <uint8_to_string+0x7a>
			temp[j++] = (num % 10) + '0';  // Extrae el ultimo digito
			num /= 10;
		}
		while (j > 0) {
			buffer[i++] = temp[--j];  // Invierte el orden
 8da:	21 50       	subi	r18, 0x01	; 1
 8dc:	e5 e0       	ldi	r30, 0x05	; 5
 8de:	f0 e0       	ldi	r31, 0x00	; 0
 8e0:	ec 0f       	add	r30, r28
 8e2:	fd 1f       	adc	r31, r29
 8e4:	e2 0f       	add	r30, r18
 8e6:	f1 1d       	adc	r31, r1
 8e8:	90 81       	ld	r25, Z
 8ea:	e1 e0       	ldi	r30, 0x01	; 1
 8ec:	f0 e0       	ldi	r31, 0x00	; 0
 8ee:	ec 0f       	add	r30, r28
 8f0:	fd 1f       	adc	r31, r29
 8f2:	e8 0f       	add	r30, r24
 8f4:	f1 1d       	adc	r31, r1
 8f6:	90 83       	st	Z, r25
 8f8:	8f 5f       	subi	r24, 0xFF	; 255
		} else {
		while (num > 0) {
			temp[j++] = (num % 10) + '0';  // Extrae el ultimo digito
			num /= 10;
		}
		while (j > 0) {
 8fa:	21 11       	cpse	r18, r1
 8fc:	ee cf       	rjmp	.-36     	; 0x8da <uint8_to_string+0x5a>
			buffer[i++] = temp[--j];  // Invierte el orden
		}
	}

	buffer[i] = '\0';  // Termina el string
 8fe:	e1 e0       	ldi	r30, 0x01	; 1
 900:	f0 e0       	ldi	r31, 0x00	; 0
 902:	ec 0f       	add	r30, r28
 904:	fd 1f       	adc	r31, r29
 906:	e8 0f       	add	r30, r24
 908:	f1 1d       	adc	r31, r1
 90a:	10 82       	st	Z, r1

	UART_Write(buffer); // Enviar el string por UART
 90c:	ce 01       	movw	r24, r28
 90e:	01 96       	adiw	r24, 0x01	; 1
 910:	0e 94 2f 04 	call	0x85e	; 0x85e <UART_Write>
}
 914:	28 96       	adiw	r28, 0x08	; 8
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	f8 94       	cli
 91a:	de bf       	out	0x3e, r29	; 62
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	cd bf       	out	0x3d, r28	; 61
 920:	df 91       	pop	r29
 922:	cf 91       	pop	r28
 924:	08 95       	ret

00000926 <__subsf3>:
 926:	50 58       	subi	r21, 0x80	; 128

00000928 <__addsf3>:
 928:	bb 27       	eor	r27, r27
 92a:	aa 27       	eor	r26, r26
 92c:	0e 94 ab 04 	call	0x956	; 0x956 <__addsf3x>
 930:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_round>
 934:	0e 94 e7 05 	call	0xbce	; 0xbce <__fp_pscA>
 938:	38 f0       	brcs	.+14     	; 0x948 <__addsf3+0x20>
 93a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_pscB>
 93e:	20 f0       	brcs	.+8      	; 0x948 <__addsf3+0x20>
 940:	39 f4       	brne	.+14     	; 0x950 <__addsf3+0x28>
 942:	9f 3f       	cpi	r25, 0xFF	; 255
 944:	19 f4       	brne	.+6      	; 0x94c <__addsf3+0x24>
 946:	26 f4       	brtc	.+8      	; 0x950 <__addsf3+0x28>
 948:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_nan>
 94c:	0e f4       	brtc	.+2      	; 0x950 <__addsf3+0x28>
 94e:	e0 95       	com	r30
 950:	e7 fb       	bst	r30, 7
 952:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_inf>

00000956 <__addsf3x>:
 956:	e9 2f       	mov	r30, r25
 958:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_split3>
 95c:	58 f3       	brcs	.-42     	; 0x934 <__addsf3+0xc>
 95e:	ba 17       	cp	r27, r26
 960:	62 07       	cpc	r22, r18
 962:	73 07       	cpc	r23, r19
 964:	84 07       	cpc	r24, r20
 966:	95 07       	cpc	r25, r21
 968:	20 f0       	brcs	.+8      	; 0x972 <__addsf3x+0x1c>
 96a:	79 f4       	brne	.+30     	; 0x98a <__addsf3x+0x34>
 96c:	a6 f5       	brtc	.+104    	; 0x9d6 <__addsf3x+0x80>
 96e:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_zero>
 972:	0e f4       	brtc	.+2      	; 0x976 <__addsf3x+0x20>
 974:	e0 95       	com	r30
 976:	0b 2e       	mov	r0, r27
 978:	ba 2f       	mov	r27, r26
 97a:	a0 2d       	mov	r26, r0
 97c:	0b 01       	movw	r0, r22
 97e:	b9 01       	movw	r22, r18
 980:	90 01       	movw	r18, r0
 982:	0c 01       	movw	r0, r24
 984:	ca 01       	movw	r24, r20
 986:	a0 01       	movw	r20, r0
 988:	11 24       	eor	r1, r1
 98a:	ff 27       	eor	r31, r31
 98c:	59 1b       	sub	r21, r25
 98e:	99 f0       	breq	.+38     	; 0x9b6 <__addsf3x+0x60>
 990:	59 3f       	cpi	r21, 0xF9	; 249
 992:	50 f4       	brcc	.+20     	; 0x9a8 <__addsf3x+0x52>
 994:	50 3e       	cpi	r21, 0xE0	; 224
 996:	68 f1       	brcs	.+90     	; 0x9f2 <__addsf3x+0x9c>
 998:	1a 16       	cp	r1, r26
 99a:	f0 40       	sbci	r31, 0x00	; 0
 99c:	a2 2f       	mov	r26, r18
 99e:	23 2f       	mov	r18, r19
 9a0:	34 2f       	mov	r19, r20
 9a2:	44 27       	eor	r20, r20
 9a4:	58 5f       	subi	r21, 0xF8	; 248
 9a6:	f3 cf       	rjmp	.-26     	; 0x98e <__addsf3x+0x38>
 9a8:	46 95       	lsr	r20
 9aa:	37 95       	ror	r19
 9ac:	27 95       	ror	r18
 9ae:	a7 95       	ror	r26
 9b0:	f0 40       	sbci	r31, 0x00	; 0
 9b2:	53 95       	inc	r21
 9b4:	c9 f7       	brne	.-14     	; 0x9a8 <__addsf3x+0x52>
 9b6:	7e f4       	brtc	.+30     	; 0x9d6 <__addsf3x+0x80>
 9b8:	1f 16       	cp	r1, r31
 9ba:	ba 0b       	sbc	r27, r26
 9bc:	62 0b       	sbc	r22, r18
 9be:	73 0b       	sbc	r23, r19
 9c0:	84 0b       	sbc	r24, r20
 9c2:	ba f0       	brmi	.+46     	; 0x9f2 <__addsf3x+0x9c>
 9c4:	91 50       	subi	r25, 0x01	; 1
 9c6:	a1 f0       	breq	.+40     	; 0x9f0 <__addsf3x+0x9a>
 9c8:	ff 0f       	add	r31, r31
 9ca:	bb 1f       	adc	r27, r27
 9cc:	66 1f       	adc	r22, r22
 9ce:	77 1f       	adc	r23, r23
 9d0:	88 1f       	adc	r24, r24
 9d2:	c2 f7       	brpl	.-16     	; 0x9c4 <__addsf3x+0x6e>
 9d4:	0e c0       	rjmp	.+28     	; 0x9f2 <__addsf3x+0x9c>
 9d6:	ba 0f       	add	r27, r26
 9d8:	62 1f       	adc	r22, r18
 9da:	73 1f       	adc	r23, r19
 9dc:	84 1f       	adc	r24, r20
 9de:	48 f4       	brcc	.+18     	; 0x9f2 <__addsf3x+0x9c>
 9e0:	87 95       	ror	r24
 9e2:	77 95       	ror	r23
 9e4:	67 95       	ror	r22
 9e6:	b7 95       	ror	r27
 9e8:	f7 95       	ror	r31
 9ea:	9e 3f       	cpi	r25, 0xFE	; 254
 9ec:	08 f0       	brcs	.+2      	; 0x9f0 <__addsf3x+0x9a>
 9ee:	b0 cf       	rjmp	.-160    	; 0x950 <__addsf3+0x28>
 9f0:	93 95       	inc	r25
 9f2:	88 0f       	add	r24, r24
 9f4:	08 f0       	brcs	.+2      	; 0x9f8 <__addsf3x+0xa2>
 9f6:	99 27       	eor	r25, r25
 9f8:	ee 0f       	add	r30, r30
 9fa:	97 95       	ror	r25
 9fc:	87 95       	ror	r24
 9fe:	08 95       	ret

00000a00 <__divsf3>:
 a00:	0e 94 14 05 	call	0xa28	; 0xa28 <__divsf3x>
 a04:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_round>
 a08:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_pscB>
 a0c:	58 f0       	brcs	.+22     	; 0xa24 <__divsf3+0x24>
 a0e:	0e 94 e7 05 	call	0xbce	; 0xbce <__fp_pscA>
 a12:	40 f0       	brcs	.+16     	; 0xa24 <__divsf3+0x24>
 a14:	29 f4       	brne	.+10     	; 0xa20 <__divsf3+0x20>
 a16:	5f 3f       	cpi	r21, 0xFF	; 255
 a18:	29 f0       	breq	.+10     	; 0xa24 <__divsf3+0x24>
 a1a:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_inf>
 a1e:	51 11       	cpse	r21, r1
 a20:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_szero>
 a24:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_nan>

00000a28 <__divsf3x>:
 a28:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_split3>
 a2c:	68 f3       	brcs	.-38     	; 0xa08 <__divsf3+0x8>

00000a2e <__divsf3_pse>:
 a2e:	99 23       	and	r25, r25
 a30:	b1 f3       	breq	.-20     	; 0xa1e <__divsf3+0x1e>
 a32:	55 23       	and	r21, r21
 a34:	91 f3       	breq	.-28     	; 0xa1a <__divsf3+0x1a>
 a36:	95 1b       	sub	r25, r21
 a38:	55 0b       	sbc	r21, r21
 a3a:	bb 27       	eor	r27, r27
 a3c:	aa 27       	eor	r26, r26
 a3e:	62 17       	cp	r22, r18
 a40:	73 07       	cpc	r23, r19
 a42:	84 07       	cpc	r24, r20
 a44:	38 f0       	brcs	.+14     	; 0xa54 <__divsf3_pse+0x26>
 a46:	9f 5f       	subi	r25, 0xFF	; 255
 a48:	5f 4f       	sbci	r21, 0xFF	; 255
 a4a:	22 0f       	add	r18, r18
 a4c:	33 1f       	adc	r19, r19
 a4e:	44 1f       	adc	r20, r20
 a50:	aa 1f       	adc	r26, r26
 a52:	a9 f3       	breq	.-22     	; 0xa3e <__divsf3_pse+0x10>
 a54:	35 d0       	rcall	.+106    	; 0xac0 <__divsf3_pse+0x92>
 a56:	0e 2e       	mov	r0, r30
 a58:	3a f0       	brmi	.+14     	; 0xa68 <__divsf3_pse+0x3a>
 a5a:	e0 e8       	ldi	r30, 0x80	; 128
 a5c:	32 d0       	rcall	.+100    	; 0xac2 <__divsf3_pse+0x94>
 a5e:	91 50       	subi	r25, 0x01	; 1
 a60:	50 40       	sbci	r21, 0x00	; 0
 a62:	e6 95       	lsr	r30
 a64:	00 1c       	adc	r0, r0
 a66:	ca f7       	brpl	.-14     	; 0xa5a <__divsf3_pse+0x2c>
 a68:	2b d0       	rcall	.+86     	; 0xac0 <__divsf3_pse+0x92>
 a6a:	fe 2f       	mov	r31, r30
 a6c:	29 d0       	rcall	.+82     	; 0xac0 <__divsf3_pse+0x92>
 a6e:	66 0f       	add	r22, r22
 a70:	77 1f       	adc	r23, r23
 a72:	88 1f       	adc	r24, r24
 a74:	bb 1f       	adc	r27, r27
 a76:	26 17       	cp	r18, r22
 a78:	37 07       	cpc	r19, r23
 a7a:	48 07       	cpc	r20, r24
 a7c:	ab 07       	cpc	r26, r27
 a7e:	b0 e8       	ldi	r27, 0x80	; 128
 a80:	09 f0       	breq	.+2      	; 0xa84 <__divsf3_pse+0x56>
 a82:	bb 0b       	sbc	r27, r27
 a84:	80 2d       	mov	r24, r0
 a86:	bf 01       	movw	r22, r30
 a88:	ff 27       	eor	r31, r31
 a8a:	93 58       	subi	r25, 0x83	; 131
 a8c:	5f 4f       	sbci	r21, 0xFF	; 255
 a8e:	3a f0       	brmi	.+14     	; 0xa9e <__divsf3_pse+0x70>
 a90:	9e 3f       	cpi	r25, 0xFE	; 254
 a92:	51 05       	cpc	r21, r1
 a94:	78 f0       	brcs	.+30     	; 0xab4 <__divsf3_pse+0x86>
 a96:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_inf>
 a9a:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_szero>
 a9e:	5f 3f       	cpi	r21, 0xFF	; 255
 aa0:	e4 f3       	brlt	.-8      	; 0xa9a <__divsf3_pse+0x6c>
 aa2:	98 3e       	cpi	r25, 0xE8	; 232
 aa4:	d4 f3       	brlt	.-12     	; 0xa9a <__divsf3_pse+0x6c>
 aa6:	86 95       	lsr	r24
 aa8:	77 95       	ror	r23
 aaa:	67 95       	ror	r22
 aac:	b7 95       	ror	r27
 aae:	f7 95       	ror	r31
 ab0:	9f 5f       	subi	r25, 0xFF	; 255
 ab2:	c9 f7       	brne	.-14     	; 0xaa6 <__divsf3_pse+0x78>
 ab4:	88 0f       	add	r24, r24
 ab6:	91 1d       	adc	r25, r1
 ab8:	96 95       	lsr	r25
 aba:	87 95       	ror	r24
 abc:	97 f9       	bld	r25, 7
 abe:	08 95       	ret
 ac0:	e1 e0       	ldi	r30, 0x01	; 1
 ac2:	66 0f       	add	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	bb 1f       	adc	r27, r27
 aca:	62 17       	cp	r22, r18
 acc:	73 07       	cpc	r23, r19
 ace:	84 07       	cpc	r24, r20
 ad0:	ba 07       	cpc	r27, r26
 ad2:	20 f0       	brcs	.+8      	; 0xadc <__divsf3_pse+0xae>
 ad4:	62 1b       	sub	r22, r18
 ad6:	73 0b       	sbc	r23, r19
 ad8:	84 0b       	sbc	r24, r20
 ada:	ba 0b       	sbc	r27, r26
 adc:	ee 1f       	adc	r30, r30
 ade:	88 f7       	brcc	.-30     	; 0xac2 <__divsf3_pse+0x94>
 ae0:	e0 95       	com	r30
 ae2:	08 95       	ret

00000ae4 <__fixunssfsi>:
 ae4:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fp_splitA>
 ae8:	88 f0       	brcs	.+34     	; 0xb0c <__fixunssfsi+0x28>
 aea:	9f 57       	subi	r25, 0x7F	; 127
 aec:	98 f0       	brcs	.+38     	; 0xb14 <__fixunssfsi+0x30>
 aee:	b9 2f       	mov	r27, r25
 af0:	99 27       	eor	r25, r25
 af2:	b7 51       	subi	r27, 0x17	; 23
 af4:	b0 f0       	brcs	.+44     	; 0xb22 <__fixunssfsi+0x3e>
 af6:	e1 f0       	breq	.+56     	; 0xb30 <__fixunssfsi+0x4c>
 af8:	66 0f       	add	r22, r22
 afa:	77 1f       	adc	r23, r23
 afc:	88 1f       	adc	r24, r24
 afe:	99 1f       	adc	r25, r25
 b00:	1a f0       	brmi	.+6      	; 0xb08 <__fixunssfsi+0x24>
 b02:	ba 95       	dec	r27
 b04:	c9 f7       	brne	.-14     	; 0xaf8 <__fixunssfsi+0x14>
 b06:	14 c0       	rjmp	.+40     	; 0xb30 <__fixunssfsi+0x4c>
 b08:	b1 30       	cpi	r27, 0x01	; 1
 b0a:	91 f0       	breq	.+36     	; 0xb30 <__fixunssfsi+0x4c>
 b0c:	0e 94 28 06 	call	0xc50	; 0xc50 <__fp_zero>
 b10:	b1 e0       	ldi	r27, 0x01	; 1
 b12:	08 95       	ret
 b14:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__fp_zero>
 b18:	67 2f       	mov	r22, r23
 b1a:	78 2f       	mov	r23, r24
 b1c:	88 27       	eor	r24, r24
 b1e:	b8 5f       	subi	r27, 0xF8	; 248
 b20:	39 f0       	breq	.+14     	; 0xb30 <__fixunssfsi+0x4c>
 b22:	b9 3f       	cpi	r27, 0xF9	; 249
 b24:	cc f3       	brlt	.-14     	; 0xb18 <__fixunssfsi+0x34>
 b26:	86 95       	lsr	r24
 b28:	77 95       	ror	r23
 b2a:	67 95       	ror	r22
 b2c:	b3 95       	inc	r27
 b2e:	d9 f7       	brne	.-10     	; 0xb26 <__fixunssfsi+0x42>
 b30:	3e f4       	brtc	.+14     	; 0xb40 <__fixunssfsi+0x5c>
 b32:	90 95       	com	r25
 b34:	80 95       	com	r24
 b36:	70 95       	com	r23
 b38:	61 95       	neg	r22
 b3a:	7f 4f       	sbci	r23, 0xFF	; 255
 b3c:	8f 4f       	sbci	r24, 0xFF	; 255
 b3e:	9f 4f       	sbci	r25, 0xFF	; 255
 b40:	08 95       	ret

00000b42 <__floatunsisf>:
 b42:	e8 94       	clt
 b44:	09 c0       	rjmp	.+18     	; 0xb58 <__floatsisf+0x12>

00000b46 <__floatsisf>:
 b46:	97 fb       	bst	r25, 7
 b48:	3e f4       	brtc	.+14     	; 0xb58 <__floatsisf+0x12>
 b4a:	90 95       	com	r25
 b4c:	80 95       	com	r24
 b4e:	70 95       	com	r23
 b50:	61 95       	neg	r22
 b52:	7f 4f       	sbci	r23, 0xFF	; 255
 b54:	8f 4f       	sbci	r24, 0xFF	; 255
 b56:	9f 4f       	sbci	r25, 0xFF	; 255
 b58:	99 23       	and	r25, r25
 b5a:	a9 f0       	breq	.+42     	; 0xb86 <__floatsisf+0x40>
 b5c:	f9 2f       	mov	r31, r25
 b5e:	96 e9       	ldi	r25, 0x96	; 150
 b60:	bb 27       	eor	r27, r27
 b62:	93 95       	inc	r25
 b64:	f6 95       	lsr	r31
 b66:	87 95       	ror	r24
 b68:	77 95       	ror	r23
 b6a:	67 95       	ror	r22
 b6c:	b7 95       	ror	r27
 b6e:	f1 11       	cpse	r31, r1
 b70:	f8 cf       	rjmp	.-16     	; 0xb62 <__floatsisf+0x1c>
 b72:	fa f4       	brpl	.+62     	; 0xbb2 <__floatsisf+0x6c>
 b74:	bb 0f       	add	r27, r27
 b76:	11 f4       	brne	.+4      	; 0xb7c <__floatsisf+0x36>
 b78:	60 ff       	sbrs	r22, 0
 b7a:	1b c0       	rjmp	.+54     	; 0xbb2 <__floatsisf+0x6c>
 b7c:	6f 5f       	subi	r22, 0xFF	; 255
 b7e:	7f 4f       	sbci	r23, 0xFF	; 255
 b80:	8f 4f       	sbci	r24, 0xFF	; 255
 b82:	9f 4f       	sbci	r25, 0xFF	; 255
 b84:	16 c0       	rjmp	.+44     	; 0xbb2 <__floatsisf+0x6c>
 b86:	88 23       	and	r24, r24
 b88:	11 f0       	breq	.+4      	; 0xb8e <__floatsisf+0x48>
 b8a:	96 e9       	ldi	r25, 0x96	; 150
 b8c:	11 c0       	rjmp	.+34     	; 0xbb0 <__floatsisf+0x6a>
 b8e:	77 23       	and	r23, r23
 b90:	21 f0       	breq	.+8      	; 0xb9a <__floatsisf+0x54>
 b92:	9e e8       	ldi	r25, 0x8E	; 142
 b94:	87 2f       	mov	r24, r23
 b96:	76 2f       	mov	r23, r22
 b98:	05 c0       	rjmp	.+10     	; 0xba4 <__floatsisf+0x5e>
 b9a:	66 23       	and	r22, r22
 b9c:	71 f0       	breq	.+28     	; 0xbba <__floatsisf+0x74>
 b9e:	96 e8       	ldi	r25, 0x86	; 134
 ba0:	86 2f       	mov	r24, r22
 ba2:	70 e0       	ldi	r23, 0x00	; 0
 ba4:	60 e0       	ldi	r22, 0x00	; 0
 ba6:	2a f0       	brmi	.+10     	; 0xbb2 <__floatsisf+0x6c>
 ba8:	9a 95       	dec	r25
 baa:	66 0f       	add	r22, r22
 bac:	77 1f       	adc	r23, r23
 bae:	88 1f       	adc	r24, r24
 bb0:	da f7       	brpl	.-10     	; 0xba8 <__floatsisf+0x62>
 bb2:	88 0f       	add	r24, r24
 bb4:	96 95       	lsr	r25
 bb6:	87 95       	ror	r24
 bb8:	97 f9       	bld	r25, 7
 bba:	08 95       	ret

00000bbc <__fp_inf>:
 bbc:	97 f9       	bld	r25, 7
 bbe:	9f 67       	ori	r25, 0x7F	; 127
 bc0:	80 e8       	ldi	r24, 0x80	; 128
 bc2:	70 e0       	ldi	r23, 0x00	; 0
 bc4:	60 e0       	ldi	r22, 0x00	; 0
 bc6:	08 95       	ret

00000bc8 <__fp_nan>:
 bc8:	9f ef       	ldi	r25, 0xFF	; 255
 bca:	80 ec       	ldi	r24, 0xC0	; 192
 bcc:	08 95       	ret

00000bce <__fp_pscA>:
 bce:	00 24       	eor	r0, r0
 bd0:	0a 94       	dec	r0
 bd2:	16 16       	cp	r1, r22
 bd4:	17 06       	cpc	r1, r23
 bd6:	18 06       	cpc	r1, r24
 bd8:	09 06       	cpc	r0, r25
 bda:	08 95       	ret

00000bdc <__fp_pscB>:
 bdc:	00 24       	eor	r0, r0
 bde:	0a 94       	dec	r0
 be0:	12 16       	cp	r1, r18
 be2:	13 06       	cpc	r1, r19
 be4:	14 06       	cpc	r1, r20
 be6:	05 06       	cpc	r0, r21
 be8:	08 95       	ret

00000bea <__fp_round>:
 bea:	09 2e       	mov	r0, r25
 bec:	03 94       	inc	r0
 bee:	00 0c       	add	r0, r0
 bf0:	11 f4       	brne	.+4      	; 0xbf6 <__fp_round+0xc>
 bf2:	88 23       	and	r24, r24
 bf4:	52 f0       	brmi	.+20     	; 0xc0a <__fp_round+0x20>
 bf6:	bb 0f       	add	r27, r27
 bf8:	40 f4       	brcc	.+16     	; 0xc0a <__fp_round+0x20>
 bfa:	bf 2b       	or	r27, r31
 bfc:	11 f4       	brne	.+4      	; 0xc02 <__fp_round+0x18>
 bfe:	60 ff       	sbrs	r22, 0
 c00:	04 c0       	rjmp	.+8      	; 0xc0a <__fp_round+0x20>
 c02:	6f 5f       	subi	r22, 0xFF	; 255
 c04:	7f 4f       	sbci	r23, 0xFF	; 255
 c06:	8f 4f       	sbci	r24, 0xFF	; 255
 c08:	9f 4f       	sbci	r25, 0xFF	; 255
 c0a:	08 95       	ret

00000c0c <__fp_split3>:
 c0c:	57 fd       	sbrc	r21, 7
 c0e:	90 58       	subi	r25, 0x80	; 128
 c10:	44 0f       	add	r20, r20
 c12:	55 1f       	adc	r21, r21
 c14:	59 f0       	breq	.+22     	; 0xc2c <__fp_splitA+0x10>
 c16:	5f 3f       	cpi	r21, 0xFF	; 255
 c18:	71 f0       	breq	.+28     	; 0xc36 <__fp_splitA+0x1a>
 c1a:	47 95       	ror	r20

00000c1c <__fp_splitA>:
 c1c:	88 0f       	add	r24, r24
 c1e:	97 fb       	bst	r25, 7
 c20:	99 1f       	adc	r25, r25
 c22:	61 f0       	breq	.+24     	; 0xc3c <__fp_splitA+0x20>
 c24:	9f 3f       	cpi	r25, 0xFF	; 255
 c26:	79 f0       	breq	.+30     	; 0xc46 <__fp_splitA+0x2a>
 c28:	87 95       	ror	r24
 c2a:	08 95       	ret
 c2c:	12 16       	cp	r1, r18
 c2e:	13 06       	cpc	r1, r19
 c30:	14 06       	cpc	r1, r20
 c32:	55 1f       	adc	r21, r21
 c34:	f2 cf       	rjmp	.-28     	; 0xc1a <__fp_split3+0xe>
 c36:	46 95       	lsr	r20
 c38:	f1 df       	rcall	.-30     	; 0xc1c <__fp_splitA>
 c3a:	08 c0       	rjmp	.+16     	; 0xc4c <__fp_splitA+0x30>
 c3c:	16 16       	cp	r1, r22
 c3e:	17 06       	cpc	r1, r23
 c40:	18 06       	cpc	r1, r24
 c42:	99 1f       	adc	r25, r25
 c44:	f1 cf       	rjmp	.-30     	; 0xc28 <__fp_splitA+0xc>
 c46:	86 95       	lsr	r24
 c48:	71 05       	cpc	r23, r1
 c4a:	61 05       	cpc	r22, r1
 c4c:	08 94       	sec
 c4e:	08 95       	ret

00000c50 <__fp_zero>:
 c50:	e8 94       	clt

00000c52 <__fp_szero>:
 c52:	bb 27       	eor	r27, r27
 c54:	66 27       	eor	r22, r22
 c56:	77 27       	eor	r23, r23
 c58:	cb 01       	movw	r24, r22
 c5a:	97 f9       	bld	r25, 7
 c5c:	08 95       	ret

00000c5e <__mulsf3>:
 c5e:	0e 94 42 06 	call	0xc84	; 0xc84 <__mulsf3x>
 c62:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_round>
 c66:	0e 94 e7 05 	call	0xbce	; 0xbce <__fp_pscA>
 c6a:	38 f0       	brcs	.+14     	; 0xc7a <__mulsf3+0x1c>
 c6c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_pscB>
 c70:	20 f0       	brcs	.+8      	; 0xc7a <__mulsf3+0x1c>
 c72:	95 23       	and	r25, r21
 c74:	11 f0       	breq	.+4      	; 0xc7a <__mulsf3+0x1c>
 c76:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_inf>
 c7a:	0c 94 e4 05 	jmp	0xbc8	; 0xbc8 <__fp_nan>
 c7e:	11 24       	eor	r1, r1
 c80:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_szero>

00000c84 <__mulsf3x>:
 c84:	0e 94 06 06 	call	0xc0c	; 0xc0c <__fp_split3>
 c88:	70 f3       	brcs	.-36     	; 0xc66 <__mulsf3+0x8>

00000c8a <__mulsf3_pse>:
 c8a:	95 9f       	mul	r25, r21
 c8c:	c1 f3       	breq	.-16     	; 0xc7e <__mulsf3+0x20>
 c8e:	95 0f       	add	r25, r21
 c90:	50 e0       	ldi	r21, 0x00	; 0
 c92:	55 1f       	adc	r21, r21
 c94:	62 9f       	mul	r22, r18
 c96:	f0 01       	movw	r30, r0
 c98:	72 9f       	mul	r23, r18
 c9a:	bb 27       	eor	r27, r27
 c9c:	f0 0d       	add	r31, r0
 c9e:	b1 1d       	adc	r27, r1
 ca0:	63 9f       	mul	r22, r19
 ca2:	aa 27       	eor	r26, r26
 ca4:	f0 0d       	add	r31, r0
 ca6:	b1 1d       	adc	r27, r1
 ca8:	aa 1f       	adc	r26, r26
 caa:	64 9f       	mul	r22, r20
 cac:	66 27       	eor	r22, r22
 cae:	b0 0d       	add	r27, r0
 cb0:	a1 1d       	adc	r26, r1
 cb2:	66 1f       	adc	r22, r22
 cb4:	82 9f       	mul	r24, r18
 cb6:	22 27       	eor	r18, r18
 cb8:	b0 0d       	add	r27, r0
 cba:	a1 1d       	adc	r26, r1
 cbc:	62 1f       	adc	r22, r18
 cbe:	73 9f       	mul	r23, r19
 cc0:	b0 0d       	add	r27, r0
 cc2:	a1 1d       	adc	r26, r1
 cc4:	62 1f       	adc	r22, r18
 cc6:	83 9f       	mul	r24, r19
 cc8:	a0 0d       	add	r26, r0
 cca:	61 1d       	adc	r22, r1
 ccc:	22 1f       	adc	r18, r18
 cce:	74 9f       	mul	r23, r20
 cd0:	33 27       	eor	r19, r19
 cd2:	a0 0d       	add	r26, r0
 cd4:	61 1d       	adc	r22, r1
 cd6:	23 1f       	adc	r18, r19
 cd8:	84 9f       	mul	r24, r20
 cda:	60 0d       	add	r22, r0
 cdc:	21 1d       	adc	r18, r1
 cde:	82 2f       	mov	r24, r18
 ce0:	76 2f       	mov	r23, r22
 ce2:	6a 2f       	mov	r22, r26
 ce4:	11 24       	eor	r1, r1
 ce6:	9f 57       	subi	r25, 0x7F	; 127
 ce8:	50 40       	sbci	r21, 0x00	; 0
 cea:	9a f0       	brmi	.+38     	; 0xd12 <__mulsf3_pse+0x88>
 cec:	f1 f0       	breq	.+60     	; 0xd2a <__mulsf3_pse+0xa0>
 cee:	88 23       	and	r24, r24
 cf0:	4a f0       	brmi	.+18     	; 0xd04 <__mulsf3_pse+0x7a>
 cf2:	ee 0f       	add	r30, r30
 cf4:	ff 1f       	adc	r31, r31
 cf6:	bb 1f       	adc	r27, r27
 cf8:	66 1f       	adc	r22, r22
 cfa:	77 1f       	adc	r23, r23
 cfc:	88 1f       	adc	r24, r24
 cfe:	91 50       	subi	r25, 0x01	; 1
 d00:	50 40       	sbci	r21, 0x00	; 0
 d02:	a9 f7       	brne	.-22     	; 0xcee <__mulsf3_pse+0x64>
 d04:	9e 3f       	cpi	r25, 0xFE	; 254
 d06:	51 05       	cpc	r21, r1
 d08:	80 f0       	brcs	.+32     	; 0xd2a <__mulsf3_pse+0xa0>
 d0a:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_inf>
 d0e:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__fp_szero>
 d12:	5f 3f       	cpi	r21, 0xFF	; 255
 d14:	e4 f3       	brlt	.-8      	; 0xd0e <__mulsf3_pse+0x84>
 d16:	98 3e       	cpi	r25, 0xE8	; 232
 d18:	d4 f3       	brlt	.-12     	; 0xd0e <__mulsf3_pse+0x84>
 d1a:	86 95       	lsr	r24
 d1c:	77 95       	ror	r23
 d1e:	67 95       	ror	r22
 d20:	b7 95       	ror	r27
 d22:	f7 95       	ror	r31
 d24:	e7 95       	ror	r30
 d26:	9f 5f       	subi	r25, 0xFF	; 255
 d28:	c1 f7       	brne	.-16     	; 0xd1a <__mulsf3_pse+0x90>
 d2a:	fe 2b       	or	r31, r30
 d2c:	88 0f       	add	r24, r24
 d2e:	91 1d       	adc	r25, r1
 d30:	96 95       	lsr	r25
 d32:	87 95       	ror	r24
 d34:	97 f9       	bld	r25, 7
 d36:	08 95       	ret

00000d38 <_exit>:
 d38:	f8 94       	cli

00000d3a <__stop_program>:
 d3a:	ff cf       	rjmp	.-2      	; 0xd3a <__stop_program>
