
MaestroP1D2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00001342  000013d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001342  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800168  00800168  0000143e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000143e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001470  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000214b  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca2  00000000  00000000  00003763  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e4  00000000  00000000  00004405  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  000054ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073e  00000000  00000000  00005900  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ac7  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00007b05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e2 e4       	ldi	r30, 0x42	; 66
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 36       	cpi	r26, 0x68	; 104
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a8 e6       	ldi	r26, 0x68	; 104
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 38       	cpi	r26, 0x8B	; 139
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 46 05 	call	0xa8c	; 0xa8c <main>
      9e:	0c 94 9f 09 	jmp	0x133e	; 0x133e <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Master_Init>:
#include "I2C.h"

//***************************************************************
// Inicializa el módulo I2C en modo Maestro
//***************************************************************
void I2C_Master_Init(unsigned long SCL_Clock, uint8_t Prescaler) {
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	8b 01       	movw	r16, r22
      ae:	9c 01       	movw	r18, r24
      b0:	c4 2f       	mov	r28, r20

    DDRC &= ~((1 << DDC4) | (1 << DDC5));  // Configura los pines SDA y SCL como entradas
      b2:	87 b1       	in	r24, 0x07	; 7
      b4:	8f 7c       	andi	r24, 0xCF	; 207
      b6:	87 b9       	out	0x07, r24	; 7

    switch (Prescaler) {
      b8:	44 30       	cpi	r20, 0x04	; 4
      ba:	79 f0       	breq	.+30     	; 0xda <I2C_Master_Init+0x34>
      bc:	18 f4       	brcc	.+6      	; 0xc4 <I2C_Master_Init+0x1e>
      be:	41 30       	cpi	r20, 0x01	; 1
      c0:	31 f0       	breq	.+12     	; 0xce <I2C_Master_Init+0x28>
      c2:	23 c0       	rjmp	.+70     	; 0x10a <I2C_Master_Init+0x64>
      c4:	40 31       	cpi	r20, 0x10	; 16
      c6:	91 f0       	breq	.+36     	; 0xec <I2C_Master_Init+0x46>
      c8:	40 34       	cpi	r20, 0x40	; 64
      ca:	c9 f0       	breq	.+50     	; 0xfe <I2C_Master_Init+0x58>
      cc:	1e c0       	rjmp	.+60     	; 0x10a <I2C_Master_Init+0x64>
        case 1:
            TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
      ce:	e9 eb       	ldi	r30, 0xB9	; 185
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	8c 7f       	andi	r24, 0xFC	; 252
      d6:	80 83       	st	Z, r24
            break;
      d8:	1e c0       	rjmp	.+60     	; 0x116 <I2C_Master_Init+0x70>
        case 4:
            TWSR &= ~(1 << TWPS1);
      da:	e9 eb       	ldi	r30, 0xB9	; 185
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	80 81       	ld	r24, Z
      e0:	8d 7f       	andi	r24, 0xFD	; 253
      e2:	80 83       	st	Z, r24
            TWSR |= (1 << TWPS0);
      e4:	80 81       	ld	r24, Z
      e6:	81 60       	ori	r24, 0x01	; 1
      e8:	80 83       	st	Z, r24
            break;
      ea:	15 c0       	rjmp	.+42     	; 0x116 <I2C_Master_Init+0x70>
        case 16:
            TWSR &= ~(1 << TWPS0);
      ec:	e9 eb       	ldi	r30, 0xB9	; 185
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	8e 7f       	andi	r24, 0xFE	; 254
      f4:	80 83       	st	Z, r24
            TWSR |= (1 << TWPS1);
      f6:	80 81       	ld	r24, Z
      f8:	82 60       	ori	r24, 0x02	; 2
      fa:	80 83       	st	Z, r24
            break;
      fc:	0c c0       	rjmp	.+24     	; 0x116 <I2C_Master_Init+0x70>
        case 64:
            TWSR |= (1 << TWPS1) | (1 << TWPS0);
      fe:	e9 eb       	ldi	r30, 0xB9	; 185
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	80 81       	ld	r24, Z
     104:	83 60       	ori	r24, 0x03	; 3
     106:	80 83       	st	Z, r24
            break;
     108:	06 c0       	rjmp	.+12     	; 0x116 <I2C_Master_Init+0x70>
		default:
			TWSR &= ~((1 << TWPS1) | (1 << TWPS0)); // Valor por defecto si no coincide
     10a:	e9 eb       	ldi	r30, 0xB9	; 185
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	8c 7f       	andi	r24, 0xFC	; 252
     112:	80 83       	st	Z, r24
			Prescaler = 1;
     114:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    }

	TWBR = (((16000000) / SCL_Clock) - 16) / (2 * Prescaler); // Cálculo del registro de velocidad. Se recomienda >10
     116:	60 e0       	ldi	r22, 0x00	; 0
     118:	74 e2       	ldi	r23, 0x24	; 36
     11a:	84 ef       	ldi	r24, 0xF4	; 244
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	a9 01       	movw	r20, r18
     120:	98 01       	movw	r18, r16
     122:	0e 94 34 09 	call	0x1268	; 0x1268 <__udivmodsi4>
     126:	ca 01       	movw	r24, r20
     128:	b9 01       	movw	r22, r18
     12a:	60 51       	subi	r22, 0x10	; 16
     12c:	71 09       	sbc	r23, r1
     12e:	81 09       	sbc	r24, r1
     130:	91 09       	sbc	r25, r1
     132:	4c 2f       	mov	r20, r28
     134:	50 e0       	ldi	r21, 0x00	; 0
     136:	9a 01       	movw	r18, r20
     138:	22 0f       	add	r18, r18
     13a:	33 1f       	adc	r19, r19
     13c:	03 2e       	mov	r0, r19
     13e:	00 0c       	add	r0, r0
     140:	44 0b       	sbc	r20, r20
     142:	55 0b       	sbc	r21, r21
     144:	0e 94 34 09 	call	0x1268	; 0x1268 <__udivmodsi4>
     148:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1 << TWEN); // Habilita el módulo TWI
     14c:	ec eb       	ldi	r30, 0xBC	; 188
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	84 60       	ori	r24, 0x04	; 4
     154:	80 83       	st	Z, r24
}
     156:	cf 91       	pop	r28
     158:	1f 91       	pop	r17
     15a:	0f 91       	pop	r16
     15c:	08 95       	ret

0000015e <I2C_Master_Start>:
// Genera la condición de inicio (START) en la comunicación I2C
//************************************************************************
void I2C_Master_Start(void){
    uint8_t estado;
    
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Solicita START
     15e:	84 ea       	ldi	r24, 0xA4	; 164
     160:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1 << TWINT))); // Espera a que se complete la operación
     164:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     168:	88 23       	and	r24, r24
     16a:	e4 f7       	brge	.-8      	; 0x164 <I2C_Master_Start+0x6>
}
     16c:	08 95       	ret

0000016e <I2C_Master_Stop>:

//************************************************************************
// Genera la condición de parada (STOP) en la comunicación I2C
//************************************************************************
void I2C_Master_Stop(void){
    TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTO); // Envia STOP para finalizar transmisión
     16e:	84 e9       	ldi	r24, 0x94	; 148
     170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     174:	08 95       	ret

00000176 <I2C_Master_Write>:
// Retorna 1 si el esclavo respondió con ACK, o el estado si hubo error
//************************************************************************
uint8_t I2C_Master_Write(uint8_t dato){
    uint8_t estado;

    TWDR = dato;  // Carga el dato a enviar
     176:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1 << TWEN) | (1 << TWINT); // Inicia transmisión
     17a:	84 e8       	ldi	r24, 0x84	; 132
     17c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while (!(TWCR & (1 << TWINT))); // Espera a que termine
     180:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     184:	88 23       	and	r24, r24
     186:	e4 f7       	brge	.-8      	; 0x180 <I2C_Master_Write+0xa>

    estado = TWSR & 0xF8; // Lee el estado de TWI
     188:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     18c:	88 7f       	andi	r24, 0xF8	; 248

    // Comprueba si se recibió ACK tras SLA+W, SLA+R o DATO
    if (estado == 0x18 || estado == 0x28 || estado == 0x40){
     18e:	88 31       	cpi	r24, 0x18	; 24
     190:	31 f0       	breq	.+12     	; 0x19e <I2C_Master_Write+0x28>
     192:	88 32       	cpi	r24, 0x28	; 40
     194:	31 f0       	breq	.+12     	; 0x1a2 <I2C_Master_Write+0x2c>
     196:	80 34       	cpi	r24, 0x40	; 64
     198:	29 f4       	brne	.+10     	; 0x1a4 <I2C_Master_Write+0x2e>
        return 1; // OK
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	08 95       	ret
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	08 95       	ret
     1a2:	81 e0       	ldi	r24, 0x01	; 1
    } else {
        return estado; // Error
    }
}
     1a4:	08 95       	ret

000001a6 <I2C_Master_Read>:

//************************************************************************
// Lee un dato enviado por el esclavo al maestro
// Parámetro 'ack': 1 para enviar ACK después de recibir, 0 para NACK
//************************************************************************
uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack){
     1a6:	dc 01       	movw	r26, r24
    uint8_t estado;
    
    if (ack){
     1a8:	66 23       	and	r22, r22
     1aa:	31 f0       	breq	.+12     	; 0x1b8 <I2C_Master_Read+0x12>
        TWCR |= (1 << TWEA);  // Configura para enviar ACK
     1ac:	ec eb       	ldi	r30, 0xBC	; 188
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	90 81       	ld	r25, Z
     1b2:	90 64       	ori	r25, 0x40	; 64
     1b4:	90 83       	st	Z, r25
     1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <I2C_Master_Read+0x1c>
    } else {
        TWCR &= ~(1 << TWEA); // Configura para no enviar ACK
     1b8:	ec eb       	ldi	r30, 0xBC	; 188
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	90 81       	ld	r25, Z
     1be:	9f 7b       	andi	r25, 0xBF	; 191
     1c0:	90 83       	st	Z, r25
    }

    TWCR |= (1 << TWINT); // Inicia recepción
     1c2:	ec eb       	ldi	r30, 0xBC	; 188
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	90 81       	ld	r25, Z
     1c8:	90 68       	ori	r25, 0x80	; 128
     1ca:	90 83       	st	Z, r25
    while (!(TWCR & (1 << TWINT))); // Espera a que finalice
     1cc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d0:	99 23       	and	r25, r25
     1d2:	e4 f7       	brge	.-8      	; 0x1cc <I2C_Master_Read+0x26>

    estado = TWSR & 0xF8; // Lee el estado actual
     1d4:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1d8:	98 7f       	andi	r25, 0xF8	; 248

    // Verifica si se recibió el dato correctamente
    if (estado == 0x58 || estado == 0x50){
     1da:	98 35       	cpi	r25, 0x58	; 88
     1dc:	11 f0       	breq	.+4      	; 0x1e2 <I2C_Master_Read+0x3c>
     1de:	90 35       	cpi	r25, 0x50	; 80
     1e0:	29 f4       	brne	.+10     	; 0x1ec <I2C_Master_Read+0x46>
        *buffer = TWDR; // Guarda el dato recibido
     1e2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1e6:	8c 93       	st	X, r24
        return 1; // OK
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	08 95       	ret
    } else {
        return estado; // Error
     1ec:	89 2f       	mov	r24, r25
    }
}
     1ee:	08 95       	ret

000001f0 <LCD8_PORT>:
	_delay_ms(10);
}

// Envía una máscara de 10 bits al puerto para controlar RS, E y D7...D0
void LCD8_PORT(uint16_t mascara) {
	for (int i = 0; i < 10; i++) {
     1f0:	40 e0       	ldi	r20, 0x00	; 0
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	5d c0       	rjmp	.+186    	; 0x2b0 <LCD8_PORT+0xc0>
		if (mascara & (1 << i)) {
     1f6:	21 e0       	ldi	r18, 0x01	; 1
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	04 2e       	mov	r0, r20
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <LCD8_PORT+0x12>
     1fe:	22 0f       	add	r18, r18
     200:	33 1f       	adc	r19, r19
     202:	0a 94       	dec	r0
     204:	e2 f7       	brpl	.-8      	; 0x1fe <LCD8_PORT+0xe>
     206:	28 23       	and	r18, r24
     208:	39 23       	and	r19, r25
     20a:	23 2b       	or	r18, r19
     20c:	39 f1       	breq	.+78     	; 0x25c <LCD8_PORT+0x6c>
			uint8_t pin = pines[i];
     20e:	fa 01       	movw	r30, r20
     210:	e0 50       	subi	r30, 0x00	; 0
     212:	ff 4f       	sbci	r31, 0xFF	; 255
     214:	20 81       	ld	r18, Z
			if (pin >= 8 && pin <= 13) {
     216:	38 ef       	ldi	r19, 0xF8	; 248
     218:	32 0f       	add	r19, r18
     21a:	36 30       	cpi	r19, 0x06	; 6
     21c:	80 f4       	brcc	.+32     	; 0x23e <LCD8_PORT+0x4e>
				PORTB |= (1 << (pin - 8));
     21e:	e5 b1       	in	r30, 0x05	; 5
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	28 50       	subi	r18, 0x08	; 8
     224:	31 09       	sbc	r19, r1
     226:	61 e0       	ldi	r22, 0x01	; 1
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	db 01       	movw	r26, r22
     22c:	02 c0       	rjmp	.+4      	; 0x232 <LCD8_PORT+0x42>
     22e:	aa 0f       	add	r26, r26
     230:	bb 1f       	adc	r27, r27
     232:	2a 95       	dec	r18
     234:	e2 f7       	brpl	.-8      	; 0x22e <LCD8_PORT+0x3e>
     236:	9d 01       	movw	r18, r26
     238:	2e 2b       	or	r18, r30
     23a:	25 b9       	out	0x05, r18	; 5
     23c:	37 c0       	rjmp	.+110    	; 0x2ac <LCD8_PORT+0xbc>
			} else if (pin <= 7) {
     23e:	28 30       	cpi	r18, 0x08	; 8
     240:	a8 f5       	brcc	.+106    	; 0x2ac <LCD8_PORT+0xbc>
				PORTD |= (1 << pin);
     242:	eb b1       	in	r30, 0x0b	; 11
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	db 01       	movw	r26, r22
     24a:	02 c0       	rjmp	.+4      	; 0x250 <LCD8_PORT+0x60>
     24c:	aa 0f       	add	r26, r26
     24e:	bb 1f       	adc	r27, r27
     250:	2a 95       	dec	r18
     252:	e2 f7       	brpl	.-8      	; 0x24c <LCD8_PORT+0x5c>
     254:	9d 01       	movw	r18, r26
     256:	2e 2b       	or	r18, r30
     258:	2b b9       	out	0x0b, r18	; 11
     25a:	28 c0       	rjmp	.+80     	; 0x2ac <LCD8_PORT+0xbc>
			}
		} else {
			uint8_t pin = pines[i];
     25c:	fa 01       	movw	r30, r20
     25e:	e0 50       	subi	r30, 0x00	; 0
     260:	ff 4f       	sbci	r31, 0xFF	; 255
     262:	20 81       	ld	r18, Z
			if (pin >= 8 && pin <= 13) {
     264:	38 ef       	ldi	r19, 0xF8	; 248
     266:	32 0f       	add	r19, r18
     268:	36 30       	cpi	r19, 0x06	; 6
     26a:	88 f4       	brcc	.+34     	; 0x28e <LCD8_PORT+0x9e>
				PORTB &= ~(1 << (pin - 8));
     26c:	e5 b1       	in	r30, 0x05	; 5
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	28 50       	subi	r18, 0x08	; 8
     272:	31 09       	sbc	r19, r1
     274:	61 e0       	ldi	r22, 0x01	; 1
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	db 01       	movw	r26, r22
     27a:	02 c0       	rjmp	.+4      	; 0x280 <LCD8_PORT+0x90>
     27c:	aa 0f       	add	r26, r26
     27e:	bb 1f       	adc	r27, r27
     280:	2a 95       	dec	r18
     282:	e2 f7       	brpl	.-8      	; 0x27c <LCD8_PORT+0x8c>
     284:	9d 01       	movw	r18, r26
     286:	20 95       	com	r18
     288:	2e 23       	and	r18, r30
     28a:	25 b9       	out	0x05, r18	; 5
     28c:	0f c0       	rjmp	.+30     	; 0x2ac <LCD8_PORT+0xbc>
			} else if (pin <= 7) {
     28e:	28 30       	cpi	r18, 0x08	; 8
     290:	68 f4       	brcc	.+26     	; 0x2ac <LCD8_PORT+0xbc>
				PORTD &= ~(1 << pin);
     292:	eb b1       	in	r30, 0x0b	; 11
     294:	61 e0       	ldi	r22, 0x01	; 1
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	db 01       	movw	r26, r22
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <LCD8_PORT+0xb0>
     29c:	aa 0f       	add	r26, r26
     29e:	bb 1f       	adc	r27, r27
     2a0:	2a 95       	dec	r18
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <LCD8_PORT+0xac>
     2a4:	9d 01       	movw	r18, r26
     2a6:	20 95       	com	r18
     2a8:	2e 23       	and	r18, r30
     2aa:	2b b9       	out	0x0b, r18	; 11
	_delay_ms(10);
}

// Envía una máscara de 10 bits al puerto para controlar RS, E y D7...D0
void LCD8_PORT(uint16_t mascara) {
	for (int i = 0; i < 10; i++) {
     2ac:	4f 5f       	subi	r20, 0xFF	; 255
     2ae:	5f 4f       	sbci	r21, 0xFF	; 255
     2b0:	4a 30       	cpi	r20, 0x0A	; 10
     2b2:	51 05       	cpc	r21, r1
     2b4:	0c f4       	brge	.+2      	; 0x2b8 <LCD8_PORT+0xc8>
     2b6:	9f cf       	rjmp	.-194    	; 0x1f6 <LCD8_PORT+0x6>
			}
		}
	}

	// Pulso de habilitación (Enable)
	PORTD |= (1 << 4);
     2b8:	8b b1       	in	r24, 0x0b	; 11
     2ba:	80 61       	ori	r24, 0x10	; 16
     2bc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2be:	8f ed       	ldi	r24, 0xDF	; 223
     2c0:	9e e2       	ldi	r25, 0x2E	; 46
     2c2:	01 97       	sbiw	r24, 0x01	; 1
     2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD8_PORT+0xd2>
     2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD8_PORT+0xd8>
     2c8:	00 00       	nop
	_delay_ms(3);
	PORTD &= ~(1 << 4);
     2ca:	8b b1       	in	r24, 0x0b	; 11
     2cc:	8f 7e       	andi	r24, 0xEF	; 239
     2ce:	8b b9       	out	0x0b, r24	; 11
     2d0:	08 95       	ret

000002d2 <initLCD8>:
// Mapeo de pines: RS, E, D7...D0
unsigned char pines[10] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

void initLCD8(void) {
	// Configura los pines como salida
	for (uint8_t i = 0; i < 10; i++) {
     2d2:	20 e0       	ldi	r18, 0x00	; 0
     2d4:	27 c0       	rjmp	.+78     	; 0x324 <initLCD8+0x52>
		uint8_t pin = pines[i];
     2d6:	e2 2f       	mov	r30, r18
     2d8:	f0 e0       	ldi	r31, 0x00	; 0
     2da:	e0 50       	subi	r30, 0x00	; 0
     2dc:	ff 4f       	sbci	r31, 0xFF	; 255
     2de:	80 81       	ld	r24, Z
		if (pin >= 8 && pin <= 13) {
     2e0:	98 ef       	ldi	r25, 0xF8	; 248
     2e2:	98 0f       	add	r25, r24
     2e4:	96 30       	cpi	r25, 0x06	; 6
     2e6:	78 f4       	brcc	.+30     	; 0x306 <initLCD8+0x34>
			// Pines en PORTB
			DDRB |= (1 << (pin - 8));
     2e8:	34 b1       	in	r19, 0x04	; 4
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	08 97       	sbiw	r24, 0x08	; 8
     2ee:	41 e0       	ldi	r20, 0x01	; 1
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	ba 01       	movw	r22, r20
     2f4:	02 c0       	rjmp	.+4      	; 0x2fa <initLCD8+0x28>
     2f6:	66 0f       	add	r22, r22
     2f8:	77 1f       	adc	r23, r23
     2fa:	8a 95       	dec	r24
     2fc:	e2 f7       	brpl	.-8      	; 0x2f6 <initLCD8+0x24>
     2fe:	cb 01       	movw	r24, r22
     300:	83 2b       	or	r24, r19
     302:	84 b9       	out	0x04, r24	; 4
     304:	0e c0       	rjmp	.+28     	; 0x322 <initLCD8+0x50>
		} else if (pin <= 7) {
     306:	88 30       	cpi	r24, 0x08	; 8
     308:	60 f4       	brcc	.+24     	; 0x322 <initLCD8+0x50>
			// Pines en PORTD
			DDRD |= (1 << pin);
     30a:	3a b1       	in	r19, 0x0a	; 10
     30c:	41 e0       	ldi	r20, 0x01	; 1
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	ba 01       	movw	r22, r20
     312:	02 c0       	rjmp	.+4      	; 0x318 <initLCD8+0x46>
     314:	66 0f       	add	r22, r22
     316:	77 1f       	adc	r23, r23
     318:	8a 95       	dec	r24
     31a:	e2 f7       	brpl	.-8      	; 0x314 <initLCD8+0x42>
     31c:	cb 01       	movw	r24, r22
     31e:	83 2b       	or	r24, r19
     320:	8a b9       	out	0x0a, r24	; 10
// Mapeo de pines: RS, E, D7...D0
unsigned char pines[10] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

void initLCD8(void) {
	// Configura los pines como salida
	for (uint8_t i = 0; i < 10; i++) {
     322:	2f 5f       	subi	r18, 0xFF	; 255
     324:	2a 30       	cpi	r18, 0x0A	; 10
     326:	b8 f2       	brcs	.-82     	; 0x2d6 <initLCD8+0x4>
     328:	8f e5       	ldi	r24, 0x5F	; 95
     32a:	9a ee       	ldi	r25, 0xEA	; 234
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <initLCD8+0x5a>
     330:	00 c0       	rjmp	.+0      	; 0x332 <initLCD8+0x60>
     332:	00 00       	nop
		}
	}
	_delay_ms(15);

	// Configuración inicial del LCD (Function Set)
	LCD8_PORT(0b0011100000);
     334:	80 ee       	ldi	r24, 0xE0	; 224
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD8_PORT>
     33c:	8f e1       	ldi	r24, 0x1F	; 31
     33e:	9e e4       	ldi	r25, 0x4E	; 78
     340:	01 97       	sbiw	r24, 0x01	; 1
     342:	f1 f7       	brne	.-4      	; 0x340 <initLCD8+0x6e>
     344:	00 c0       	rjmp	.+0      	; 0x346 <initLCD8+0x74>
     346:	00 00       	nop
	_delay_ms(5);

	// Encendido del display (Display ON/OFF)
	LCD8_PORT(0b0000110000);
     348:	80 e3       	ldi	r24, 0x30	; 48
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD8_PORT>
     350:	8f e3       	ldi	r24, 0x3F	; 63
     352:	9c e9       	ldi	r25, 0x9C	; 156
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	f1 f7       	brne	.-4      	; 0x354 <initLCD8+0x82>
     358:	00 c0       	rjmp	.+0      	; 0x35a <initLCD8+0x88>
     35a:	00 00       	nop
	_delay_ms(10);

	// Modo de entrada (Entry Mode)
	LCD8_PORT(0b0000011000);
     35c:	88 e1       	ldi	r24, 0x18	; 24
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD8_PORT>
     364:	8f e3       	ldi	r24, 0x3F	; 63
     366:	9c e9       	ldi	r25, 0x9C	; 156
     368:	01 97       	sbiw	r24, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <initLCD8+0x96>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <initLCD8+0x9c>
     36e:	00 00       	nop
	_delay_ms(10);

	// Limpia el contenido del LCD
	LCD8_PORT(0b0000000100);
     370:	84 e0       	ldi	r24, 0x04	; 4
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <LCD8_PORT>
     378:	8f e3       	ldi	r24, 0x3F	; 63
     37a:	9c e9       	ldi	r25, 0x9C	; 156
     37c:	01 97       	sbiw	r24, 0x01	; 1
     37e:	f1 f7       	brne	.-4      	; 0x37c <initLCD8+0xaa>
     380:	00 c0       	rjmp	.+0      	; 0x382 <initLCD8+0xb0>
     382:	00 00       	nop
     384:	08 95       	ret

00000386 <LCD8_CMD>:
	PORTD &= ~(1 << 4);
}

// Envía una instrucción (comando) al LCD usando una máscara de 10 bits
void LCD8_CMD(uint16_t mascara) {
	for (int i = 0; i < 10; i++) {
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	5d c0       	rjmp	.+186    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
		if (mascara & (1 << i)) {
     38c:	21 e0       	ldi	r18, 0x01	; 1
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	04 2e       	mov	r0, r20
     392:	02 c0       	rjmp	.+4      	; 0x398 <LCD8_CMD+0x12>
     394:	22 0f       	add	r18, r18
     396:	33 1f       	adc	r19, r19
     398:	0a 94       	dec	r0
     39a:	e2 f7       	brpl	.-8      	; 0x394 <LCD8_CMD+0xe>
     39c:	28 23       	and	r18, r24
     39e:	39 23       	and	r19, r25
     3a0:	23 2b       	or	r18, r19
     3a2:	39 f1       	breq	.+78     	; 0x3f2 <LCD8_CMD+0x6c>
			uint8_t pin = pines[i];
     3a4:	fa 01       	movw	r30, r20
     3a6:	e0 50       	subi	r30, 0x00	; 0
     3a8:	ff 4f       	sbci	r31, 0xFF	; 255
     3aa:	20 81       	ld	r18, Z
			if (pin >= 8 && pin <= 13) {
     3ac:	38 ef       	ldi	r19, 0xF8	; 248
     3ae:	32 0f       	add	r19, r18
     3b0:	36 30       	cpi	r19, 0x06	; 6
     3b2:	80 f4       	brcc	.+32     	; 0x3d4 <LCD8_CMD+0x4e>
				PORTB |= (1 << (pin - 8));
     3b4:	e5 b1       	in	r30, 0x05	; 5
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	28 50       	subi	r18, 0x08	; 8
     3ba:	31 09       	sbc	r19, r1
     3bc:	61 e0       	ldi	r22, 0x01	; 1
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	db 01       	movw	r26, r22
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <LCD8_CMD+0x42>
     3c4:	aa 0f       	add	r26, r26
     3c6:	bb 1f       	adc	r27, r27
     3c8:	2a 95       	dec	r18
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <LCD8_CMD+0x3e>
     3cc:	9d 01       	movw	r18, r26
     3ce:	2e 2b       	or	r18, r30
     3d0:	25 b9       	out	0x05, r18	; 5
     3d2:	37 c0       	rjmp	.+110    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			} else if (pin <= 7) {
     3d4:	28 30       	cpi	r18, 0x08	; 8
     3d6:	a8 f5       	brcc	.+106    	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				PORTD |= (1 << pin);
     3d8:	eb b1       	in	r30, 0x0b	; 11
     3da:	61 e0       	ldi	r22, 0x01	; 1
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	db 01       	movw	r26, r22
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <LCD8_CMD+0x60>
     3e2:	aa 0f       	add	r26, r26
     3e4:	bb 1f       	adc	r27, r27
     3e6:	2a 95       	dec	r18
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <LCD8_CMD+0x5c>
     3ea:	9d 01       	movw	r18, r26
     3ec:	2e 2b       	or	r18, r30
     3ee:	2b b9       	out	0x0b, r18	; 11
     3f0:	28 c0       	rjmp	.+80     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			}
		} else {
			uint8_t pin = pines[i];
     3f2:	fa 01       	movw	r30, r20
     3f4:	e0 50       	subi	r30, 0x00	; 0
     3f6:	ff 4f       	sbci	r31, 0xFF	; 255
     3f8:	20 81       	ld	r18, Z
			if (pin >= 8 && pin <= 13) {
     3fa:	38 ef       	ldi	r19, 0xF8	; 248
     3fc:	32 0f       	add	r19, r18
     3fe:	36 30       	cpi	r19, 0x06	; 6
     400:	88 f4       	brcc	.+34     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
				PORTB &= ~(1 << (pin - 8));
     402:	e5 b1       	in	r30, 0x05	; 5
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	28 50       	subi	r18, 0x08	; 8
     408:	31 09       	sbc	r19, r1
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	db 01       	movw	r26, r22
     410:	02 c0       	rjmp	.+4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     412:	aa 0f       	add	r26, r26
     414:	bb 1f       	adc	r27, r27
     416:	2a 95       	dec	r18
     418:	e2 f7       	brpl	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     41a:	9d 01       	movw	r18, r26
     41c:	20 95       	com	r18
     41e:	2e 23       	and	r18, r30
     420:	25 b9       	out	0x05, r18	; 5
     422:	0f c0       	rjmp	.+30     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
			} else if (pin <= 7) {
     424:	28 30       	cpi	r18, 0x08	; 8
     426:	68 f4       	brcc	.+26     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
				PORTD &= ~(1 << pin);
     428:	eb b1       	in	r30, 0x0b	; 11
     42a:	61 e0       	ldi	r22, 0x01	; 1
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	db 01       	movw	r26, r22
     430:	02 c0       	rjmp	.+4      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     432:	aa 0f       	add	r26, r26
     434:	bb 1f       	adc	r27, r27
     436:	2a 95       	dec	r18
     438:	e2 f7       	brpl	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     43a:	9d 01       	movw	r18, r26
     43c:	20 95       	com	r18
     43e:	2e 23       	and	r18, r30
     440:	2b b9       	out	0x0b, r18	; 11
	PORTD &= ~(1 << 4);
}

// Envía una instrucción (comando) al LCD usando una máscara de 10 bits
void LCD8_CMD(uint16_t mascara) {
	for (int i = 0; i < 10; i++) {
     442:	4f 5f       	subi	r20, 0xFF	; 255
     444:	5f 4f       	sbci	r21, 0xFF	; 255
     446:	4a 30       	cpi	r20, 0x0A	; 10
     448:	51 05       	cpc	r21, r1
     44a:	0c f4       	brge	.+2      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     44c:	9f cf       	rjmp	.-194    	; 0x38c <LCD8_CMD+0x6>
     44e:	8f ed       	ldi	r24, 0xDF	; 223
     450:	9e e2       	ldi	r25, 0x2E	; 46
     452:	01 97       	sbiw	r24, 0x01	; 1
     454:	f1 f7       	brne	.-4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     456:	00 c0       	rjmp	.+0      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     458:	00 00       	nop
			}
		}
	}
	// Pulso de habilitación
	_delay_ms(3);
	PORTD |= (1 << 4);
     45a:	8b b1       	in	r24, 0x0b	; 11
     45c:	80 61       	ori	r24, 0x10	; 16
     45e:	8b b9       	out	0x0b, r24	; 11
     460:	af ed       	ldi	r26, 0xDF	; 223
     462:	be e2       	ldi	r27, 0x2E	; 46
     464:	11 97       	sbiw	r26, 0x01	; 1
     466:	f1 f7       	brne	.-4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     468:	00 c0       	rjmp	.+0      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     46a:	00 00       	nop
	_delay_ms(3);
	PORTD &= ~(1 << 4);
     46c:	8b b1       	in	r24, 0x0b	; 11
     46e:	8f 7e       	andi	r24, 0xEF	; 239
     470:	8b b9       	out	0x0b, r24	; 11
     472:	08 95       	ret

00000474 <LCD8_Write_Char>:
	LCD8_Write_String(str);
}

// Escribe un único carácter en el LCD
void LCD8_Write_Char(char c) {
	uint16_t valor = (c << 2) | 1;
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
	LCD8_CMD(valor);
     47e:	81 60       	ori	r24, 0x01	; 1
     480:	0e 94 c3 01 	call	0x386	; 0x386 <LCD8_CMD>
     484:	08 95       	ret

00000486 <LCD8_Write_String>:
}

// Muestra una cadena de caracteres en el LCD
void LCD8_Write_String(char *a) {
     486:	0f 93       	push	r16
     488:	1f 93       	push	r17
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	8c 01       	movw	r16, r24
	for (int i = 0; a[i] != '\0'; i++) {
     490:	c0 e0       	ldi	r28, 0x00	; 0
     492:	d0 e0       	ldi	r29, 0x00	; 0
     494:	03 c0       	rjmp	.+6      	; 0x49c <LCD8_Write_String+0x16>
		LCD8_Write_Char(a[i]);
     496:	0e 94 3a 02 	call	0x474	; 0x474 <LCD8_Write_Char>
	LCD8_CMD(valor);
}

// Muestra una cadena de caracteres en el LCD
void LCD8_Write_String(char *a) {
	for (int i = 0; a[i] != '\0'; i++) {
     49a:	21 96       	adiw	r28, 0x01	; 1
     49c:	f8 01       	movw	r30, r16
     49e:	ec 0f       	add	r30, r28
     4a0:	fd 1f       	adc	r31, r29
     4a2:	80 81       	ld	r24, Z
     4a4:	81 11       	cpse	r24, r1
     4a6:	f7 cf       	rjmp	.-18     	; 0x496 <LCD8_Write_String+0x10>
		LCD8_Write_Char(a[i]);
	}
}
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	1f 91       	pop	r17
     4ae:	0f 91       	pop	r16
     4b0:	08 95       	ret

000004b2 <LCD8_Set_Cursor>:

// Posiciona el cursor en columna `c` y fila `f` (0 o 1)
void LCD8_Set_Cursor(uint16_t c, uint16_t f) {
	uint16_t coordenada;
	if (f == 0) {
     4b2:	61 15       	cp	r22, r1
     4b4:	71 05       	cpc	r23, r1
     4b6:	41 f4       	brne	.+16     	; 0x4c8 <LCD8_Set_Cursor+0x16>
		// Primera fila
		coordenada = (c << 2) + 512;
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	88 0f       	add	r24, r24
     4be:	99 1f       	adc	r25, r25
		LCD8_CMD(coordenada);
     4c0:	9e 5f       	subi	r25, 0xFE	; 254
     4c2:	0e 94 c3 01 	call	0x386	; 0x386 <LCD8_CMD>
     4c6:	08 95       	ret
	} else if (f == 1) {
     4c8:	61 30       	cpi	r22, 0x01	; 1
     4ca:	71 05       	cpc	r23, r1
     4cc:	49 f4       	brne	.+18     	; 0x4e0 <LCD8_Set_Cursor+0x2e>
		// Segunda fila
		coordenada = ((c + 64) << 2) + 512;
     4ce:	80 5c       	subi	r24, 0xC0	; 192
     4d0:	9f 4f       	sbci	r25, 0xFF	; 255
     4d2:	88 0f       	add	r24, r24
     4d4:	99 1f       	adc	r25, r25
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
		LCD8_CMD(coordenada);
     4da:	9e 5f       	subi	r25, 0xFE	; 254
     4dc:	0e 94 c3 01 	call	0x386	; 0x386 <LCD8_CMD>
     4e0:	08 95       	ret

000004e2 <LCD8_Clear>:
	}
}

// Borra el contenido del LCD
void LCD8_Clear(void) {
	LCD8_CMD(0b100);
     4e2:	84 e0       	ldi	r24, 0x04	; 4
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 c3 01 	call	0x386	; 0x386 <LCD8_CMD>
     4ea:	08 95       	ret

000004ec <float_to_string>:
}

// Convierte un número flotante a cadena con n decimales
void float_to_string(float num, char *buffer, uint8_t decimales) {
     4ec:	8f 92       	push	r8
     4ee:	9f 92       	push	r9
     4f0:	af 92       	push	r10
     4f2:	bf 92       	push	r11
     4f4:	cf 92       	push	r12
     4f6:	df 92       	push	r13
     4f8:	ef 92       	push	r14
     4fa:	ff 92       	push	r15
     4fc:	0f 93       	push	r16
     4fe:	1f 93       	push	r17
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	2a 97       	sbiw	r28, 0x0a	; 10
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	4b 01       	movw	r8, r22
     516:	5c 01       	movw	r10, r24
     518:	7a 01       	movw	r14, r20
	int parte_entera = (int)num;
     51a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fixsfsi>
     51e:	8b 01       	movw	r16, r22
	int parte_decimal = (int)((num - parte_entera) * 100);
     520:	07 2e       	mov	r0, r23
     522:	00 0c       	add	r0, r0
     524:	88 0b       	sbc	r24, r24
     526:	99 0b       	sbc	r25, r25
     528:	0e 94 fe 07 	call	0xffc	; 0xffc <__floatsisf>
     52c:	9b 01       	movw	r18, r22
     52e:	ac 01       	movw	r20, r24
     530:	c5 01       	movw	r24, r10
     532:	b4 01       	movw	r22, r8
     534:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__subsf3>
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	48 ec       	ldi	r20, 0xC8	; 200
     53e:	52 e4       	ldi	r21, 0x42	; 66
     540:	0e 94 8f 08 	call	0x111e	; 0x111e <__mulsf3>
     544:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fixsfsi>
     548:	6b 01       	movw	r12, r22

	if (parte_decimal < 0) parte_decimal *= -1;
     54a:	77 23       	and	r23, r23
     54c:	24 f4       	brge	.+8      	; 0x556 <float_to_string+0x6a>
     54e:	cc 24       	eor	r12, r12
     550:	dd 24       	eor	r13, r13
     552:	c6 1a       	sub	r12, r22
     554:	d7 0a       	sbc	r13, r23

	int i = 0;

	// Parte entera
	if (parte_entera == 0) {
     556:	01 15       	cp	r16, r1
     558:	11 05       	cpc	r17, r1
     55a:	c1 f4       	brne	.+48     	; 0x58c <float_to_string+0xa0>
		buffer[i++] = '0';
     55c:	80 e3       	ldi	r24, 0x30	; 48
     55e:	d7 01       	movw	r26, r14
     560:	8c 93       	st	X, r24
     562:	e1 e0       	ldi	r30, 0x01	; 1
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	2c c0       	rjmp	.+88     	; 0x5c0 <float_to_string+0xd4>
	} else {
		int temp = parte_entera;
		char temp_buffer[10];
		int j = 0;
		while (temp > 0) {
			temp_buffer[j++] = (temp % 10) + '0';
     568:	c8 01       	movw	r24, r16
     56a:	6a e0       	ldi	r22, 0x0A	; 10
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	0e 94 20 09 	call	0x1240	; 0x1240 <__divmodhi4>
     572:	e1 e0       	ldi	r30, 0x01	; 1
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	ec 0f       	add	r30, r28
     578:	fd 1f       	adc	r31, r29
     57a:	e2 0f       	add	r30, r18
     57c:	f3 1f       	adc	r31, r19
     57e:	80 5d       	subi	r24, 0xD0	; 208
     580:	80 83       	st	Z, r24
			temp /= 10;
     582:	06 2f       	mov	r16, r22
     584:	17 2f       	mov	r17, r23
	} else {
		int temp = parte_entera;
		char temp_buffer[10];
		int j = 0;
		while (temp > 0) {
			temp_buffer[j++] = (temp % 10) + '0';
     586:	2f 5f       	subi	r18, 0xFF	; 255
     588:	3f 4f       	sbci	r19, 0xFF	; 255
     58a:	02 c0       	rjmp	.+4      	; 0x590 <float_to_string+0xa4>
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	30 e0       	ldi	r19, 0x00	; 0
		buffer[i++] = '0';
	} else {
		int temp = parte_entera;
		char temp_buffer[10];
		int j = 0;
		while (temp > 0) {
     590:	10 16       	cp	r1, r16
     592:	11 06       	cpc	r1, r17
     594:	4c f3       	brlt	.-46     	; 0x568 <float_to_string+0x7c>
     596:	e0 e0       	ldi	r30, 0x00	; 0
     598:	f0 e0       	ldi	r31, 0x00	; 0
     59a:	0f c0       	rjmp	.+30     	; 0x5ba <float_to_string+0xce>
			temp_buffer[j++] = (temp % 10) + '0';
			temp /= 10;
		}
		while (j > 0) {
			buffer[i++] = temp_buffer[--j];
     59c:	c7 01       	movw	r24, r14
     59e:	8e 0f       	add	r24, r30
     5a0:	9f 1f       	adc	r25, r31
     5a2:	21 50       	subi	r18, 0x01	; 1
     5a4:	31 09       	sbc	r19, r1
     5a6:	a1 e0       	ldi	r26, 0x01	; 1
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	ac 0f       	add	r26, r28
     5ac:	bd 1f       	adc	r27, r29
     5ae:	a2 0f       	add	r26, r18
     5b0:	b3 1f       	adc	r27, r19
     5b2:	4c 91       	ld	r20, X
     5b4:	dc 01       	movw	r26, r24
     5b6:	4c 93       	st	X, r20
     5b8:	31 96       	adiw	r30, 0x01	; 1
		int j = 0;
		while (temp > 0) {
			temp_buffer[j++] = (temp % 10) + '0';
			temp /= 10;
		}
		while (j > 0) {
     5ba:	12 16       	cp	r1, r18
     5bc:	13 06       	cpc	r1, r19
     5be:	74 f3       	brlt	.-36     	; 0x59c <float_to_string+0xb0>
			buffer[i++] = temp_buffer[--j];
		}
	}

	// Agrega punto decimal
	buffer[i++] = '.';
     5c0:	8f 01       	movw	r16, r30
     5c2:	0f 5f       	subi	r16, 0xFF	; 255
     5c4:	1f 4f       	sbci	r17, 0xFF	; 255
     5c6:	d7 01       	movw	r26, r14
     5c8:	ae 0f       	add	r26, r30
     5ca:	bf 1f       	adc	r27, r31
     5cc:	8e e2       	ldi	r24, 0x2E	; 46
     5ce:	8c 93       	st	X, r24

	// Parte decimal (solo 2 dígitos)
	buffer[i++] = (parte_decimal / 10) + '0';
     5d0:	9f 01       	movw	r18, r30
     5d2:	2e 5f       	subi	r18, 0xFE	; 254
     5d4:	3f 4f       	sbci	r19, 0xFF	; 255
     5d6:	0e 0d       	add	r16, r14
     5d8:	1f 1d       	adc	r17, r15
     5da:	c6 01       	movw	r24, r12
     5dc:	6a e0       	ldi	r22, 0x0A	; 10
     5de:	70 e0       	ldi	r23, 0x00	; 0
     5e0:	0e 94 20 09 	call	0x1240	; 0x1240 <__divmodhi4>
     5e4:	60 5d       	subi	r22, 0xD0	; 208
     5e6:	d8 01       	movw	r26, r16
     5e8:	6c 93       	st	X, r22
	buffer[i++] = (parte_decimal % 10) + '0';
     5ea:	33 96       	adiw	r30, 0x03	; 3
     5ec:	d7 01       	movw	r26, r14
     5ee:	a2 0f       	add	r26, r18
     5f0:	b3 1f       	adc	r27, r19
     5f2:	80 5d       	subi	r24, 0xD0	; 208
     5f4:	8c 93       	st	X, r24

	buffer[i] = '\0';
     5f6:	ee 0d       	add	r30, r14
     5f8:	ff 1d       	adc	r31, r15
     5fa:	10 82       	st	Z, r1
}
     5fc:	2a 96       	adiw	r28, 0x0a	; 10
     5fe:	0f b6       	in	r0, 0x3f	; 63
     600:	f8 94       	cli
     602:	de bf       	out	0x3e, r29	; 62
     604:	0f be       	out	0x3f, r0	; 63
     606:	cd bf       	out	0x3d, r28	; 61
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	df 90       	pop	r13
     616:	cf 90       	pop	r12
     618:	bf 90       	pop	r11
     61a:	af 90       	pop	r10
     61c:	9f 90       	pop	r9
     61e:	8f 90       	pop	r8
     620:	08 95       	ret

00000622 <LCD8_Variable>:
	_delay_ms(3);
	PORTD &= ~(1 << 4);
}

// Muestra un número flotante en el LCD con n decimales
void LCD8_Variable(float v, uint8_t n) {
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	2a 97       	sbiw	r28, 0x0a	; 10
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
     636:	24 2f       	mov	r18, r20
	char str[10];
	float_to_string(v, str, n);
     638:	ae 01       	movw	r20, r28
     63a:	4f 5f       	subi	r20, 0xFF	; 255
     63c:	5f 4f       	sbci	r21, 0xFF	; 255
     63e:	0e 94 76 02 	call	0x4ec	; 0x4ec <float_to_string>
	LCD8_Write_String(str);
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	0e 94 43 02 	call	0x486	; 0x486 <LCD8_Write_String>
}
     64a:	2a 96       	adiw	r28, 0x0a	; 10
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	f8 94       	cli
     650:	de bf       	out	0x3e, r29	; 62
     652:	0f be       	out	0x3f, r0	; 63
     654:	cd bf       	out	0x3d, r28	; 61
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <disp_acceso>:
	}
}

// Mensajes temporales de acceso
void disp_acceso(uint8_t rfid_status){
	switch(rfid_status){
     65c:	81 30       	cpi	r24, 0x01	; 1
     65e:	21 f0       	breq	.+8      	; 0x668 <disp_acceso+0xc>
     660:	98 f1       	brcs	.+102    	; 0x6c8 <disp_acceso+0x6c>
     662:	82 30       	cpi	r24, 0x02	; 2
     664:	c9 f0       	breq	.+50     	; 0x698 <disp_acceso+0x3c>
     666:	08 95       	ret
		case 1:
		LCD8_Clear();
     668:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD8_Clear>
		LCD8_Set_Cursor(0,0);
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD8_Set_Cursor>
		LCD8_Write_String("Bienvenido Pablo");
     678:	8d e0       	ldi	r24, 0x0D	; 13
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	0e 94 43 02 	call	0x486	; 0x486 <LCD8_Write_String>
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	8d e3       	ldi	r24, 0x3D	; 61
     684:	99 e4       	ldi	r25, 0x49	; 73
     686:	21 50       	subi	r18, 0x01	; 1
     688:	80 40       	sbci	r24, 0x00	; 0
     68a:	90 40       	sbci	r25, 0x00	; 0
     68c:	e1 f7       	brne	.-8      	; 0x686 <disp_acceso+0x2a>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <disp_acceso+0x34>
     690:	00 00       	nop
		_delay_ms(1500);
		LCD8_Clear();
     692:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD8_Clear>
		break;
     696:	08 95       	ret
		case 2:
		LCD8_Clear();
     698:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD8_Clear>
		LCD8_Set_Cursor(0,0);
     69c:	60 e0       	ldi	r22, 0x00	; 0
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD8_Set_Cursor>
		LCD8_Write_String("Bienvenido Pedro");
     6a8:	8e e1       	ldi	r24, 0x1E	; 30
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	0e 94 43 02 	call	0x486	; 0x486 <LCD8_Write_String>
     6b0:	2f ef       	ldi	r18, 0xFF	; 255
     6b2:	8d e3       	ldi	r24, 0x3D	; 61
     6b4:	99 e4       	ldi	r25, 0x49	; 73
     6b6:	21 50       	subi	r18, 0x01	; 1
     6b8:	80 40       	sbci	r24, 0x00	; 0
     6ba:	90 40       	sbci	r25, 0x00	; 0
     6bc:	e1 f7       	brne	.-8      	; 0x6b6 <disp_acceso+0x5a>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <disp_acceso+0x64>
     6c0:	00 00       	nop
		_delay_ms(1500);
		LCD8_Clear();
     6c2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD8_Clear>
		break;
     6c6:	08 95       	ret
		case 0:
		LCD8_Clear();
     6c8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD8_Clear>
		LCD8_Set_Cursor(0,0);
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD8_Set_Cursor>
		LCD8_Write_String("Acceso denegado");
     6d8:	8f e2       	ldi	r24, 0x2F	; 47
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 43 02 	call	0x486	; 0x486 <LCD8_Write_String>
     6e0:	2f ef       	ldi	r18, 0xFF	; 255
     6e2:	8d e3       	ldi	r24, 0x3D	; 61
     6e4:	99 e4       	ldi	r25, 0x49	; 73
     6e6:	21 50       	subi	r18, 0x01	; 1
     6e8:	80 40       	sbci	r24, 0x00	; 0
     6ea:	90 40       	sbci	r25, 0x00	; 0
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <disp_acceso+0x8a>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <disp_acceso+0x94>
     6f0:	00 00       	nop
		_delay_ms(1500);
		LCD8_Clear();
     6f2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD8_Clear>
     6f6:	08 95       	ret

000006f8 <disp_val>:
		break; // 3/4 -> sin mensaje
	}
}

// Mostrar temperatura y estado del servo
void disp_val(float t, uint8_t d, uint8_t s, uint8_t m){
     6f8:	cf 92       	push	r12
     6fa:	df 92       	push	r13
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	cf 93       	push	r28
     702:	6b 01       	movw	r12, r22
     704:	7c 01       	movw	r14, r24
     706:	c2 2f       	mov	r28, r18
	LCD8_Set_Cursor(0,0);
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD8_Set_Cursor>
	LCD8_Variable(t, 1);
     714:	41 e0       	ldi	r20, 0x01	; 1
     716:	c7 01       	movw	r24, r14
     718:	b6 01       	movw	r22, r12
     71a:	0e 94 11 03 	call	0x622	; 0x622 <LCD8_Variable>
	LCD8_Write_Char(' ');
     71e:	80 e2       	ldi	r24, 0x20	; 32
     720:	0e 94 3a 02 	call	0x474	; 0x474 <LCD8_Write_Char>
	LCD8_Write_Char(0xDF); // °C
     724:	8f ed       	ldi	r24, 0xDF	; 223
     726:	0e 94 3a 02 	call	0x474	; 0x474 <LCD8_Write_Char>
	LCD8_Write_String("C");
     72a:	86 e4       	ldi	r24, 0x46	; 70
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 43 02 	call	0x486	; 0x486 <LCD8_Write_String>

	LCD8_Set_Cursor(0, 1);
     732:	61 e0       	ldi	r22, 0x01	; 1
     734:	70 e0       	ldi	r23, 0x00	; 0
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD8_Set_Cursor>
	LCD8_Write_String("S:");
     73e:	88 e4       	ldi	r24, 0x48	; 72
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 43 02 	call	0x486	; 0x486 <LCD8_Write_String>
	LCD8_Write_String(s ? "ON" : "OFF");
     746:	cc 23       	and	r28, r28
     748:	19 f0       	breq	.+6      	; 0x750 <disp_val+0x58>
     74a:	8f e3       	ldi	r24, 0x3F	; 63
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	02 c0       	rjmp	.+4      	; 0x754 <disp_val+0x5c>
     750:	82 e4       	ldi	r24, 0x42	; 66
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 43 02 	call	0x486	; 0x486 <LCD8_Write_String>
}
     758:	cf 91       	pop	r28
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	cf 90       	pop	r12
     762:	08 95       	ret

00000764 <read_UART>:
	UART_Char('\n');
}

// Leer comandos desde UART
void read_UART(void){
	dato = UART_Read();
     764:	0e 94 80 06 	call	0xd00	; 0xd00 <UART_Read>
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <dato+0x1>
     76e:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <dato>
	if(dato != 0){
     772:	00 97       	sbiw	r24, 0x00	; 0
     774:	09 f4       	brne	.+2      	; 0x778 <read_UART+0x14>
     776:	61 c0       	rjmp	.+194    	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
		if(dato == 'A'){ // online
     778:	81 34       	cpi	r24, 0x41	; 65
     77a:	91 05       	cpc	r25, r1
     77c:	f1 f4       	brne	.+60     	; 0x7ba <read_UART+0x56>
			online_access = 1;
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <online_access>
			PORTB |= (1<<5);
     784:	85 b1       	in	r24, 0x05	; 5
     786:	80 62       	ori	r24, 0x20	; 32
     788:	85 b9       	out	0x05, r24	; 5
			LCD8_Clear();
     78a:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD8_Clear>
			LCD8_Set_Cursor(4,0);
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	84 e0       	ldi	r24, 0x04	; 4
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD8_Set_Cursor>
			LCD8_Write_String("ONLINE");
     79a:	8b e4       	ldi	r24, 0x4B	; 75
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	0e 94 43 02 	call	0x486	; 0x486 <LCD8_Write_String>
     7a2:	2f ef       	ldi	r18, 0xFF	; 255
     7a4:	8d e3       	ldi	r24, 0x3D	; 61
     7a6:	99 e4       	ldi	r25, 0x49	; 73
     7a8:	21 50       	subi	r18, 0x01	; 1
     7aa:	80 40       	sbci	r24, 0x00	; 0
     7ac:	90 40       	sbci	r25, 0x00	; 0
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <read_UART+0x44>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <read_UART+0x4e>
     7b2:	00 00       	nop
			_delay_ms(1500);
			LCD8_Clear();
     7b4:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD8_Clear>
     7b8:	1f c0       	rjmp	.+62     	; 0x7f8 <read_UART+0x94>
			} else if(dato == 'a'){ // offline
     7ba:	81 36       	cpi	r24, 0x61	; 97
     7bc:	91 05       	cpc	r25, r1
     7be:	e1 f4       	brne	.+56     	; 0x7f8 <read_UART+0x94>
			online_access = 0;
     7c0:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <online_access>
			PORTB &= ~(1<<5);
     7c4:	85 b1       	in	r24, 0x05	; 5
     7c6:	8f 7d       	andi	r24, 0xDF	; 223
     7c8:	85 b9       	out	0x05, r24	; 5
			LCD8_Clear();
     7ca:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD8_Clear>
			LCD8_Set_Cursor(4,1);
     7ce:	61 e0       	ldi	r22, 0x01	; 1
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	84 e0       	ldi	r24, 0x04	; 4
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD8_Set_Cursor>
			LCD8_Write_String("OFFLINE");
     7da:	82 e5       	ldi	r24, 0x52	; 82
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 43 02 	call	0x486	; 0x486 <LCD8_Write_String>
     7e2:	2f ef       	ldi	r18, 0xFF	; 255
     7e4:	8d e3       	ldi	r24, 0x3D	; 61
     7e6:	99 e4       	ldi	r25, 0x49	; 73
     7e8:	21 50       	subi	r18, 0x01	; 1
     7ea:	80 40       	sbci	r24, 0x00	; 0
     7ec:	90 40       	sbci	r25, 0x00	; 0
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <read_UART+0x84>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <read_UART+0x8e>
     7f2:	00 00       	nop
			_delay_ms(1500);
			LCD8_Clear();
     7f4:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD8_Clear>
		}
		if(online_access){
     7f8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <online_access>
     7fc:	88 23       	and	r24, r24
     7fe:	e9 f0       	breq	.+58     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
			if(dato=='S') servo_pos=1;
     800:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <dato>
     804:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <dato+0x1>
     808:	83 35       	cpi	r24, 0x53	; 83
     80a:	91 05       	cpc	r25, r1
     80c:	21 f4       	brne	.+8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <servo_pos>
     814:	08 95       	ret
			else if(dato=='s') servo_pos=0;
     816:	83 37       	cpi	r24, 0x73	; 115
     818:	91 05       	cpc	r25, r1
     81a:	19 f4       	brne	.+6      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     81c:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <servo_pos>
     820:	08 95       	ret
			else if(dato=='V') fan_state=1;
     822:	86 35       	cpi	r24, 0x56	; 86
     824:	91 05       	cpc	r25, r1
     826:	21 f4       	brne	.+8      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <__data_end>
     82e:	08 95       	ret
			else if(dato=='v') fan_state=0;
     830:	86 37       	cpi	r24, 0x76	; 118
     832:	91 05       	cpc	r25, r1
     834:	11 f4       	brne	.+4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     836:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
     83a:	08 95       	ret

0000083c <I2Ctemp>:
		}
	}
}

// Leer temperatura del sensor AHT10
void I2Ctemp(void){
     83c:	cf 93       	push	r28
	uint8_t status;

	// pedir medición
	I2C_Master_Start();
     83e:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
	status = I2C_Master_Write((SLAVE_TEMP << 1) | 0);
     842:	80 e7       	ldi	r24, 0x70	; 112
     844:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
	if(status != 1){ I2C_Master_Stop(); return; }
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	19 f0       	breq	.+6      	; 0x852 <I2Ctemp+0x16>
     84c:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
     850:	34 c0       	rjmp	.+104    	; 0x8ba <I2Ctemp+0x7e>
	I2C_Master_Write(0xAC);
     852:	8c ea       	ldi	r24, 0xAC	; 172
     854:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
	I2C_Master_Write(0x33);
     858:	83 e3       	ldi	r24, 0x33	; 51
     85a:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
	I2C_Master_Write(0x00);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
	I2C_Master_Stop();
     864:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
     868:	2f ef       	ldi	r18, 0xFF	; 255
     86a:	86 e1       	ldi	r24, 0x16	; 22
     86c:	91 e1       	ldi	r25, 0x11	; 17
     86e:	21 50       	subi	r18, 0x01	; 1
     870:	80 40       	sbci	r24, 0x00	; 0
     872:	90 40       	sbci	r25, 0x00	; 0
     874:	e1 f7       	brne	.-8      	; 0x86e <I2Ctemp+0x32>
     876:	00 c0       	rjmp	.+0      	; 0x878 <I2Ctemp+0x3c>
     878:	00 00       	nop
	_delay_ms(350);

	// leer 6 bytes
	I2C_Master_Start();
     87a:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
	status = I2C_Master_Write((SLAVE_TEMP << 1) | 1);
     87e:	81 e7       	ldi	r24, 0x71	; 113
     880:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
	if(status != 1){ I2C_Master_Stop(); return; }
     884:	81 30       	cpi	r24, 0x01	; 1
     886:	a1 f0       	breq	.+40     	; 0x8b0 <I2Ctemp+0x74>
     888:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
     88c:	16 c0       	rjmp	.+44     	; 0x8ba <I2Ctemp+0x7e>
	for(uint8_t i=0;i<6;i++){
		status = I2C_Master_Read(&valorTYH[i], i<5);
     88e:	61 e0       	ldi	r22, 0x01	; 1
     890:	c5 30       	cpi	r28, 0x05	; 5
     892:	08 f0       	brcs	.+2      	; 0x896 <I2Ctemp+0x5a>
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	8c 2f       	mov	r24, r28
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	83 59       	subi	r24, 0x93	; 147
     89c:	9e 4f       	sbci	r25, 0xFE	; 254
     89e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <I2C_Master_Read>
		if(status != 1){ I2C_Master_Stop(); return; }
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	19 f0       	breq	.+6      	; 0x8ac <I2Ctemp+0x70>
     8a6:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
     8aa:	07 c0       	rjmp	.+14     	; 0x8ba <I2Ctemp+0x7e>

	// leer 6 bytes
	I2C_Master_Start();
	status = I2C_Master_Write((SLAVE_TEMP << 1) | 1);
	if(status != 1){ I2C_Master_Stop(); return; }
	for(uint8_t i=0;i<6;i++){
     8ac:	cf 5f       	subi	r28, 0xFF	; 255
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <I2Ctemp+0x76>
     8b0:	c0 e0       	ldi	r28, 0x00	; 0
     8b2:	c6 30       	cpi	r28, 0x06	; 6
     8b4:	60 f3       	brcs	.-40     	; 0x88e <I2Ctemp+0x52>
		status = I2C_Master_Read(&valorTYH[i], i<5);
		if(status != 1){ I2C_Master_Stop(); return; }
	}
	I2C_Master_Stop();
     8b6:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
}
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <floatToString>:

// Convertir float a string
void floatToString(float num, char *str, int precision){
     8be:	4f 92       	push	r4
     8c0:	5f 92       	push	r5
     8c2:	6f 92       	push	r6
     8c4:	7f 92       	push	r7
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	00 d0       	rcall	.+0      	; 0x8dc <floatToString+0x1e>
     8dc:	00 d0       	rcall	.+0      	; 0x8de <floatToString+0x20>
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	2b 01       	movw	r4, r22
     8e4:	3c 01       	movw	r6, r24
     8e6:	7a 01       	movw	r14, r20
     8e8:	59 01       	movw	r10, r18
	int intPart = (int)num;
     8ea:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fixsfsi>
     8ee:	69 83       	std	Y+1, r22	; 0x01
     8f0:	7a 83       	std	Y+2, r23	; 0x02
     8f2:	8b 83       	std	Y+3, r24	; 0x03
     8f4:	9c 83       	std	Y+4, r25	; 0x04
	float decimalPart = num - intPart;
     8f6:	29 81       	ldd	r18, Y+1	; 0x01
     8f8:	3a 81       	ldd	r19, Y+2	; 0x02
     8fa:	b9 01       	movw	r22, r18
     8fc:	33 0f       	add	r19, r19
     8fe:	88 0b       	sbc	r24, r24
     900:	99 0b       	sbc	r25, r25
     902:	0e 94 fe 07 	call	0xffc	; 0xffc <__floatsisf>
     906:	9b 01       	movw	r18, r22
     908:	ac 01       	movw	r20, r24
     90a:	c3 01       	movw	r24, r6
     90c:	b2 01       	movw	r22, r4
     90e:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__subsf3>
     912:	2b 01       	movw	r4, r22
     914:	3c 01       	movw	r6, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     916:	4a e0       	ldi	r20, 0x0A	; 10
     918:	b7 01       	movw	r22, r14
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	9a 81       	ldd	r25, Y+2	; 0x02
     91e:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <__itoa_ncheck>
	itoa(intPart,str,10);
	int i=0;
     922:	1a 82       	std	Y+2, r1	; 0x02
     924:	19 82       	std	Y+1, r1	; 0x01
	while(str[i]!='\0') i++;
     926:	05 c0       	rjmp	.+10     	; 0x932 <__stack+0x33>
     928:	89 81       	ldd	r24, Y+1	; 0x01
     92a:	9a 81       	ldd	r25, Y+2	; 0x02
     92c:	01 96       	adiw	r24, 0x01	; 1
     92e:	9a 83       	std	Y+2, r25	; 0x02
     930:	89 83       	std	Y+1, r24	; 0x01
     932:	e9 81       	ldd	r30, Y+1	; 0x01
     934:	fa 81       	ldd	r31, Y+2	; 0x02
     936:	ee 0d       	add	r30, r14
     938:	ff 1d       	adc	r31, r15
     93a:	80 81       	ld	r24, Z
     93c:	81 11       	cpse	r24, r1
     93e:	f4 cf       	rjmp	.-24     	; 0x928 <__stack+0x29>
	str[i++]='.';
     940:	29 81       	ldd	r18, Y+1	; 0x01
     942:	3a 81       	ldd	r19, Y+2	; 0x02
     944:	2f 5f       	subi	r18, 0xFF	; 255
     946:	3f 4f       	sbci	r19, 0xFF	; 255
     948:	3a 83       	std	Y+2, r19	; 0x02
     94a:	29 83       	std	Y+1, r18	; 0x01
     94c:	8e e2       	ldi	r24, 0x2E	; 46
     94e:	80 83       	st	Z, r24
	for(int j=0;j<precision;j++){
     950:	00 e0       	ldi	r16, 0x00	; 0
     952:	10 e0       	ldi	r17, 0x00	; 0
     954:	2a c0       	rjmp	.+84     	; 0x9aa <__stack+0xab>
		decimalPart *= 10;
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e2       	ldi	r20, 0x20	; 32
     95c:	51 e4       	ldi	r21, 0x41	; 65
     95e:	c3 01       	movw	r24, r6
     960:	b2 01       	movw	r22, r4
     962:	0e 94 8f 08 	call	0x111e	; 0x111e <__mulsf3>
     966:	2b 01       	movw	r4, r22
     968:	3c 01       	movw	r6, r24
		int decDigit = (int)decimalPart;
     96a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fixsfsi>
		str[i++] = decDigit+'0';
     96e:	c9 80       	ldd	r12, Y+1	; 0x01
     970:	da 80       	ldd	r13, Y+2	; 0x02
     972:	3f ef       	ldi	r19, 0xFF	; 255
     974:	c3 1a       	sub	r12, r19
     976:	d3 0a       	sbc	r13, r19
     978:	e9 81       	ldd	r30, Y+1	; 0x01
     97a:	fa 81       	ldd	r31, Y+2	; 0x02
     97c:	ee 0d       	add	r30, r14
     97e:	ff 1d       	adc	r31, r15
     980:	20 e3       	ldi	r18, 0x30	; 48
     982:	26 0f       	add	r18, r22
     984:	20 83       	st	Z, r18
		decimalPart -= decDigit;
     986:	07 2e       	mov	r0, r23
     988:	00 0c       	add	r0, r0
     98a:	88 0b       	sbc	r24, r24
     98c:	99 0b       	sbc	r25, r25
     98e:	0e 94 fe 07 	call	0xffc	; 0xffc <__floatsisf>
     992:	9b 01       	movw	r18, r22
     994:	ac 01       	movw	r20, r24
     996:	c3 01       	movw	r24, r6
     998:	b2 01       	movw	r22, r4
     99a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__subsf3>
     99e:	2b 01       	movw	r4, r22
     9a0:	3c 01       	movw	r6, r24
	float decimalPart = num - intPart;
	itoa(intPart,str,10);
	int i=0;
	while(str[i]!='\0') i++;
	str[i++]='.';
	for(int j=0;j<precision;j++){
     9a2:	0f 5f       	subi	r16, 0xFF	; 255
     9a4:	1f 4f       	sbci	r17, 0xFF	; 255
		decimalPart *= 10;
		int decDigit = (int)decimalPart;
		str[i++] = decDigit+'0';
     9a6:	da 82       	std	Y+2, r13	; 0x02
     9a8:	c9 82       	std	Y+1, r12	; 0x01
	float decimalPart = num - intPart;
	itoa(intPart,str,10);
	int i=0;
	while(str[i]!='\0') i++;
	str[i++]='.';
	for(int j=0;j<precision;j++){
     9aa:	0a 15       	cp	r16, r10
     9ac:	1b 05       	cpc	r17, r11
     9ae:	9c f2       	brlt	.-90     	; 0x956 <__stack+0x57>
		decimalPart *= 10;
		int decDigit = (int)decimalPart;
		str[i++] = decDigit+'0';
		decimalPart -= decDigit;
	}
	str[i]='\0';
     9b0:	29 81       	ldd	r18, Y+1	; 0x01
     9b2:	3a 81       	ldd	r19, Y+2	; 0x02
     9b4:	2e 0d       	add	r18, r14
     9b6:	3f 1d       	adc	r19, r15
     9b8:	f9 01       	movw	r30, r18
     9ba:	10 82       	st	Z, r1
}
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	df 91       	pop	r29
     9c6:	cf 91       	pop	r28
     9c8:	1f 91       	pop	r17
     9ca:	0f 91       	pop	r16
     9cc:	ff 90       	pop	r15
     9ce:	ef 90       	pop	r14
     9d0:	df 90       	pop	r13
     9d2:	cf 90       	pop	r12
     9d4:	bf 90       	pop	r11
     9d6:	af 90       	pop	r10
     9d8:	7f 90       	pop	r7
     9da:	6f 90       	pop	r6
     9dc:	5f 90       	pop	r5
     9de:	4f 90       	pop	r4
     9e0:	08 95       	ret

000009e2 <send_val>:
	LCD8_Write_String("S:");
	LCD8_Write_String(s ? "ON" : "OFF");
}

// Enviar datos por UART
void send_val(uint8_t s, uint8_t r, float t){
     9e2:	cf 92       	push	r12
     9e4:	df 92       	push	r13
     9e6:	ef 92       	push	r14
     9e8:	ff 92       	push	r15
     9ea:	0f 93       	push	r16
     9ec:	1f 93       	push	r17
     9ee:	cf 93       	push	r28
     9f0:	df 93       	push	r29
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	2a 97       	sbiw	r28, 0x0a	; 10
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	08 2f       	mov	r16, r24
     a04:	16 2f       	mov	r17, r22
     a06:	69 01       	movw	r12, r18
     a08:	7a 01       	movw	r14, r20
	UART_Char('s'); UART_Var(s); UART_Char(' ');
     a0a:	83 e7       	ldi	r24, 0x73	; 115
     a0c:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Char>
     a10:	60 2f       	mov	r22, r16
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 fc 07 	call	0xff8	; 0xff8 <__floatunsisf>
     a1c:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_Var>
     a20:	80 e2       	ldi	r24, 0x20	; 32
     a22:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Char>
	UART_Char('r'); UART_Var(r); UART_Char(' ');
     a26:	82 e7       	ldi	r24, 0x72	; 114
     a28:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Char>
     a2c:	61 2f       	mov	r22, r17
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	80 e0       	ldi	r24, 0x00	; 0
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	0e 94 fc 07 	call	0xff8	; 0xff8 <__floatunsisf>
     a38:	0e 94 3c 07 	call	0xe78	; 0xe78 <UART_Var>
     a3c:	80 e2       	ldi	r24, 0x20	; 32
     a3e:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Char>
	UART_Char('T');
     a42:	84 e5       	ldi	r24, 0x54	; 84
     a44:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Char>
	char tempStr[10];
	floatToString(t, tempStr, 1);
     a48:	21 e0       	ldi	r18, 0x01	; 1
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	ae 01       	movw	r20, r28
     a4e:	4f 5f       	subi	r20, 0xFF	; 255
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	c7 01       	movw	r24, r14
     a54:	b6 01       	movw	r22, r12
     a56:	0e 94 5f 04 	call	0x8be	; 0x8be <floatToString>
	UART_Write(tempStr);
     a5a:	ce 01       	movw	r24, r28
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_Write>
	UART_Char(' ');
     a62:	80 e2       	ldi	r24, 0x20	; 32
     a64:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Char>
	UART_Char('\n');
     a68:	8a e0       	ldi	r24, 0x0A	; 10
     a6a:	0e 94 89 06 	call	0xd12	; 0xd12 <UART_Char>
}
     a6e:	2a 96       	adiw	r28, 0x0a	; 10
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	f8 94       	cli
     a74:	de bf       	out	0x3e, r29	; 62
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	cd bf       	out	0x3d, r28	; 61
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	ef 90       	pop	r14
     a86:	df 90       	pop	r13
     a88:	cf 90       	pop	r12
     a8a:	08 95       	ret

00000a8c <main>:
void floatToString(float num, char *str, int precision);
void disp_val(float t, uint8_t d, uint8_t s, uint8_t m);

int main(void) {
	// Inicializar I2C, UART y LCD
	I2C_Master_Init(100000, 1);
     a8c:	41 e0       	ldi	r20, 0x01	; 1
     a8e:	60 ea       	ldi	r22, 0xA0	; 160
     a90:	76 e8       	ldi	r23, 0x86	; 134
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Master_Init>
	UART_Init();
     a9a:	0e 94 74 06 	call	0xce8	; 0xce8 <UART_Init>
	initLCD8();
     a9e:	0e 94 69 01 	call	0x2d2	; 0x2d2 <initLCD8>
	LCD8_Set_Cursor(0,0);
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 59 02 	call	0x4b2	; 0x4b2 <LCD8_Set_Cursor>
	LCD8_Write_String("Iniciando...");
     aae:	8a e5       	ldi	r24, 0x5A	; 90
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	0e 94 43 02 	call	0x486	; 0x486 <LCD8_Write_String>
     ab6:	2f ef       	ldi	r18, 0xFF	; 255
     ab8:	87 ea       	ldi	r24, 0xA7	; 167
     aba:	91 e6       	ldi	r25, 0x61	; 97
     abc:	21 50       	subi	r18, 0x01	; 1
     abe:	80 40       	sbci	r24, 0x00	; 0
     ac0:	90 40       	sbci	r25, 0x00	; 0
     ac2:	e1 f7       	brne	.-8      	; 0xabc <main+0x30>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <main+0x3a>
     ac6:	00 00       	nop
	_delay_ms(2000);
	LCD8_Clear();
     ac8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <LCD8_Clear>

	DDRD |= (1<<2);
     acc:	8a b1       	in	r24, 0x0a	; 10
     ace:	84 60       	ori	r24, 0x04	; 4
     ad0:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<2);
     ad2:	8b b1       	in	r24, 0x0b	; 11
     ad4:	84 60       	ori	r24, 0x04	; 4
     ad6:	8b b9       	out	0x0b, r24	; 11

	// Inicializar sensor AHT10
	I2C_Master_Start();
     ad8:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
	I2C_Master_Write((SLAVE_TEMP << 1) | 0);
     adc:	80 e7       	ldi	r24, 0x70	; 112
     ade:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
	I2C_Master_Write(0xE1);
     ae2:	81 ee       	ldi	r24, 0xE1	; 225
     ae4:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
	I2C_Master_Stop();
     ae8:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
     aec:	2f ef       	ldi	r18, 0xFF	; 255
     aee:	86 e1       	ldi	r24, 0x16	; 22
     af0:	91 e1       	ldi	r25, 0x11	; 17
     af2:	21 50       	subi	r18, 0x01	; 1
     af4:	80 40       	sbci	r24, 0x00	; 0
     af6:	90 40       	sbci	r25, 0x00	; 0
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <main+0x66>
     afa:	00 c0       	rjmp	.+0      	; 0xafc <main+0x70>
     afc:	00 00       	nop
	_delay_ms(350);

	while(1) {
		read_UART(); // revisar comandos desde UART
     afe:	0e 94 b2 03 	call	0x764	; 0x764 <read_UART>

		I2Ctemp();   // leer temperatura
     b02:	0e 94 1e 04 	call	0x83c	; 0x83c <I2Ctemp>

		// Calcular temperatura
		uint32_t rawTemp = ((uint32_t)(valorTYH[3] & 0x0F) << 16) | ((uint32_t)valorTYH[4] << 8) | valorTYH[5];
     b06:	ed e6       	ldi	r30, 0x6D	; 109
     b08:	f1 e0       	ldi	r31, 0x01	; 1
     b0a:	63 81       	ldd	r22, Z+3	; 0x03
     b0c:	6f 70       	andi	r22, 0x0F	; 15
     b0e:	86 2f       	mov	r24, r22
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	a0 e0       	ldi	r26, 0x00	; 0
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	bc 01       	movw	r22, r24
     b18:	55 27       	eor	r21, r21
     b1a:	44 27       	eor	r20, r20
     b1c:	84 81       	ldd	r24, Z+4	; 0x04
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	a0 e0       	ldi	r26, 0x00	; 0
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	ba 2f       	mov	r27, r26
     b26:	a9 2f       	mov	r26, r25
     b28:	98 2f       	mov	r25, r24
     b2a:	88 27       	eor	r24, r24
     b2c:	84 2b       	or	r24, r20
     b2e:	95 2b       	or	r25, r21
     b30:	a6 2b       	or	r26, r22
     b32:	b7 2b       	or	r27, r23
     b34:	25 81       	ldd	r18, Z+5	; 0x05
     b36:	bc 01       	movw	r22, r24
     b38:	cd 01       	movw	r24, r26
     b3a:	62 2b       	or	r22, r18
		temperatura = (rawTemp * 200.0 / 1048576.0) - 50.0;
     b3c:	0e 94 fc 07 	call	0xff8	; 0xff8 <__floatunsisf>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	48 e4       	ldi	r20, 0x48	; 72
     b46:	53 e4       	ldi	r21, 0x43	; 67
     b48:	0e 94 8f 08 	call	0x111e	; 0x111e <__mulsf3>
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	40 e8       	ldi	r20, 0x80	; 128
     b52:	55 e3       	ldi	r21, 0x35	; 53
     b54:	0e 94 8f 08 	call	0x111e	; 0x111e <__mulsf3>
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	48 e4       	ldi	r20, 0x48	; 72
     b5e:	52 e4       	ldi	r21, 0x42	; 66
     b60:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__subsf3>
     b64:	60 93 87 01 	sts	0x0187, r22	; 0x800187 <temperatura>
     b68:	70 93 88 01 	sts	0x0188, r23	; 0x800188 <temperatura+0x1>
     b6c:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <temperatura+0x2>
     b70:	90 93 8a 01 	sts	0x018A, r25	; 0x80018a <temperatura+0x3>
		floatToString(temperatura, buf, 1);
     b74:	21 e0       	ldi	r18, 0x01	; 1
     b76:	30 e0       	ldi	r19, 0x00	; 0
     b78:	43 e7       	ldi	r20, 0x73	; 115
     b7a:	51 e0       	ldi	r21, 0x01	; 1
     b7c:	0e 94 5f 04 	call	0x8be	; 0x8be <floatToString>
		PORTD &= ~(1<<2);
     b80:	8b b1       	in	r24, 0x0b	; 11
     b82:	8b 7f       	andi	r24, 0xFB	; 251
     b84:	8b b9       	out	0x0b, r24	; 11

		// Control de ventilador según temperatura
		if (temperatura > 29.0) {
     b86:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <temperatura>
     b8a:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <temperatura+0x1>
     b8e:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <temperatura+0x2>
     b92:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <temperatura+0x3>
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	48 ee       	ldi	r20, 0xE8	; 232
     b9c:	51 e4       	ldi	r21, 0x41	; 65
     b9e:	0e 94 8a 08 	call	0x1114	; 0x1114 <__gesf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	6c f4       	brge	.+26     	; 0xbc0 <main+0x134>
			// prender ventilador
			I2C_Master_Start();
     ba6:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
			if (I2C_Master_Write((SLAVE_2 << 1) & 0xFE) == 1) I2C_Master_Write('V');
     baa:	80 e8       	ldi	r24, 0x80	; 128
     bac:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	19 f4       	brne	.+6      	; 0xbba <main+0x12e>
     bb4:	86 e5       	ldi	r24, 0x56	; 86
     bb6:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
			I2C_Master_Stop();
     bba:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
     bbe:	0c c0       	rjmp	.+24     	; 0xbd8 <main+0x14c>
			} else {
			// apagar ventilador
			I2C_Master_Start();
     bc0:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
			if (I2C_Master_Write((SLAVE_2 << 1) & 0xFE) == 1) I2C_Master_Write('v');
     bc4:	80 e8       	ldi	r24, 0x80	; 128
     bc6:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	19 f4       	brne	.+6      	; 0xbd4 <main+0x148>
     bce:	86 e7       	ldi	r24, 0x76	; 118
     bd0:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
			I2C_Master_Stop();
     bd4:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
		}

		// Leer estado RFID del esclavo
		I2C_Master_Start();
     bd8:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
		if (I2C_Master_Write((SLAVE_2 << 1) | 0x01) == 1) {
     bdc:	81 e8       	ldi	r24, 0x81	; 129
     bde:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	59 f4       	brne	.+22     	; 0xbfc <main+0x170>
			TWCR = (1<<TWINT)|(1<<TWEN);
     be6:	84 e8       	ldi	r24, 0x84	; 132
     be8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			while (!(TWCR & (1<<TWINT)));
     bec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     bf0:	88 23       	and	r24, r24
     bf2:	e4 f7       	brge	.-8      	; 0xbec <main+0x160>
			rfid_status = TWDR;
     bf4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     bf8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rfid_status>
		}
		I2C_Master_Stop();
     bfc:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
     c00:	8f e1       	ldi	r24, 0x1F	; 31
     c02:	9e e4       	ldi	r25, 0x4E	; 78
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <main+0x178>
     c08:	00 c0       	rjmp	.+0      	; 0xc0a <main+0x17e>
     c0a:	00 00       	nop
		_delay_ms(5);

		// Actualizar posición del servo según RFID
		if (rfid_status == 1 || rfid_status == 2) {
     c0c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rfid_status>
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	98 0f       	add	r25, r24
     c14:	92 30       	cpi	r25, 0x02	; 2
     c16:	30 f4       	brcc	.+12     	; 0xc24 <main+0x198>
			servo_pos = 1;            // tarjeta válida abre
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <servo_pos>
			disp_acceso(rfid_status); // mensaje bienvenida
     c1e:	0e 94 2e 03 	call	0x65c	; 0x65c <disp_acceso>
     c22:	0b c0       	rjmp	.+22     	; 0xc3a <main+0x1ae>
			} else if (rfid_status == 0) {
     c24:	81 11       	cpse	r24, r1
     c26:	05 c0       	rjmp	.+10     	; 0xc32 <main+0x1a6>
			servo_pos = 0;
     c28:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <servo_pos>
			disp_acceso(0);           // acceso denegado
     c2c:	0e 94 2e 03 	call	0x65c	; 0x65c <disp_acceso>
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <main+0x1ae>
			} else if (rfid_status == 4) {
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	11 f4       	brne	.+4      	; 0xc3a <main+0x1ae>
			servo_pos = 0;            // cierre manual
     c36:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <servo_pos>
		}

		// Mandar S/s al esclavo solo si cambió
		if (servo_pos != last_sent_servo) {
     c3a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <servo_pos>
     c3e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <last_sent_servo>
     c42:	98 17       	cp	r25, r24
     c44:	b1 f0       	breq	.+44     	; 0xc72 <main+0x1e6>
			I2C_Master_Start();
     c46:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
			if (I2C_Master_Write((SLAVE_2 << 1) & 0xFE) == 1) {
     c4a:	80 e8       	ldi	r24, 0x80	; 128
     c4c:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
     c50:	81 30       	cpi	r24, 0x01	; 1
     c52:	49 f4       	brne	.+18     	; 0xc66 <main+0x1da>
				I2C_Master_Write(servo_pos == 1 ? 'S' : 's');
     c54:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <servo_pos>
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	11 f4       	brne	.+4      	; 0xc60 <main+0x1d4>
     c5c:	83 e5       	ldi	r24, 0x53	; 83
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <main+0x1d6>
     c60:	83 e7       	ldi	r24, 0x73	; 115
     c62:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
			}
			I2C_Master_Stop();
     c66:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
			last_sent_servo = servo_pos;
     c6a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <servo_pos>
     c6e:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <last_sent_servo>
		}

		// Mandar V/v al esclavo solo si cambió ventilador
		if (fan_state != last_sent_fan) {
     c72:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <__data_end>
     c76:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <last_sent_fan>
     c7a:	98 17       	cp	r25, r24
     c7c:	b1 f0       	breq	.+44     	; 0xcaa <main+0x21e>
			I2C_Master_Start();
     c7e:	0e 94 af 00 	call	0x15e	; 0x15e <I2C_Master_Start>
			if (I2C_Master_Write((SLAVE_2 << 1) & 0xFE) == 1) {
     c82:	80 e8       	ldi	r24, 0x80	; 128
     c84:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	49 f4       	brne	.+18     	; 0xc9e <main+0x212>
				I2C_Master_Write(fan_state == 1 ? 'V' : 'v');
     c8c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	11 f4       	brne	.+4      	; 0xc98 <main+0x20c>
     c94:	86 e5       	ldi	r24, 0x56	; 86
     c96:	01 c0       	rjmp	.+2      	; 0xc9a <main+0x20e>
     c98:	86 e7       	ldi	r24, 0x76	; 118
     c9a:	0e 94 bb 00 	call	0x176	; 0x176 <I2C_Master_Write>
			}
			I2C_Master_Stop();
     c9e:	0e 94 b7 00 	call	0x16e	; 0x16e <I2C_Master_Stop>
			last_sent_fan = fan_state;
     ca2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
     ca6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <last_sent_fan>
		}

		// Mostrar temperatura y servo en LCD
		disp_val(temperatura, rfid_status, servo_pos, online_access);
     caa:	60 91 87 01 	lds	r22, 0x0187	; 0x800187 <temperatura>
     cae:	70 91 88 01 	lds	r23, 0x0188	; 0x800188 <temperatura+0x1>
     cb2:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <temperatura+0x2>
     cb6:	90 91 8a 01 	lds	r25, 0x018A	; 0x80018a <temperatura+0x3>
     cba:	00 91 6c 01 	lds	r16, 0x016C	; 0x80016c <online_access>
     cbe:	20 91 6b 01 	lds	r18, 0x016B	; 0x80016b <servo_pos>
     cc2:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <rfid_status>
     cc6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <disp_val>

		// Enviar datos por UART
		send_val(servo_pos, rfid_status, temperatura);
     cca:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <temperatura>
     cce:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <temperatura+0x1>
     cd2:	40 91 89 01 	lds	r20, 0x0189	; 0x800189 <temperatura+0x2>
     cd6:	50 91 8a 01 	lds	r21, 0x018A	; 0x80018a <temperatura+0x3>
     cda:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <rfid_status>
     cde:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <servo_pos>
     ce2:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <send_val>
	}
     ce6:	0b cf       	rjmp	.-490    	; 0xafe <main+0x72>

00000ce8 <UART_Init>:
		} else {  // Si es un caracter normal
		if (rxIndex < BUFFER_SIZE - 1) {  // Guardar solo hasta 3 digitos
			rxBuffer[rxIndex++] = receivedChar;
		}
	}
}
     ce8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     cec:	87 e6       	ldi	r24, 0x67	; 103
     cee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     cf2:	88 e9       	ldi	r24, 0x98	; 152
     cf4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     cf8:	86 e0       	ldi	r24, 0x06	; 6
     cfa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     cfe:	08 95       	ret

00000d00 <UART_Read>:
     d00:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     d04:	88 23       	and	r24, r24
     d06:	1c f4       	brge	.+6      	; 0xd0e <UART_Read+0xe>
     d08:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     d0c:	08 95       	ret
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	08 95       	ret

00000d12 <UART_Char>:
     d12:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     d16:	95 ff       	sbrs	r25, 5
     d18:	fc cf       	rjmp	.-8      	; 0xd12 <UART_Char>
     d1a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     d1e:	08 95       	ret

00000d20 <UART_Write>:
     d20:	ac 01       	movw	r20, r24
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	07 c0       	rjmp	.+14     	; 0xd34 <UART_Write+0x14>
     d26:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     d2a:	95 ff       	sbrs	r25, 5
     d2c:	fc cf       	rjmp	.-8      	; 0xd26 <UART_Write+0x6>
     d2e:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     d32:	2f 5f       	subi	r18, 0xFF	; 255
     d34:	fa 01       	movw	r30, r20
     d36:	e2 0f       	add	r30, r18
     d38:	f1 1d       	adc	r31, r1
     d3a:	30 81       	ld	r19, Z
     d3c:	31 11       	cpse	r19, r1
     d3e:	f3 cf       	rjmp	.-26     	; 0xd26 <UART_Write+0x6>
     d40:	08 95       	ret

00000d42 <float_to_stringu>:
		while(!(UCSR0A&(1<<UDRE0)));
		UDR0 = texto[i];
	}
}

void float_to_stringu(float num, char *buffer, uint8_t decimales) {
     d42:	8f 92       	push	r8
     d44:	9f 92       	push	r9
     d46:	af 92       	push	r10
     d48:	bf 92       	push	r11
     d4a:	cf 92       	push	r12
     d4c:	df 92       	push	r13
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	2a 97       	sbiw	r28, 0x0a	; 10
     d60:	0f b6       	in	r0, 0x3f	; 63
     d62:	f8 94       	cli
     d64:	de bf       	out	0x3e, r29	; 62
     d66:	0f be       	out	0x3f, r0	; 63
     d68:	cd bf       	out	0x3d, r28	; 61
     d6a:	4b 01       	movw	r8, r22
     d6c:	5c 01       	movw	r10, r24
     d6e:	7a 01       	movw	r14, r20
	int parte_entera = (int)num;  // parte entera
     d70:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fixsfsi>
     d74:	8b 01       	movw	r16, r22
	int parte_decimal = (int)((num - parte_entera) * 100);  // parte decimal
     d76:	07 2e       	mov	r0, r23
     d78:	00 0c       	add	r0, r0
     d7a:	88 0b       	sbc	r24, r24
     d7c:	99 0b       	sbc	r25, r25
     d7e:	0e 94 fe 07 	call	0xffc	; 0xffc <__floatsisf>
     d82:	9b 01       	movw	r18, r22
     d84:	ac 01       	movw	r20, r24
     d86:	c5 01       	movw	r24, r10
     d88:	b4 01       	movw	r22, r8
     d8a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__subsf3>
     d8e:	20 e0       	ldi	r18, 0x00	; 0
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	48 ec       	ldi	r20, 0xC8	; 200
     d94:	52 e4       	ldi	r21, 0x42	; 66
     d96:	0e 94 8f 08 	call	0x111e	; 0x111e <__mulsf3>
     d9a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <__fixsfsi>
     d9e:	6b 01       	movw	r12, r22
	
	if (parte_decimal < 0) parte_decimal *= -1;  // no negativo
     da0:	77 23       	and	r23, r23
     da2:	24 f4       	brge	.+8      	; 0xdac <float_to_stringu+0x6a>
     da4:	cc 24       	eor	r12, r12
     da6:	dd 24       	eor	r13, r13
     da8:	c6 1a       	sub	r12, r22
     daa:	d7 0a       	sbc	r13, r23

	// Convertir a caracteres
	int i = 0;
	if (parte_entera == 0) {
     dac:	01 15       	cp	r16, r1
     dae:	11 05       	cpc	r17, r1
     db0:	c1 f4       	brne	.+48     	; 0xde2 <float_to_stringu+0xa0>
		buffer[i++] = '0';
     db2:	80 e3       	ldi	r24, 0x30	; 48
     db4:	d7 01       	movw	r26, r14
     db6:	8c 93       	st	X, r24
     db8:	e1 e0       	ldi	r30, 0x01	; 1
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	2c c0       	rjmp	.+88     	; 0xe16 <float_to_stringu+0xd4>
		} else {
		int temp = parte_entera;
		char temp_buffer[10];
		int j = 0;
		while (temp > 0) {  // Extraer digitos
			temp_buffer[j++] = (temp % 10) + '0';
     dbe:	c8 01       	movw	r24, r16
     dc0:	6a e0       	ldi	r22, 0x0A	; 10
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	0e 94 20 09 	call	0x1240	; 0x1240 <__divmodhi4>
     dc8:	e1 e0       	ldi	r30, 0x01	; 1
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	ec 0f       	add	r30, r28
     dce:	fd 1f       	adc	r31, r29
     dd0:	e2 0f       	add	r30, r18
     dd2:	f3 1f       	adc	r31, r19
     dd4:	80 5d       	subi	r24, 0xD0	; 208
     dd6:	80 83       	st	Z, r24
			temp /= 10;
     dd8:	06 2f       	mov	r16, r22
     dda:	17 2f       	mov	r17, r23
		} else {
		int temp = parte_entera;
		char temp_buffer[10];
		int j = 0;
		while (temp > 0) {  // Extraer digitos
			temp_buffer[j++] = (temp % 10) + '0';
     ddc:	2f 5f       	subi	r18, 0xFF	; 255
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <float_to_stringu+0xa4>
     de2:	20 e0       	ldi	r18, 0x00	; 0
     de4:	30 e0       	ldi	r19, 0x00	; 0
		buffer[i++] = '0';
		} else {
		int temp = parte_entera;
		char temp_buffer[10];
		int j = 0;
		while (temp > 0) {  // Extraer digitos
     de6:	10 16       	cp	r1, r16
     de8:	11 06       	cpc	r1, r17
     dea:	4c f3       	brlt	.-46     	; 0xdbe <float_to_stringu+0x7c>
     dec:	e0 e0       	ldi	r30, 0x00	; 0
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	0f c0       	rjmp	.+30     	; 0xe10 <float_to_stringu+0xce>
			temp_buffer[j++] = (temp % 10) + '0';
			temp /= 10;
		}
		while (j > 0) {  // Invertir los digitos
			buffer[i++] = temp_buffer[--j];
     df2:	c7 01       	movw	r24, r14
     df4:	8e 0f       	add	r24, r30
     df6:	9f 1f       	adc	r25, r31
     df8:	21 50       	subi	r18, 0x01	; 1
     dfa:	31 09       	sbc	r19, r1
     dfc:	a1 e0       	ldi	r26, 0x01	; 1
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	ac 0f       	add	r26, r28
     e02:	bd 1f       	adc	r27, r29
     e04:	a2 0f       	add	r26, r18
     e06:	b3 1f       	adc	r27, r19
     e08:	4c 91       	ld	r20, X
     e0a:	dc 01       	movw	r26, r24
     e0c:	4c 93       	st	X, r20
     e0e:	31 96       	adiw	r30, 0x01	; 1
		int j = 0;
		while (temp > 0) {  // Extraer digitos
			temp_buffer[j++] = (temp % 10) + '0';
			temp /= 10;
		}
		while (j > 0) {  // Invertir los digitos
     e10:	12 16       	cp	r1, r18
     e12:	13 06       	cpc	r1, r19
     e14:	74 f3       	brlt	.-36     	; 0xdf2 <float_to_stringu+0xb0>
			buffer[i++] = temp_buffer[--j];
		}
	}

	// punto decimal
	buffer[i++] = '.';
     e16:	8f 01       	movw	r16, r30
     e18:	0f 5f       	subi	r16, 0xFF	; 255
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	d7 01       	movw	r26, r14
     e1e:	ae 0f       	add	r26, r30
     e20:	bf 1f       	adc	r27, r31
     e22:	8e e2       	ldi	r24, 0x2E	; 46
     e24:	8c 93       	st	X, r24

	// decimal a caracteres
	buffer[i++] = (parte_decimal / 10) + '0';
     e26:	9f 01       	movw	r18, r30
     e28:	2e 5f       	subi	r18, 0xFE	; 254
     e2a:	3f 4f       	sbci	r19, 0xFF	; 255
     e2c:	0e 0d       	add	r16, r14
     e2e:	1f 1d       	adc	r17, r15
     e30:	c6 01       	movw	r24, r12
     e32:	6a e0       	ldi	r22, 0x0A	; 10
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	0e 94 20 09 	call	0x1240	; 0x1240 <__divmodhi4>
     e3a:	60 5d       	subi	r22, 0xD0	; 208
     e3c:	d8 01       	movw	r26, r16
     e3e:	6c 93       	st	X, r22
	buffer[i++] = (parte_decimal % 10) + '0';
     e40:	33 96       	adiw	r30, 0x03	; 3
     e42:	d7 01       	movw	r26, r14
     e44:	a2 0f       	add	r26, r18
     e46:	b3 1f       	adc	r27, r19
     e48:	80 5d       	subi	r24, 0xD0	; 208
     e4a:	8c 93       	st	X, r24

	
	buffer[i] = '\0';
     e4c:	ee 0d       	add	r30, r14
     e4e:	ff 1d       	adc	r31, r15
     e50:	10 82       	st	Z, r1
}
     e52:	2a 96       	adiw	r28, 0x0a	; 10
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	9f 90       	pop	r9
     e74:	8f 90       	pop	r8
     e76:	08 95       	ret

00000e78 <UART_Var>:

void UART_Var(float v){
     e78:	cf 93       	push	r28
     e7a:	df 93       	push	r29
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	2a 97       	sbiw	r28, 0x0a	; 10
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	float_to_stringu(v, str, 2);
     e8c:	22 e0       	ldi	r18, 0x02	; 2
     e8e:	ae 01       	movw	r20, r28
     e90:	4f 5f       	subi	r20, 0xFF	; 255
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
     e94:	0e 94 a1 06 	call	0xd42	; 0xd42 <float_to_stringu>
	UART_Write(str);
     e98:	ce 01       	movw	r24, r28
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_Write>
}
     ea0:	2a 96       	adiw	r28, 0x0a	; 10
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	08 95       	ret

00000eb2 <__subsf3>:
     eb2:	50 58       	subi	r21, 0x80	; 128

00000eb4 <__addsf3>:
     eb4:	bb 27       	eor	r27, r27
     eb6:	aa 27       	eor	r26, r26
     eb8:	0e 94 71 07 	call	0xee2	; 0xee2 <__addsf3x>
     ebc:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__fp_round>
     ec0:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_pscA>
     ec4:	38 f0       	brcs	.+14     	; 0xed4 <__addsf3+0x20>
     ec6:	0e 94 49 08 	call	0x1092	; 0x1092 <__fp_pscB>
     eca:	20 f0       	brcs	.+8      	; 0xed4 <__addsf3+0x20>
     ecc:	39 f4       	brne	.+14     	; 0xedc <__addsf3+0x28>
     ece:	9f 3f       	cpi	r25, 0xFF	; 255
     ed0:	19 f4       	brne	.+6      	; 0xed8 <__addsf3+0x24>
     ed2:	26 f4       	brtc	.+8      	; 0xedc <__addsf3+0x28>
     ed4:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__fp_nan>
     ed8:	0e f4       	brtc	.+2      	; 0xedc <__addsf3+0x28>
     eda:	e0 95       	com	r30
     edc:	e7 fb       	bst	r30, 7
     ede:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__fp_inf>

00000ee2 <__addsf3x>:
     ee2:	e9 2f       	mov	r30, r25
     ee4:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__fp_split3>
     ee8:	58 f3       	brcs	.-42     	; 0xec0 <__addsf3+0xc>
     eea:	ba 17       	cp	r27, r26
     eec:	62 07       	cpc	r22, r18
     eee:	73 07       	cpc	r23, r19
     ef0:	84 07       	cpc	r24, r20
     ef2:	95 07       	cpc	r25, r21
     ef4:	20 f0       	brcs	.+8      	; 0xefe <__addsf3x+0x1c>
     ef6:	79 f4       	brne	.+30     	; 0xf16 <__addsf3x+0x34>
     ef8:	a6 f5       	brtc	.+104    	; 0xf62 <__addsf3x+0x80>
     efa:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_zero>
     efe:	0e f4       	brtc	.+2      	; 0xf02 <__addsf3x+0x20>
     f00:	e0 95       	com	r30
     f02:	0b 2e       	mov	r0, r27
     f04:	ba 2f       	mov	r27, r26
     f06:	a0 2d       	mov	r26, r0
     f08:	0b 01       	movw	r0, r22
     f0a:	b9 01       	movw	r22, r18
     f0c:	90 01       	movw	r18, r0
     f0e:	0c 01       	movw	r0, r24
     f10:	ca 01       	movw	r24, r20
     f12:	a0 01       	movw	r20, r0
     f14:	11 24       	eor	r1, r1
     f16:	ff 27       	eor	r31, r31
     f18:	59 1b       	sub	r21, r25
     f1a:	99 f0       	breq	.+38     	; 0xf42 <__addsf3x+0x60>
     f1c:	59 3f       	cpi	r21, 0xF9	; 249
     f1e:	50 f4       	brcc	.+20     	; 0xf34 <__addsf3x+0x52>
     f20:	50 3e       	cpi	r21, 0xE0	; 224
     f22:	68 f1       	brcs	.+90     	; 0xf7e <__addsf3x+0x9c>
     f24:	1a 16       	cp	r1, r26
     f26:	f0 40       	sbci	r31, 0x00	; 0
     f28:	a2 2f       	mov	r26, r18
     f2a:	23 2f       	mov	r18, r19
     f2c:	34 2f       	mov	r19, r20
     f2e:	44 27       	eor	r20, r20
     f30:	58 5f       	subi	r21, 0xF8	; 248
     f32:	f3 cf       	rjmp	.-26     	; 0xf1a <__addsf3x+0x38>
     f34:	46 95       	lsr	r20
     f36:	37 95       	ror	r19
     f38:	27 95       	ror	r18
     f3a:	a7 95       	ror	r26
     f3c:	f0 40       	sbci	r31, 0x00	; 0
     f3e:	53 95       	inc	r21
     f40:	c9 f7       	brne	.-14     	; 0xf34 <__addsf3x+0x52>
     f42:	7e f4       	brtc	.+30     	; 0xf62 <__addsf3x+0x80>
     f44:	1f 16       	cp	r1, r31
     f46:	ba 0b       	sbc	r27, r26
     f48:	62 0b       	sbc	r22, r18
     f4a:	73 0b       	sbc	r23, r19
     f4c:	84 0b       	sbc	r24, r20
     f4e:	ba f0       	brmi	.+46     	; 0xf7e <__addsf3x+0x9c>
     f50:	91 50       	subi	r25, 0x01	; 1
     f52:	a1 f0       	breq	.+40     	; 0xf7c <__addsf3x+0x9a>
     f54:	ff 0f       	add	r31, r31
     f56:	bb 1f       	adc	r27, r27
     f58:	66 1f       	adc	r22, r22
     f5a:	77 1f       	adc	r23, r23
     f5c:	88 1f       	adc	r24, r24
     f5e:	c2 f7       	brpl	.-16     	; 0xf50 <__addsf3x+0x6e>
     f60:	0e c0       	rjmp	.+28     	; 0xf7e <__addsf3x+0x9c>
     f62:	ba 0f       	add	r27, r26
     f64:	62 1f       	adc	r22, r18
     f66:	73 1f       	adc	r23, r19
     f68:	84 1f       	adc	r24, r20
     f6a:	48 f4       	brcc	.+18     	; 0xf7e <__addsf3x+0x9c>
     f6c:	87 95       	ror	r24
     f6e:	77 95       	ror	r23
     f70:	67 95       	ror	r22
     f72:	b7 95       	ror	r27
     f74:	f7 95       	ror	r31
     f76:	9e 3f       	cpi	r25, 0xFE	; 254
     f78:	08 f0       	brcs	.+2      	; 0xf7c <__addsf3x+0x9a>
     f7a:	b0 cf       	rjmp	.-160    	; 0xedc <__addsf3+0x28>
     f7c:	93 95       	inc	r25
     f7e:	88 0f       	add	r24, r24
     f80:	08 f0       	brcs	.+2      	; 0xf84 <__addsf3x+0xa2>
     f82:	99 27       	eor	r25, r25
     f84:	ee 0f       	add	r30, r30
     f86:	97 95       	ror	r25
     f88:	87 95       	ror	r24
     f8a:	08 95       	ret

00000f8c <__fixsfsi>:
     f8c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__fixunssfsi>
     f90:	68 94       	set
     f92:	b1 11       	cpse	r27, r1
     f94:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__fp_szero>
     f98:	08 95       	ret

00000f9a <__fixunssfsi>:
     f9a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__fp_splitA>
     f9e:	88 f0       	brcs	.+34     	; 0xfc2 <__fixunssfsi+0x28>
     fa0:	9f 57       	subi	r25, 0x7F	; 127
     fa2:	98 f0       	brcs	.+38     	; 0xfca <__fixunssfsi+0x30>
     fa4:	b9 2f       	mov	r27, r25
     fa6:	99 27       	eor	r25, r25
     fa8:	b7 51       	subi	r27, 0x17	; 23
     faa:	b0 f0       	brcs	.+44     	; 0xfd8 <__fixunssfsi+0x3e>
     fac:	e1 f0       	breq	.+56     	; 0xfe6 <__fixunssfsi+0x4c>
     fae:	66 0f       	add	r22, r22
     fb0:	77 1f       	adc	r23, r23
     fb2:	88 1f       	adc	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	1a f0       	brmi	.+6      	; 0xfbe <__fixunssfsi+0x24>
     fb8:	ba 95       	dec	r27
     fba:	c9 f7       	brne	.-14     	; 0xfae <__fixunssfsi+0x14>
     fbc:	14 c0       	rjmp	.+40     	; 0xfe6 <__fixunssfsi+0x4c>
     fbe:	b1 30       	cpi	r27, 0x01	; 1
     fc0:	91 f0       	breq	.+36     	; 0xfe6 <__fixunssfsi+0x4c>
     fc2:	0e 94 83 08 	call	0x1106	; 0x1106 <__fp_zero>
     fc6:	b1 e0       	ldi	r27, 0x01	; 1
     fc8:	08 95       	ret
     fca:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__fp_zero>
     fce:	67 2f       	mov	r22, r23
     fd0:	78 2f       	mov	r23, r24
     fd2:	88 27       	eor	r24, r24
     fd4:	b8 5f       	subi	r27, 0xF8	; 248
     fd6:	39 f0       	breq	.+14     	; 0xfe6 <__fixunssfsi+0x4c>
     fd8:	b9 3f       	cpi	r27, 0xF9	; 249
     fda:	cc f3       	brlt	.-14     	; 0xfce <__fixunssfsi+0x34>
     fdc:	86 95       	lsr	r24
     fde:	77 95       	ror	r23
     fe0:	67 95       	ror	r22
     fe2:	b3 95       	inc	r27
     fe4:	d9 f7       	brne	.-10     	; 0xfdc <__fixunssfsi+0x42>
     fe6:	3e f4       	brtc	.+14     	; 0xff6 <__fixunssfsi+0x5c>
     fe8:	90 95       	com	r25
     fea:	80 95       	com	r24
     fec:	70 95       	com	r23
     fee:	61 95       	neg	r22
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	8f 4f       	sbci	r24, 0xFF	; 255
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	08 95       	ret

00000ff8 <__floatunsisf>:
     ff8:	e8 94       	clt
     ffa:	09 c0       	rjmp	.+18     	; 0x100e <__floatsisf+0x12>

00000ffc <__floatsisf>:
     ffc:	97 fb       	bst	r25, 7
     ffe:	3e f4       	brtc	.+14     	; 0x100e <__floatsisf+0x12>
    1000:	90 95       	com	r25
    1002:	80 95       	com	r24
    1004:	70 95       	com	r23
    1006:	61 95       	neg	r22
    1008:	7f 4f       	sbci	r23, 0xFF	; 255
    100a:	8f 4f       	sbci	r24, 0xFF	; 255
    100c:	9f 4f       	sbci	r25, 0xFF	; 255
    100e:	99 23       	and	r25, r25
    1010:	a9 f0       	breq	.+42     	; 0x103c <__floatsisf+0x40>
    1012:	f9 2f       	mov	r31, r25
    1014:	96 e9       	ldi	r25, 0x96	; 150
    1016:	bb 27       	eor	r27, r27
    1018:	93 95       	inc	r25
    101a:	f6 95       	lsr	r31
    101c:	87 95       	ror	r24
    101e:	77 95       	ror	r23
    1020:	67 95       	ror	r22
    1022:	b7 95       	ror	r27
    1024:	f1 11       	cpse	r31, r1
    1026:	f8 cf       	rjmp	.-16     	; 0x1018 <__floatsisf+0x1c>
    1028:	fa f4       	brpl	.+62     	; 0x1068 <__floatsisf+0x6c>
    102a:	bb 0f       	add	r27, r27
    102c:	11 f4       	brne	.+4      	; 0x1032 <__floatsisf+0x36>
    102e:	60 ff       	sbrs	r22, 0
    1030:	1b c0       	rjmp	.+54     	; 0x1068 <__floatsisf+0x6c>
    1032:	6f 5f       	subi	r22, 0xFF	; 255
    1034:	7f 4f       	sbci	r23, 0xFF	; 255
    1036:	8f 4f       	sbci	r24, 0xFF	; 255
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	16 c0       	rjmp	.+44     	; 0x1068 <__floatsisf+0x6c>
    103c:	88 23       	and	r24, r24
    103e:	11 f0       	breq	.+4      	; 0x1044 <__floatsisf+0x48>
    1040:	96 e9       	ldi	r25, 0x96	; 150
    1042:	11 c0       	rjmp	.+34     	; 0x1066 <__floatsisf+0x6a>
    1044:	77 23       	and	r23, r23
    1046:	21 f0       	breq	.+8      	; 0x1050 <__floatsisf+0x54>
    1048:	9e e8       	ldi	r25, 0x8E	; 142
    104a:	87 2f       	mov	r24, r23
    104c:	76 2f       	mov	r23, r22
    104e:	05 c0       	rjmp	.+10     	; 0x105a <__floatsisf+0x5e>
    1050:	66 23       	and	r22, r22
    1052:	71 f0       	breq	.+28     	; 0x1070 <__floatsisf+0x74>
    1054:	96 e8       	ldi	r25, 0x86	; 134
    1056:	86 2f       	mov	r24, r22
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	2a f0       	brmi	.+10     	; 0x1068 <__floatsisf+0x6c>
    105e:	9a 95       	dec	r25
    1060:	66 0f       	add	r22, r22
    1062:	77 1f       	adc	r23, r23
    1064:	88 1f       	adc	r24, r24
    1066:	da f7       	brpl	.-10     	; 0x105e <__floatsisf+0x62>
    1068:	88 0f       	add	r24, r24
    106a:	96 95       	lsr	r25
    106c:	87 95       	ror	r24
    106e:	97 f9       	bld	r25, 7
    1070:	08 95       	ret

00001072 <__fp_inf>:
    1072:	97 f9       	bld	r25, 7
    1074:	9f 67       	ori	r25, 0x7F	; 127
    1076:	80 e8       	ldi	r24, 0x80	; 128
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	08 95       	ret

0000107e <__fp_nan>:
    107e:	9f ef       	ldi	r25, 0xFF	; 255
    1080:	80 ec       	ldi	r24, 0xC0	; 192
    1082:	08 95       	ret

00001084 <__fp_pscA>:
    1084:	00 24       	eor	r0, r0
    1086:	0a 94       	dec	r0
    1088:	16 16       	cp	r1, r22
    108a:	17 06       	cpc	r1, r23
    108c:	18 06       	cpc	r1, r24
    108e:	09 06       	cpc	r0, r25
    1090:	08 95       	ret

00001092 <__fp_pscB>:
    1092:	00 24       	eor	r0, r0
    1094:	0a 94       	dec	r0
    1096:	12 16       	cp	r1, r18
    1098:	13 06       	cpc	r1, r19
    109a:	14 06       	cpc	r1, r20
    109c:	05 06       	cpc	r0, r21
    109e:	08 95       	ret

000010a0 <__fp_round>:
    10a0:	09 2e       	mov	r0, r25
    10a2:	03 94       	inc	r0
    10a4:	00 0c       	add	r0, r0
    10a6:	11 f4       	brne	.+4      	; 0x10ac <__fp_round+0xc>
    10a8:	88 23       	and	r24, r24
    10aa:	52 f0       	brmi	.+20     	; 0x10c0 <__fp_round+0x20>
    10ac:	bb 0f       	add	r27, r27
    10ae:	40 f4       	brcc	.+16     	; 0x10c0 <__fp_round+0x20>
    10b0:	bf 2b       	or	r27, r31
    10b2:	11 f4       	brne	.+4      	; 0x10b8 <__fp_round+0x18>
    10b4:	60 ff       	sbrs	r22, 0
    10b6:	04 c0       	rjmp	.+8      	; 0x10c0 <__fp_round+0x20>
    10b8:	6f 5f       	subi	r22, 0xFF	; 255
    10ba:	7f 4f       	sbci	r23, 0xFF	; 255
    10bc:	8f 4f       	sbci	r24, 0xFF	; 255
    10be:	9f 4f       	sbci	r25, 0xFF	; 255
    10c0:	08 95       	ret

000010c2 <__fp_split3>:
    10c2:	57 fd       	sbrc	r21, 7
    10c4:	90 58       	subi	r25, 0x80	; 128
    10c6:	44 0f       	add	r20, r20
    10c8:	55 1f       	adc	r21, r21
    10ca:	59 f0       	breq	.+22     	; 0x10e2 <__fp_splitA+0x10>
    10cc:	5f 3f       	cpi	r21, 0xFF	; 255
    10ce:	71 f0       	breq	.+28     	; 0x10ec <__fp_splitA+0x1a>
    10d0:	47 95       	ror	r20

000010d2 <__fp_splitA>:
    10d2:	88 0f       	add	r24, r24
    10d4:	97 fb       	bst	r25, 7
    10d6:	99 1f       	adc	r25, r25
    10d8:	61 f0       	breq	.+24     	; 0x10f2 <__fp_splitA+0x20>
    10da:	9f 3f       	cpi	r25, 0xFF	; 255
    10dc:	79 f0       	breq	.+30     	; 0x10fc <__fp_splitA+0x2a>
    10de:	87 95       	ror	r24
    10e0:	08 95       	ret
    10e2:	12 16       	cp	r1, r18
    10e4:	13 06       	cpc	r1, r19
    10e6:	14 06       	cpc	r1, r20
    10e8:	55 1f       	adc	r21, r21
    10ea:	f2 cf       	rjmp	.-28     	; 0x10d0 <__fp_split3+0xe>
    10ec:	46 95       	lsr	r20
    10ee:	f1 df       	rcall	.-30     	; 0x10d2 <__fp_splitA>
    10f0:	08 c0       	rjmp	.+16     	; 0x1102 <__fp_splitA+0x30>
    10f2:	16 16       	cp	r1, r22
    10f4:	17 06       	cpc	r1, r23
    10f6:	18 06       	cpc	r1, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	f1 cf       	rjmp	.-30     	; 0x10de <__fp_splitA+0xc>
    10fc:	86 95       	lsr	r24
    10fe:	71 05       	cpc	r23, r1
    1100:	61 05       	cpc	r22, r1
    1102:	08 94       	sec
    1104:	08 95       	ret

00001106 <__fp_zero>:
    1106:	e8 94       	clt

00001108 <__fp_szero>:
    1108:	bb 27       	eor	r27, r27
    110a:	66 27       	eor	r22, r22
    110c:	77 27       	eor	r23, r23
    110e:	cb 01       	movw	r24, r22
    1110:	97 f9       	bld	r25, 7
    1112:	08 95       	ret

00001114 <__gesf2>:
    1114:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <__fp_cmp>
    1118:	08 f4       	brcc	.+2      	; 0x111c <__gesf2+0x8>
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	08 95       	ret

0000111e <__mulsf3>:
    111e:	0e 94 a2 08 	call	0x1144	; 0x1144 <__mulsf3x>
    1122:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__fp_round>
    1126:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_pscA>
    112a:	38 f0       	brcs	.+14     	; 0x113a <__mulsf3+0x1c>
    112c:	0e 94 49 08 	call	0x1092	; 0x1092 <__fp_pscB>
    1130:	20 f0       	brcs	.+8      	; 0x113a <__mulsf3+0x1c>
    1132:	95 23       	and	r25, r21
    1134:	11 f0       	breq	.+4      	; 0x113a <__mulsf3+0x1c>
    1136:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__fp_inf>
    113a:	0c 94 3f 08 	jmp	0x107e	; 0x107e <__fp_nan>
    113e:	11 24       	eor	r1, r1
    1140:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__fp_szero>

00001144 <__mulsf3x>:
    1144:	0e 94 61 08 	call	0x10c2	; 0x10c2 <__fp_split3>
    1148:	70 f3       	brcs	.-36     	; 0x1126 <__mulsf3+0x8>

0000114a <__mulsf3_pse>:
    114a:	95 9f       	mul	r25, r21
    114c:	c1 f3       	breq	.-16     	; 0x113e <__mulsf3+0x20>
    114e:	95 0f       	add	r25, r21
    1150:	50 e0       	ldi	r21, 0x00	; 0
    1152:	55 1f       	adc	r21, r21
    1154:	62 9f       	mul	r22, r18
    1156:	f0 01       	movw	r30, r0
    1158:	72 9f       	mul	r23, r18
    115a:	bb 27       	eor	r27, r27
    115c:	f0 0d       	add	r31, r0
    115e:	b1 1d       	adc	r27, r1
    1160:	63 9f       	mul	r22, r19
    1162:	aa 27       	eor	r26, r26
    1164:	f0 0d       	add	r31, r0
    1166:	b1 1d       	adc	r27, r1
    1168:	aa 1f       	adc	r26, r26
    116a:	64 9f       	mul	r22, r20
    116c:	66 27       	eor	r22, r22
    116e:	b0 0d       	add	r27, r0
    1170:	a1 1d       	adc	r26, r1
    1172:	66 1f       	adc	r22, r22
    1174:	82 9f       	mul	r24, r18
    1176:	22 27       	eor	r18, r18
    1178:	b0 0d       	add	r27, r0
    117a:	a1 1d       	adc	r26, r1
    117c:	62 1f       	adc	r22, r18
    117e:	73 9f       	mul	r23, r19
    1180:	b0 0d       	add	r27, r0
    1182:	a1 1d       	adc	r26, r1
    1184:	62 1f       	adc	r22, r18
    1186:	83 9f       	mul	r24, r19
    1188:	a0 0d       	add	r26, r0
    118a:	61 1d       	adc	r22, r1
    118c:	22 1f       	adc	r18, r18
    118e:	74 9f       	mul	r23, r20
    1190:	33 27       	eor	r19, r19
    1192:	a0 0d       	add	r26, r0
    1194:	61 1d       	adc	r22, r1
    1196:	23 1f       	adc	r18, r19
    1198:	84 9f       	mul	r24, r20
    119a:	60 0d       	add	r22, r0
    119c:	21 1d       	adc	r18, r1
    119e:	82 2f       	mov	r24, r18
    11a0:	76 2f       	mov	r23, r22
    11a2:	6a 2f       	mov	r22, r26
    11a4:	11 24       	eor	r1, r1
    11a6:	9f 57       	subi	r25, 0x7F	; 127
    11a8:	50 40       	sbci	r21, 0x00	; 0
    11aa:	9a f0       	brmi	.+38     	; 0x11d2 <__mulsf3_pse+0x88>
    11ac:	f1 f0       	breq	.+60     	; 0x11ea <__mulsf3_pse+0xa0>
    11ae:	88 23       	and	r24, r24
    11b0:	4a f0       	brmi	.+18     	; 0x11c4 <__mulsf3_pse+0x7a>
    11b2:	ee 0f       	add	r30, r30
    11b4:	ff 1f       	adc	r31, r31
    11b6:	bb 1f       	adc	r27, r27
    11b8:	66 1f       	adc	r22, r22
    11ba:	77 1f       	adc	r23, r23
    11bc:	88 1f       	adc	r24, r24
    11be:	91 50       	subi	r25, 0x01	; 1
    11c0:	50 40       	sbci	r21, 0x00	; 0
    11c2:	a9 f7       	brne	.-22     	; 0x11ae <__mulsf3_pse+0x64>
    11c4:	9e 3f       	cpi	r25, 0xFE	; 254
    11c6:	51 05       	cpc	r21, r1
    11c8:	80 f0       	brcs	.+32     	; 0x11ea <__mulsf3_pse+0xa0>
    11ca:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__fp_inf>
    11ce:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__fp_szero>
    11d2:	5f 3f       	cpi	r21, 0xFF	; 255
    11d4:	e4 f3       	brlt	.-8      	; 0x11ce <__mulsf3_pse+0x84>
    11d6:	98 3e       	cpi	r25, 0xE8	; 232
    11d8:	d4 f3       	brlt	.-12     	; 0x11ce <__mulsf3_pse+0x84>
    11da:	86 95       	lsr	r24
    11dc:	77 95       	ror	r23
    11de:	67 95       	ror	r22
    11e0:	b7 95       	ror	r27
    11e2:	f7 95       	ror	r31
    11e4:	e7 95       	ror	r30
    11e6:	9f 5f       	subi	r25, 0xFF	; 255
    11e8:	c1 f7       	brne	.-16     	; 0x11da <__mulsf3_pse+0x90>
    11ea:	fe 2b       	or	r31, r30
    11ec:	88 0f       	add	r24, r24
    11ee:	91 1d       	adc	r25, r1
    11f0:	96 95       	lsr	r25
    11f2:	87 95       	ror	r24
    11f4:	97 f9       	bld	r25, 7
    11f6:	08 95       	ret

000011f8 <__fp_cmp>:
    11f8:	99 0f       	add	r25, r25
    11fa:	00 08       	sbc	r0, r0
    11fc:	55 0f       	add	r21, r21
    11fe:	aa 0b       	sbc	r26, r26
    1200:	e0 e8       	ldi	r30, 0x80	; 128
    1202:	fe ef       	ldi	r31, 0xFE	; 254
    1204:	16 16       	cp	r1, r22
    1206:	17 06       	cpc	r1, r23
    1208:	e8 07       	cpc	r30, r24
    120a:	f9 07       	cpc	r31, r25
    120c:	c0 f0       	brcs	.+48     	; 0x123e <__fp_cmp+0x46>
    120e:	12 16       	cp	r1, r18
    1210:	13 06       	cpc	r1, r19
    1212:	e4 07       	cpc	r30, r20
    1214:	f5 07       	cpc	r31, r21
    1216:	98 f0       	brcs	.+38     	; 0x123e <__fp_cmp+0x46>
    1218:	62 1b       	sub	r22, r18
    121a:	73 0b       	sbc	r23, r19
    121c:	84 0b       	sbc	r24, r20
    121e:	95 0b       	sbc	r25, r21
    1220:	39 f4       	brne	.+14     	; 0x1230 <__fp_cmp+0x38>
    1222:	0a 26       	eor	r0, r26
    1224:	61 f0       	breq	.+24     	; 0x123e <__fp_cmp+0x46>
    1226:	23 2b       	or	r18, r19
    1228:	24 2b       	or	r18, r20
    122a:	25 2b       	or	r18, r21
    122c:	21 f4       	brne	.+8      	; 0x1236 <__fp_cmp+0x3e>
    122e:	08 95       	ret
    1230:	0a 26       	eor	r0, r26
    1232:	09 f4       	brne	.+2      	; 0x1236 <__fp_cmp+0x3e>
    1234:	a1 40       	sbci	r26, 0x01	; 1
    1236:	a6 95       	lsr	r26
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	81 1d       	adc	r24, r1
    123c:	81 1d       	adc	r24, r1
    123e:	08 95       	ret

00001240 <__divmodhi4>:
    1240:	97 fb       	bst	r25, 7
    1242:	07 2e       	mov	r0, r23
    1244:	16 f4       	brtc	.+4      	; 0x124a <__divmodhi4+0xa>
    1246:	00 94       	com	r0
    1248:	07 d0       	rcall	.+14     	; 0x1258 <__divmodhi4_neg1>
    124a:	77 fd       	sbrc	r23, 7
    124c:	09 d0       	rcall	.+18     	; 0x1260 <__divmodhi4_neg2>
    124e:	0e 94 56 09 	call	0x12ac	; 0x12ac <__udivmodhi4>
    1252:	07 fc       	sbrc	r0, 7
    1254:	05 d0       	rcall	.+10     	; 0x1260 <__divmodhi4_neg2>
    1256:	3e f4       	brtc	.+14     	; 0x1266 <__divmodhi4_exit>

00001258 <__divmodhi4_neg1>:
    1258:	90 95       	com	r25
    125a:	81 95       	neg	r24
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	08 95       	ret

00001260 <__divmodhi4_neg2>:
    1260:	70 95       	com	r23
    1262:	61 95       	neg	r22
    1264:	7f 4f       	sbci	r23, 0xFF	; 255

00001266 <__divmodhi4_exit>:
    1266:	08 95       	ret

00001268 <__udivmodsi4>:
    1268:	a1 e2       	ldi	r26, 0x21	; 33
    126a:	1a 2e       	mov	r1, r26
    126c:	aa 1b       	sub	r26, r26
    126e:	bb 1b       	sub	r27, r27
    1270:	fd 01       	movw	r30, r26
    1272:	0d c0       	rjmp	.+26     	; 0x128e <__udivmodsi4_ep>

00001274 <__udivmodsi4_loop>:
    1274:	aa 1f       	adc	r26, r26
    1276:	bb 1f       	adc	r27, r27
    1278:	ee 1f       	adc	r30, r30
    127a:	ff 1f       	adc	r31, r31
    127c:	a2 17       	cp	r26, r18
    127e:	b3 07       	cpc	r27, r19
    1280:	e4 07       	cpc	r30, r20
    1282:	f5 07       	cpc	r31, r21
    1284:	20 f0       	brcs	.+8      	; 0x128e <__udivmodsi4_ep>
    1286:	a2 1b       	sub	r26, r18
    1288:	b3 0b       	sbc	r27, r19
    128a:	e4 0b       	sbc	r30, r20
    128c:	f5 0b       	sbc	r31, r21

0000128e <__udivmodsi4_ep>:
    128e:	66 1f       	adc	r22, r22
    1290:	77 1f       	adc	r23, r23
    1292:	88 1f       	adc	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	1a 94       	dec	r1
    1298:	69 f7       	brne	.-38     	; 0x1274 <__udivmodsi4_loop>
    129a:	60 95       	com	r22
    129c:	70 95       	com	r23
    129e:	80 95       	com	r24
    12a0:	90 95       	com	r25
    12a2:	9b 01       	movw	r18, r22
    12a4:	ac 01       	movw	r20, r24
    12a6:	bd 01       	movw	r22, r26
    12a8:	cf 01       	movw	r24, r30
    12aa:	08 95       	ret

000012ac <__udivmodhi4>:
    12ac:	aa 1b       	sub	r26, r26
    12ae:	bb 1b       	sub	r27, r27
    12b0:	51 e1       	ldi	r21, 0x11	; 17
    12b2:	07 c0       	rjmp	.+14     	; 0x12c2 <__udivmodhi4_ep>

000012b4 <__udivmodhi4_loop>:
    12b4:	aa 1f       	adc	r26, r26
    12b6:	bb 1f       	adc	r27, r27
    12b8:	a6 17       	cp	r26, r22
    12ba:	b7 07       	cpc	r27, r23
    12bc:	10 f0       	brcs	.+4      	; 0x12c2 <__udivmodhi4_ep>
    12be:	a6 1b       	sub	r26, r22
    12c0:	b7 0b       	sbc	r27, r23

000012c2 <__udivmodhi4_ep>:
    12c2:	88 1f       	adc	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	5a 95       	dec	r21
    12c8:	a9 f7       	brne	.-22     	; 0x12b4 <__udivmodhi4_loop>
    12ca:	80 95       	com	r24
    12cc:	90 95       	com	r25
    12ce:	bc 01       	movw	r22, r24
    12d0:	cd 01       	movw	r24, r26
    12d2:	08 95       	ret

000012d4 <__itoa_ncheck>:
    12d4:	bb 27       	eor	r27, r27
    12d6:	4a 30       	cpi	r20, 0x0A	; 10
    12d8:	31 f4       	brne	.+12     	; 0x12e6 <__itoa_ncheck+0x12>
    12da:	99 23       	and	r25, r25
    12dc:	22 f4       	brpl	.+8      	; 0x12e6 <__itoa_ncheck+0x12>
    12de:	bd e2       	ldi	r27, 0x2D	; 45
    12e0:	90 95       	com	r25
    12e2:	81 95       	neg	r24
    12e4:	9f 4f       	sbci	r25, 0xFF	; 255
    12e6:	0c 94 76 09 	jmp	0x12ec	; 0x12ec <__utoa_common>

000012ea <__utoa_ncheck>:
    12ea:	bb 27       	eor	r27, r27

000012ec <__utoa_common>:
    12ec:	fb 01       	movw	r30, r22
    12ee:	55 27       	eor	r21, r21
    12f0:	aa 27       	eor	r26, r26
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	aa 1f       	adc	r26, r26
    12f8:	a4 17       	cp	r26, r20
    12fa:	10 f0       	brcs	.+4      	; 0x1300 <__utoa_common+0x14>
    12fc:	a4 1b       	sub	r26, r20
    12fe:	83 95       	inc	r24
    1300:	50 51       	subi	r21, 0x10	; 16
    1302:	b9 f7       	brne	.-18     	; 0x12f2 <__utoa_common+0x6>
    1304:	a0 5d       	subi	r26, 0xD0	; 208
    1306:	aa 33       	cpi	r26, 0x3A	; 58
    1308:	08 f0       	brcs	.+2      	; 0x130c <__utoa_common+0x20>
    130a:	a9 5d       	subi	r26, 0xD9	; 217
    130c:	a1 93       	st	Z+, r26
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	79 f7       	brne	.-34     	; 0x12f0 <__utoa_common+0x4>
    1312:	b1 11       	cpse	r27, r1
    1314:	b1 93       	st	Z+, r27
    1316:	11 92       	st	Z+, r1
    1318:	cb 01       	movw	r24, r22
    131a:	0c 94 8f 09 	jmp	0x131e	; 0x131e <strrev>

0000131e <strrev>:
    131e:	dc 01       	movw	r26, r24
    1320:	fc 01       	movw	r30, r24
    1322:	67 2f       	mov	r22, r23
    1324:	71 91       	ld	r23, Z+
    1326:	77 23       	and	r23, r23
    1328:	e1 f7       	brne	.-8      	; 0x1322 <strrev+0x4>
    132a:	32 97       	sbiw	r30, 0x02	; 2
    132c:	04 c0       	rjmp	.+8      	; 0x1336 <strrev+0x18>
    132e:	7c 91       	ld	r23, X
    1330:	6d 93       	st	X+, r22
    1332:	70 83       	st	Z, r23
    1334:	62 91       	ld	r22, -Z
    1336:	ae 17       	cp	r26, r30
    1338:	bf 07       	cpc	r27, r31
    133a:	c8 f3       	brcs	.-14     	; 0x132e <strrev+0x10>
    133c:	08 95       	ret

0000133e <_exit>:
    133e:	f8 94       	cli

00001340 <__stop_program>:
    1340:	ff cf       	rjmp	.-2      	; 0x1340 <__stop_program>
