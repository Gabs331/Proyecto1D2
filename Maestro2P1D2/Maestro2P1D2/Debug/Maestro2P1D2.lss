
Maestro2P1D2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000072  00800100  000018ee  00001982  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800172  00800172  000019f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000023ee  00000000  00000000  00001bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d26  00000000  00000000  00003fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000118a  00000000  00000000  00004ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000460  00000000  00000000  00005e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000759  00000000  00000000  000062d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001bda  00000000  00000000  00006a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00008607  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
       c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      24:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      58:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      5c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      60:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      64:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 00       	.word	0x0008	; ????
      92:	00 00       	nop
      94:	be 92       	st	-X, r11
      96:	24 49       	sbci	r18, 0x94	; 148
      98:	12 3e       	cpi	r17, 0xE2	; 226
      9a:	ab aa       	std	Y+51, r10	; 0x33
      9c:	aa 2a       	or	r10, r26
      9e:	be cd       	rjmp	.-1156   	; 0xfffffc1c <__eeprom_end+0xff7efc1c>
      a0:	cc cc       	rjmp	.-1640   	; 0xfffffa3a <__eeprom_end+0xff7efa3a>
      a2:	4c 3e       	cpi	r20, 0xEC	; 236
      a4:	00 00       	nop
      a6:	00 80       	ld	r0, Z
      a8:	be ab       	std	Y+54, r27	; 0x36
      aa:	aa aa       	std	Y+50, r10	; 0x32
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	bf 00       	.word	0x00bf	; ????
      b4:	00 00       	nop
      b6:	80 3f       	cpi	r24, 0xF0	; 240
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	00 08       	sbc	r0, r0
      be:	41 78       	andi	r20, 0x81	; 129
      c0:	d3 bb       	out	0x13, r29	; 19
      c2:	43 87       	std	Z+11, r20	; 0x0b
      c4:	d1 13       	cpse	r29, r17
      c6:	3d 19       	sub	r19, r13
      c8:	0e 3c       	cpi	r16, 0xCE	; 206
      ca:	c3 bd       	out	0x23, r28	; 35
      cc:	42 82       	std	Z+2, r4	; 0x02
      ce:	ad 2b       	or	r26, r29
      d0:	3e 68       	ori	r19, 0x8E	; 142
      d2:	ec 82       	std	Y+4, r14	; 0x04
      d4:	76 be       	out	0x36, r7	; 54
      d6:	d9 8f       	std	Y+25, r29	; 0x19
      d8:	e1 a9       	ldd	r30, Z+49	; 0x31
      da:	3e 4c       	sbci	r19, 0xCE	; 206
      dc:	80 ef       	ldi	r24, 0xF0	; 240
      de:	ff be       	out	0x3f, r15	; 63
      e0:	01 c4       	rjmp	.+2050   	; 0x8e4 <read_UART+0xbe>
      e2:	ff 7f       	andi	r31, 0xFF	; 255
      e4:	3f 00       	.word	0x003f	; ????
      e6:	00 00       	nop
	...

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf ef       	ldi	r28, 0xFF	; 255
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	11 e0       	ldi	r17, 0x01	; 1
      f8:	a0 e0       	ldi	r26, 0x00	; 0
      fa:	b1 e0       	ldi	r27, 0x01	; 1
      fc:	ee ee       	ldi	r30, 0xEE	; 238
      fe:	f8 e1       	ldi	r31, 0x18	; 24
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	a2 37       	cpi	r26, 0x72	; 114
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	21 e0       	ldi	r18, 0x01	; 1
     10e:	a2 e7       	ldi	r26, 0x72	; 114
     110:	b1 e0       	ldi	r27, 0x01	; 1
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	ae 3a       	cpi	r26, 0xAE	; 174
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <main>
     120:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <I2C_Master_Init>:
#include "I2C.h"

//***************************************************************
// Inicializa el módulo I2C en modo Maestro
//***************************************************************
void I2C_Master_Init(unsigned long SCL_Clock, uint8_t Prescaler) {
     128:	0f 93       	push	r16
     12a:	1f 93       	push	r17
     12c:	cf 93       	push	r28
     12e:	8b 01       	movw	r16, r22
     130:	9c 01       	movw	r18, r24
     132:	c4 2f       	mov	r28, r20

    DDRC &= ~((1 << DDC4) | (1 << DDC5));  // Configura los pines SDA y SCL como entradas
     134:	87 b1       	in	r24, 0x07	; 7
     136:	8f 7c       	andi	r24, 0xCF	; 207
     138:	87 b9       	out	0x07, r24	; 7

    switch (Prescaler) {
     13a:	44 30       	cpi	r20, 0x04	; 4
     13c:	79 f0       	breq	.+30     	; 0x15c <I2C_Master_Init+0x34>
     13e:	18 f4       	brcc	.+6      	; 0x146 <I2C_Master_Init+0x1e>
     140:	41 30       	cpi	r20, 0x01	; 1
     142:	31 f0       	breq	.+12     	; 0x150 <I2C_Master_Init+0x28>
     144:	23 c0       	rjmp	.+70     	; 0x18c <I2C_Master_Init+0x64>
     146:	40 31       	cpi	r20, 0x10	; 16
     148:	91 f0       	breq	.+36     	; 0x16e <I2C_Master_Init+0x46>
     14a:	40 34       	cpi	r20, 0x40	; 64
     14c:	c9 f0       	breq	.+50     	; 0x180 <I2C_Master_Init+0x58>
     14e:	1e c0       	rjmp	.+60     	; 0x18c <I2C_Master_Init+0x64>
        case 1:
            TWSR &= ~((1 << TWPS1) | (1 << TWPS0));
     150:	e9 eb       	ldi	r30, 0xB9	; 185
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	8c 7f       	andi	r24, 0xFC	; 252
     158:	80 83       	st	Z, r24
            break;
     15a:	1e c0       	rjmp	.+60     	; 0x198 <I2C_Master_Init+0x70>
        case 4:
            TWSR &= ~(1 << TWPS1);
     15c:	e9 eb       	ldi	r30, 0xB9	; 185
     15e:	f0 e0       	ldi	r31, 0x00	; 0
     160:	80 81       	ld	r24, Z
     162:	8d 7f       	andi	r24, 0xFD	; 253
     164:	80 83       	st	Z, r24
            TWSR |= (1 << TWPS0);
     166:	80 81       	ld	r24, Z
     168:	81 60       	ori	r24, 0x01	; 1
     16a:	80 83       	st	Z, r24
            break;
     16c:	15 c0       	rjmp	.+42     	; 0x198 <I2C_Master_Init+0x70>
        case 16:
            TWSR &= ~(1 << TWPS0);
     16e:	e9 eb       	ldi	r30, 0xB9	; 185
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	8e 7f       	andi	r24, 0xFE	; 254
     176:	80 83       	st	Z, r24
            TWSR |= (1 << TWPS1);
     178:	80 81       	ld	r24, Z
     17a:	82 60       	ori	r24, 0x02	; 2
     17c:	80 83       	st	Z, r24
            break;
     17e:	0c c0       	rjmp	.+24     	; 0x198 <I2C_Master_Init+0x70>
        case 64:
            TWSR |= (1 << TWPS1) | (1 << TWPS0);
     180:	e9 eb       	ldi	r30, 0xB9	; 185
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	80 81       	ld	r24, Z
     186:	83 60       	ori	r24, 0x03	; 3
     188:	80 83       	st	Z, r24
            break;
     18a:	06 c0       	rjmp	.+12     	; 0x198 <I2C_Master_Init+0x70>
		default:
			TWSR &= ~((1 << TWPS1) | (1 << TWPS0)); // Valor por defecto si no coincide
     18c:	e9 eb       	ldi	r30, 0xB9	; 185
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	8c 7f       	andi	r24, 0xFC	; 252
     194:	80 83       	st	Z, r24
			Prescaler = 1;
     196:	c1 e0       	ldi	r28, 0x01	; 1
			break;
    }

	TWBR = (((16000000) / SCL_Clock) - 16) / (2 * Prescaler); // Cálculo del registro de velocidad. Se recomienda >10
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	74 e2       	ldi	r23, 0x24	; 36
     19c:	84 ef       	ldi	r24, 0xF4	; 244
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	a9 01       	movw	r20, r18
     1a2:	98 01       	movw	r18, r16
     1a4:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__udivmodsi4>
     1a8:	ca 01       	movw	r24, r20
     1aa:	b9 01       	movw	r22, r18
     1ac:	60 51       	subi	r22, 0x10	; 16
     1ae:	71 09       	sbc	r23, r1
     1b0:	81 09       	sbc	r24, r1
     1b2:	91 09       	sbc	r25, r1
     1b4:	4c 2f       	mov	r20, r28
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	9a 01       	movw	r18, r20
     1ba:	22 0f       	add	r18, r18
     1bc:	33 1f       	adc	r19, r19
     1be:	03 2e       	mov	r0, r19
     1c0:	00 0c       	add	r0, r0
     1c2:	44 0b       	sbc	r20, r20
     1c4:	55 0b       	sbc	r21, r21
     1c6:	0e 94 0a 0c 	call	0x1814	; 0x1814 <__udivmodsi4>
     1ca:	20 93 b8 00 	sts	0x00B8, r18	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR |= (1 << TWEN); // Habilita el módulo TWI
     1ce:	ec eb       	ldi	r30, 0xBC	; 188
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	84 60       	ori	r24, 0x04	; 4
     1d6:	80 83       	st	Z, r24
}
     1d8:	cf 91       	pop	r28
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	08 95       	ret

000001e0 <I2C_Master_Start>:
// Genera la condición de inicio (START) en la comunicación I2C
//************************************************************************
void I2C_Master_Start(void){
    uint8_t estado;
    
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN); // Solicita START
     1e0:	84 ea       	ldi	r24, 0xA4	; 164
     1e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1 << TWINT))); // Espera a que se complete la operación
     1e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1ea:	88 23       	and	r24, r24
     1ec:	e4 f7       	brge	.-8      	; 0x1e6 <I2C_Master_Start+0x6>
}
     1ee:	08 95       	ret

000001f0 <I2C_Master_Stop>:

//************************************************************************
// Genera la condición de parada (STOP) en la comunicación I2C
//************************************************************************
void I2C_Master_Stop(void){
    TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWSTO); // Envia STOP para finalizar transmisión
     1f0:	84 e9       	ldi	r24, 0x94	; 148
     1f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1f6:	08 95       	ret

000001f8 <I2C_Master_Write>:
// Retorna 1 si el esclavo respondió con ACK, o el estado si hubo error
//************************************************************************
uint8_t I2C_Master_Write(uint8_t dato){
    uint8_t estado;

    TWDR = dato;  // Carga el dato a enviar
     1f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1 << TWEN) | (1 << TWINT); // Inicia transmisión
     1fc:	84 e8       	ldi	r24, 0x84	; 132
     1fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

    while (!(TWCR & (1 << TWINT))); // Espera a que termine
     202:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     206:	88 23       	and	r24, r24
     208:	e4 f7       	brge	.-8      	; 0x202 <I2C_Master_Write+0xa>

    estado = TWSR & 0xF8; // Lee el estado de TWI
     20a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     20e:	88 7f       	andi	r24, 0xF8	; 248

    // Comprueba si se recibió ACK tras SLA+W, SLA+R o DATO
    if (estado == 0x18 || estado == 0x28 || estado == 0x40){
     210:	88 31       	cpi	r24, 0x18	; 24
     212:	31 f0       	breq	.+12     	; 0x220 <I2C_Master_Write+0x28>
     214:	88 32       	cpi	r24, 0x28	; 40
     216:	31 f0       	breq	.+12     	; 0x224 <I2C_Master_Write+0x2c>
     218:	80 34       	cpi	r24, 0x40	; 64
     21a:	29 f4       	brne	.+10     	; 0x226 <I2C_Master_Write+0x2e>
        return 1; // OK
     21c:	81 e0       	ldi	r24, 0x01	; 1
     21e:	08 95       	ret
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	08 95       	ret
     224:	81 e0       	ldi	r24, 0x01	; 1
    } else {
        return estado; // Error
    }
}
     226:	08 95       	ret

00000228 <I2C_Master_Read>:

//************************************************************************
// Lee un dato enviado por el esclavo al maestro
// Parámetro 'ack': 1 para enviar ACK después de recibir, 0 para NACK
//************************************************************************
uint8_t I2C_Master_Read(uint8_t *buffer, uint8_t ack){
     228:	dc 01       	movw	r26, r24
    uint8_t estado;
    
    if (ack){
     22a:	66 23       	and	r22, r22
     22c:	31 f0       	breq	.+12     	; 0x23a <I2C_Master_Read+0x12>
        TWCR |= (1 << TWEA);  // Configura para enviar ACK
     22e:	ec eb       	ldi	r30, 0xBC	; 188
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	90 81       	ld	r25, Z
     234:	90 64       	ori	r25, 0x40	; 64
     236:	90 83       	st	Z, r25
     238:	05 c0       	rjmp	.+10     	; 0x244 <I2C_Master_Read+0x1c>
    } else {
        TWCR &= ~(1 << TWEA); // Configura para no enviar ACK
     23a:	ec eb       	ldi	r30, 0xBC	; 188
     23c:	f0 e0       	ldi	r31, 0x00	; 0
     23e:	90 81       	ld	r25, Z
     240:	9f 7b       	andi	r25, 0xBF	; 191
     242:	90 83       	st	Z, r25
    }

    TWCR |= (1 << TWINT); // Inicia recepción
     244:	ec eb       	ldi	r30, 0xBC	; 188
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	90 81       	ld	r25, Z
     24a:	90 68       	ori	r25, 0x80	; 128
     24c:	90 83       	st	Z, r25
    while (!(TWCR & (1 << TWINT))); // Espera a que finalice
     24e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     252:	99 23       	and	r25, r25
     254:	e4 f7       	brge	.-8      	; 0x24e <I2C_Master_Read+0x26>

    estado = TWSR & 0xF8; // Lee el estado actual
     256:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     25a:	98 7f       	andi	r25, 0xF8	; 248

    // Verifica si se recibió el dato correctamente
    if (estado == 0x58 || estado == 0x50){
     25c:	98 35       	cpi	r25, 0x58	; 88
     25e:	11 f0       	breq	.+4      	; 0x264 <I2C_Master_Read+0x3c>
     260:	90 35       	cpi	r25, 0x50	; 80
     262:	29 f4       	brne	.+10     	; 0x26e <I2C_Master_Read+0x46>
        *buffer = TWDR; // Guarda el dato recibido
     264:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     268:	8c 93       	st	X, r24
        return 1; // OK
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	08 95       	ret
    } else {
        return estado; // Error
     26e:	89 2f       	mov	r24, r25
    }
}
     270:	08 95       	ret

00000272 <LCD8_PORT>:
	_delay_ms(10);
}

// Envía una máscara de 10 bits al puerto para controlar RS, E y D7...D0
void LCD8_PORT(uint16_t mascara) {
	for (int i = 0; i < 10; i++) {
     272:	40 e0       	ldi	r20, 0x00	; 0
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	5d c0       	rjmp	.+186    	; 0x332 <LCD8_PORT+0xc0>
		if (mascara & (1 << i)) {
     278:	21 e0       	ldi	r18, 0x01	; 1
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	04 2e       	mov	r0, r20
     27e:	02 c0       	rjmp	.+4      	; 0x284 <LCD8_PORT+0x12>
     280:	22 0f       	add	r18, r18
     282:	33 1f       	adc	r19, r19
     284:	0a 94       	dec	r0
     286:	e2 f7       	brpl	.-8      	; 0x280 <LCD8_PORT+0xe>
     288:	28 23       	and	r18, r24
     28a:	39 23       	and	r19, r25
     28c:	23 2b       	or	r18, r19
     28e:	39 f1       	breq	.+78     	; 0x2de <LCD8_PORT+0x6c>
			uint8_t pin = pines[i];
     290:	fa 01       	movw	r30, r20
     292:	e0 50       	subi	r30, 0x00	; 0
     294:	ff 4f       	sbci	r31, 0xFF	; 255
     296:	20 81       	ld	r18, Z
			if (pin >= 8 && pin <= 13) {
     298:	38 ef       	ldi	r19, 0xF8	; 248
     29a:	32 0f       	add	r19, r18
     29c:	36 30       	cpi	r19, 0x06	; 6
     29e:	80 f4       	brcc	.+32     	; 0x2c0 <LCD8_PORT+0x4e>
				PORTB |= (1 << (pin - 8));
     2a0:	e5 b1       	in	r30, 0x05	; 5
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	28 50       	subi	r18, 0x08	; 8
     2a6:	31 09       	sbc	r19, r1
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	db 01       	movw	r26, r22
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <LCD8_PORT+0x42>
     2b0:	aa 0f       	add	r26, r26
     2b2:	bb 1f       	adc	r27, r27
     2b4:	2a 95       	dec	r18
     2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <LCD8_PORT+0x3e>
     2b8:	9d 01       	movw	r18, r26
     2ba:	2e 2b       	or	r18, r30
     2bc:	25 b9       	out	0x05, r18	; 5
     2be:	37 c0       	rjmp	.+110    	; 0x32e <LCD8_PORT+0xbc>
			} else if (pin <= 7) {
     2c0:	28 30       	cpi	r18, 0x08	; 8
     2c2:	a8 f5       	brcc	.+106    	; 0x32e <LCD8_PORT+0xbc>
				PORTD |= (1 << pin);
     2c4:	eb b1       	in	r30, 0x0b	; 11
     2c6:	61 e0       	ldi	r22, 0x01	; 1
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	db 01       	movw	r26, r22
     2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <LCD8_PORT+0x60>
     2ce:	aa 0f       	add	r26, r26
     2d0:	bb 1f       	adc	r27, r27
     2d2:	2a 95       	dec	r18
     2d4:	e2 f7       	brpl	.-8      	; 0x2ce <LCD8_PORT+0x5c>
     2d6:	9d 01       	movw	r18, r26
     2d8:	2e 2b       	or	r18, r30
     2da:	2b b9       	out	0x0b, r18	; 11
     2dc:	28 c0       	rjmp	.+80     	; 0x32e <LCD8_PORT+0xbc>
			}
		} else {
			uint8_t pin = pines[i];
     2de:	fa 01       	movw	r30, r20
     2e0:	e0 50       	subi	r30, 0x00	; 0
     2e2:	ff 4f       	sbci	r31, 0xFF	; 255
     2e4:	20 81       	ld	r18, Z
			if (pin >= 8 && pin <= 13) {
     2e6:	38 ef       	ldi	r19, 0xF8	; 248
     2e8:	32 0f       	add	r19, r18
     2ea:	36 30       	cpi	r19, 0x06	; 6
     2ec:	88 f4       	brcc	.+34     	; 0x310 <LCD8_PORT+0x9e>
				PORTB &= ~(1 << (pin - 8));
     2ee:	e5 b1       	in	r30, 0x05	; 5
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	28 50       	subi	r18, 0x08	; 8
     2f4:	31 09       	sbc	r19, r1
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	db 01       	movw	r26, r22
     2fc:	02 c0       	rjmp	.+4      	; 0x302 <LCD8_PORT+0x90>
     2fe:	aa 0f       	add	r26, r26
     300:	bb 1f       	adc	r27, r27
     302:	2a 95       	dec	r18
     304:	e2 f7       	brpl	.-8      	; 0x2fe <LCD8_PORT+0x8c>
     306:	9d 01       	movw	r18, r26
     308:	20 95       	com	r18
     30a:	2e 23       	and	r18, r30
     30c:	25 b9       	out	0x05, r18	; 5
     30e:	0f c0       	rjmp	.+30     	; 0x32e <LCD8_PORT+0xbc>
			} else if (pin <= 7) {
     310:	28 30       	cpi	r18, 0x08	; 8
     312:	68 f4       	brcc	.+26     	; 0x32e <LCD8_PORT+0xbc>
				PORTD &= ~(1 << pin);
     314:	eb b1       	in	r30, 0x0b	; 11
     316:	61 e0       	ldi	r22, 0x01	; 1
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	db 01       	movw	r26, r22
     31c:	02 c0       	rjmp	.+4      	; 0x322 <LCD8_PORT+0xb0>
     31e:	aa 0f       	add	r26, r26
     320:	bb 1f       	adc	r27, r27
     322:	2a 95       	dec	r18
     324:	e2 f7       	brpl	.-8      	; 0x31e <LCD8_PORT+0xac>
     326:	9d 01       	movw	r18, r26
     328:	20 95       	com	r18
     32a:	2e 23       	and	r18, r30
     32c:	2b b9       	out	0x0b, r18	; 11
	_delay_ms(10);
}

// Envía una máscara de 10 bits al puerto para controlar RS, E y D7...D0
void LCD8_PORT(uint16_t mascara) {
	for (int i = 0; i < 10; i++) {
     32e:	4f 5f       	subi	r20, 0xFF	; 255
     330:	5f 4f       	sbci	r21, 0xFF	; 255
     332:	4a 30       	cpi	r20, 0x0A	; 10
     334:	51 05       	cpc	r21, r1
     336:	0c f4       	brge	.+2      	; 0x33a <LCD8_PORT+0xc8>
     338:	9f cf       	rjmp	.-194    	; 0x278 <LCD8_PORT+0x6>
			}
		}
	}

	// Pulso de habilitación (Enable)
	PORTD |= (1 << 4);
     33a:	8b b1       	in	r24, 0x0b	; 11
     33c:	80 61       	ori	r24, 0x10	; 16
     33e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     340:	8f ed       	ldi	r24, 0xDF	; 223
     342:	9e e2       	ldi	r25, 0x2E	; 46
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	f1 f7       	brne	.-4      	; 0x344 <LCD8_PORT+0xd2>
     348:	00 c0       	rjmp	.+0      	; 0x34a <LCD8_PORT+0xd8>
     34a:	00 00       	nop
	_delay_ms(3);
	PORTD &= ~(1 << 4);
     34c:	8b b1       	in	r24, 0x0b	; 11
     34e:	8f 7e       	andi	r24, 0xEF	; 239
     350:	8b b9       	out	0x0b, r24	; 11
     352:	08 95       	ret

00000354 <initLCD8>:
// Mapeo de pines: RS, E, D7...D0
unsigned char pines[10] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

void initLCD8(void) {
	// Configura los pines como salida
	for (uint8_t i = 0; i < 10; i++) {
     354:	20 e0       	ldi	r18, 0x00	; 0
     356:	27 c0       	rjmp	.+78     	; 0x3a6 <initLCD8+0x52>
		uint8_t pin = pines[i];
     358:	e2 2f       	mov	r30, r18
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	e0 50       	subi	r30, 0x00	; 0
     35e:	ff 4f       	sbci	r31, 0xFF	; 255
     360:	80 81       	ld	r24, Z
		if (pin >= 8 && pin <= 13) {
     362:	98 ef       	ldi	r25, 0xF8	; 248
     364:	98 0f       	add	r25, r24
     366:	96 30       	cpi	r25, 0x06	; 6
     368:	78 f4       	brcc	.+30     	; 0x388 <initLCD8+0x34>
			// Pines en PORTB
			DDRB |= (1 << (pin - 8));
     36a:	34 b1       	in	r19, 0x04	; 4
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	08 97       	sbiw	r24, 0x08	; 8
     370:	41 e0       	ldi	r20, 0x01	; 1
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	ba 01       	movw	r22, r20
     376:	02 c0       	rjmp	.+4      	; 0x37c <initLCD8+0x28>
     378:	66 0f       	add	r22, r22
     37a:	77 1f       	adc	r23, r23
     37c:	8a 95       	dec	r24
     37e:	e2 f7       	brpl	.-8      	; 0x378 <initLCD8+0x24>
     380:	cb 01       	movw	r24, r22
     382:	83 2b       	or	r24, r19
     384:	84 b9       	out	0x04, r24	; 4
     386:	0e c0       	rjmp	.+28     	; 0x3a4 <initLCD8+0x50>
		} else if (pin <= 7) {
     388:	88 30       	cpi	r24, 0x08	; 8
     38a:	60 f4       	brcc	.+24     	; 0x3a4 <initLCD8+0x50>
			// Pines en PORTD
			DDRD |= (1 << pin);
     38c:	3a b1       	in	r19, 0x0a	; 10
     38e:	41 e0       	ldi	r20, 0x01	; 1
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	ba 01       	movw	r22, r20
     394:	02 c0       	rjmp	.+4      	; 0x39a <initLCD8+0x46>
     396:	66 0f       	add	r22, r22
     398:	77 1f       	adc	r23, r23
     39a:	8a 95       	dec	r24
     39c:	e2 f7       	brpl	.-8      	; 0x396 <initLCD8+0x42>
     39e:	cb 01       	movw	r24, r22
     3a0:	83 2b       	or	r24, r19
     3a2:	8a b9       	out	0x0a, r24	; 10
// Mapeo de pines: RS, E, D7...D0
unsigned char pines[10] = {3, 4, 5, 6, 7, 8, 9, 10, 11, 12};

void initLCD8(void) {
	// Configura los pines como salida
	for (uint8_t i = 0; i < 10; i++) {
     3a4:	2f 5f       	subi	r18, 0xFF	; 255
     3a6:	2a 30       	cpi	r18, 0x0A	; 10
     3a8:	b8 f2       	brcs	.-82     	; 0x358 <initLCD8+0x4>
     3aa:	8f e5       	ldi	r24, 0x5F	; 95
     3ac:	9a ee       	ldi	r25, 0xEA	; 234
     3ae:	01 97       	sbiw	r24, 0x01	; 1
     3b0:	f1 f7       	brne	.-4      	; 0x3ae <initLCD8+0x5a>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <initLCD8+0x60>
     3b4:	00 00       	nop
		}
	}
	_delay_ms(15);

	// Configuración inicial del LCD (Function Set)
	LCD8_PORT(0b0011100000);
     3b6:	80 ee       	ldi	r24, 0xE0	; 224
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 39 01 	call	0x272	; 0x272 <LCD8_PORT>
     3be:	8f e1       	ldi	r24, 0x1F	; 31
     3c0:	9e e4       	ldi	r25, 0x4E	; 78
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	f1 f7       	brne	.-4      	; 0x3c2 <initLCD8+0x6e>
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <initLCD8+0x74>
     3c8:	00 00       	nop
	_delay_ms(5);

	// Encendido del display (Display ON/OFF)
	LCD8_PORT(0b0000110000);
     3ca:	80 e3       	ldi	r24, 0x30	; 48
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 39 01 	call	0x272	; 0x272 <LCD8_PORT>
     3d2:	8f e3       	ldi	r24, 0x3F	; 63
     3d4:	9c e9       	ldi	r25, 0x9C	; 156
     3d6:	01 97       	sbiw	r24, 0x01	; 1
     3d8:	f1 f7       	brne	.-4      	; 0x3d6 <initLCD8+0x82>
     3da:	00 c0       	rjmp	.+0      	; 0x3dc <initLCD8+0x88>
     3dc:	00 00       	nop
	_delay_ms(10);

	// Modo de entrada (Entry Mode)
	LCD8_PORT(0b0000011000);
     3de:	88 e1       	ldi	r24, 0x18	; 24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 39 01 	call	0x272	; 0x272 <LCD8_PORT>
     3e6:	8f e3       	ldi	r24, 0x3F	; 63
     3e8:	9c e9       	ldi	r25, 0x9C	; 156
     3ea:	01 97       	sbiw	r24, 0x01	; 1
     3ec:	f1 f7       	brne	.-4      	; 0x3ea <initLCD8+0x96>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <initLCD8+0x9c>
     3f0:	00 00       	nop
	_delay_ms(10);

	// Limpia el contenido del LCD
	LCD8_PORT(0b0000000100);
     3f2:	84 e0       	ldi	r24, 0x04	; 4
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 39 01 	call	0x272	; 0x272 <LCD8_PORT>
     3fa:	8f e3       	ldi	r24, 0x3F	; 63
     3fc:	9c e9       	ldi	r25, 0x9C	; 156
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <initLCD8+0xaa>
     402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     404:	00 00       	nop
     406:	08 95       	ret

00000408 <LCD8_CMD>:
	PORTD &= ~(1 << 4);
}

// Envía una instrucción (comando) al LCD usando una máscara de 10 bits
void LCD8_CMD(uint16_t mascara) {
	for (int i = 0; i < 10; i++) {
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	50 e0       	ldi	r21, 0x00	; 0
     40c:	5d c0       	rjmp	.+186    	; 0x4c8 <LCD8_CMD+0xc0>
		if (mascara & (1 << i)) {
     40e:	21 e0       	ldi	r18, 0x01	; 1
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	04 2e       	mov	r0, r20
     414:	02 c0       	rjmp	.+4      	; 0x41a <LCD8_CMD+0x12>
     416:	22 0f       	add	r18, r18
     418:	33 1f       	adc	r19, r19
     41a:	0a 94       	dec	r0
     41c:	e2 f7       	brpl	.-8      	; 0x416 <LCD8_CMD+0xe>
     41e:	28 23       	and	r18, r24
     420:	39 23       	and	r19, r25
     422:	23 2b       	or	r18, r19
     424:	39 f1       	breq	.+78     	; 0x474 <LCD8_CMD+0x6c>
			uint8_t pin = pines[i];
     426:	fa 01       	movw	r30, r20
     428:	e0 50       	subi	r30, 0x00	; 0
     42a:	ff 4f       	sbci	r31, 0xFF	; 255
     42c:	20 81       	ld	r18, Z
			if (pin >= 8 && pin <= 13) {
     42e:	38 ef       	ldi	r19, 0xF8	; 248
     430:	32 0f       	add	r19, r18
     432:	36 30       	cpi	r19, 0x06	; 6
     434:	80 f4       	brcc	.+32     	; 0x456 <LCD8_CMD+0x4e>
				PORTB |= (1 << (pin - 8));
     436:	e5 b1       	in	r30, 0x05	; 5
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	28 50       	subi	r18, 0x08	; 8
     43c:	31 09       	sbc	r19, r1
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	db 01       	movw	r26, r22
     444:	02 c0       	rjmp	.+4      	; 0x44a <LCD8_CMD+0x42>
     446:	aa 0f       	add	r26, r26
     448:	bb 1f       	adc	r27, r27
     44a:	2a 95       	dec	r18
     44c:	e2 f7       	brpl	.-8      	; 0x446 <LCD8_CMD+0x3e>
     44e:	9d 01       	movw	r18, r26
     450:	2e 2b       	or	r18, r30
     452:	25 b9       	out	0x05, r18	; 5
     454:	37 c0       	rjmp	.+110    	; 0x4c4 <LCD8_CMD+0xbc>
			} else if (pin <= 7) {
     456:	28 30       	cpi	r18, 0x08	; 8
     458:	a8 f5       	brcc	.+106    	; 0x4c4 <LCD8_CMD+0xbc>
				PORTD |= (1 << pin);
     45a:	eb b1       	in	r30, 0x0b	; 11
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	db 01       	movw	r26, r22
     462:	02 c0       	rjmp	.+4      	; 0x468 <LCD8_CMD+0x60>
     464:	aa 0f       	add	r26, r26
     466:	bb 1f       	adc	r27, r27
     468:	2a 95       	dec	r18
     46a:	e2 f7       	brpl	.-8      	; 0x464 <LCD8_CMD+0x5c>
     46c:	9d 01       	movw	r18, r26
     46e:	2e 2b       	or	r18, r30
     470:	2b b9       	out	0x0b, r18	; 11
     472:	28 c0       	rjmp	.+80     	; 0x4c4 <LCD8_CMD+0xbc>
			}
		} else {
			uint8_t pin = pines[i];
     474:	fa 01       	movw	r30, r20
     476:	e0 50       	subi	r30, 0x00	; 0
     478:	ff 4f       	sbci	r31, 0xFF	; 255
     47a:	20 81       	ld	r18, Z
			if (pin >= 8 && pin <= 13) {
     47c:	38 ef       	ldi	r19, 0xF8	; 248
     47e:	32 0f       	add	r19, r18
     480:	36 30       	cpi	r19, 0x06	; 6
     482:	88 f4       	brcc	.+34     	; 0x4a6 <LCD8_CMD+0x9e>
				PORTB &= ~(1 << (pin - 8));
     484:	e5 b1       	in	r30, 0x05	; 5
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	28 50       	subi	r18, 0x08	; 8
     48a:	31 09       	sbc	r19, r1
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	db 01       	movw	r26, r22
     492:	02 c0       	rjmp	.+4      	; 0x498 <LCD8_CMD+0x90>
     494:	aa 0f       	add	r26, r26
     496:	bb 1f       	adc	r27, r27
     498:	2a 95       	dec	r18
     49a:	e2 f7       	brpl	.-8      	; 0x494 <LCD8_CMD+0x8c>
     49c:	9d 01       	movw	r18, r26
     49e:	20 95       	com	r18
     4a0:	2e 23       	and	r18, r30
     4a2:	25 b9       	out	0x05, r18	; 5
     4a4:	0f c0       	rjmp	.+30     	; 0x4c4 <LCD8_CMD+0xbc>
			} else if (pin <= 7) {
     4a6:	28 30       	cpi	r18, 0x08	; 8
     4a8:	68 f4       	brcc	.+26     	; 0x4c4 <LCD8_CMD+0xbc>
				PORTD &= ~(1 << pin);
     4aa:	eb b1       	in	r30, 0x0b	; 11
     4ac:	61 e0       	ldi	r22, 0x01	; 1
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	db 01       	movw	r26, r22
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <LCD8_CMD+0xb0>
     4b4:	aa 0f       	add	r26, r26
     4b6:	bb 1f       	adc	r27, r27
     4b8:	2a 95       	dec	r18
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <LCD8_CMD+0xac>
     4bc:	9d 01       	movw	r18, r26
     4be:	20 95       	com	r18
     4c0:	2e 23       	and	r18, r30
     4c2:	2b b9       	out	0x0b, r18	; 11
	PORTD &= ~(1 << 4);
}

// Envía una instrucción (comando) al LCD usando una máscara de 10 bits
void LCD8_CMD(uint16_t mascara) {
	for (int i = 0; i < 10; i++) {
     4c4:	4f 5f       	subi	r20, 0xFF	; 255
     4c6:	5f 4f       	sbci	r21, 0xFF	; 255
     4c8:	4a 30       	cpi	r20, 0x0A	; 10
     4ca:	51 05       	cpc	r21, r1
     4cc:	0c f4       	brge	.+2      	; 0x4d0 <LCD8_CMD+0xc8>
     4ce:	9f cf       	rjmp	.-194    	; 0x40e <LCD8_CMD+0x6>
     4d0:	8f ed       	ldi	r24, 0xDF	; 223
     4d2:	9e e2       	ldi	r25, 0x2E	; 46
     4d4:	01 97       	sbiw	r24, 0x01	; 1
     4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LCD8_CMD+0xcc>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <LCD8_CMD+0xd2>
     4da:	00 00       	nop
			}
		}
	}
	// Pulso de habilitación
	_delay_ms(3);
	PORTD |= (1 << 4);
     4dc:	8b b1       	in	r24, 0x0b	; 11
     4de:	80 61       	ori	r24, 0x10	; 16
     4e0:	8b b9       	out	0x0b, r24	; 11
     4e2:	af ed       	ldi	r26, 0xDF	; 223
     4e4:	be e2       	ldi	r27, 0x2E	; 46
     4e6:	11 97       	sbiw	r26, 0x01	; 1
     4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LCD8_CMD+0xde>
     4ea:	00 c0       	rjmp	.+0      	; 0x4ec <LCD8_CMD+0xe4>
     4ec:	00 00       	nop
	_delay_ms(3);
	PORTD &= ~(1 << 4);
     4ee:	8b b1       	in	r24, 0x0b	; 11
     4f0:	8f 7e       	andi	r24, 0xEF	; 239
     4f2:	8b b9       	out	0x0b, r24	; 11
     4f4:	08 95       	ret

000004f6 <LCD8_Write_Char>:
	LCD8_Write_String(str);
}

// Escribe un único carácter en el LCD
void LCD8_Write_Char(char c) {
	uint16_t valor = (c << 2) | 1;
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	88 0f       	add	r24, r24
     4fa:	99 1f       	adc	r25, r25
     4fc:	88 0f       	add	r24, r24
     4fe:	99 1f       	adc	r25, r25
	LCD8_CMD(valor);
     500:	81 60       	ori	r24, 0x01	; 1
     502:	0e 94 04 02 	call	0x408	; 0x408 <LCD8_CMD>
     506:	08 95       	ret

00000508 <LCD8_Write_String>:
}

// Muestra una cadena de caracteres en el LCD
void LCD8_Write_String(char *a) {
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	8c 01       	movw	r16, r24
	for (int i = 0; a[i] != '\0'; i++) {
     512:	c0 e0       	ldi	r28, 0x00	; 0
     514:	d0 e0       	ldi	r29, 0x00	; 0
     516:	03 c0       	rjmp	.+6      	; 0x51e <LCD8_Write_String+0x16>
		LCD8_Write_Char(a[i]);
     518:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD8_Write_Char>
	LCD8_CMD(valor);
}

// Muestra una cadena de caracteres en el LCD
void LCD8_Write_String(char *a) {
	for (int i = 0; a[i] != '\0'; i++) {
     51c:	21 96       	adiw	r28, 0x01	; 1
     51e:	f8 01       	movw	r30, r16
     520:	ec 0f       	add	r30, r28
     522:	fd 1f       	adc	r31, r29
     524:	80 81       	ld	r24, Z
     526:	81 11       	cpse	r24, r1
     528:	f7 cf       	rjmp	.-18     	; 0x518 <LCD8_Write_String+0x10>
		LCD8_Write_Char(a[i]);
	}
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	08 95       	ret

00000534 <LCD8_Set_Cursor>:

// Posiciona el cursor en columna `c` y fila `f` (0 o 1)
void LCD8_Set_Cursor(uint16_t c, uint16_t f) {
	uint16_t coordenada;
	if (f == 0) {
     534:	61 15       	cp	r22, r1
     536:	71 05       	cpc	r23, r1
     538:	41 f4       	brne	.+16     	; 0x54a <LCD8_Set_Cursor+0x16>
		// Primera fila
		coordenada = (c << 2) + 512;
     53a:	88 0f       	add	r24, r24
     53c:	99 1f       	adc	r25, r25
     53e:	88 0f       	add	r24, r24
     540:	99 1f       	adc	r25, r25
		LCD8_CMD(coordenada);
     542:	9e 5f       	subi	r25, 0xFE	; 254
     544:	0e 94 04 02 	call	0x408	; 0x408 <LCD8_CMD>
     548:	08 95       	ret
	} else if (f == 1) {
     54a:	61 30       	cpi	r22, 0x01	; 1
     54c:	71 05       	cpc	r23, r1
     54e:	49 f4       	brne	.+18     	; 0x562 <LCD8_Set_Cursor+0x2e>
		// Segunda fila
		coordenada = ((c + 64) << 2) + 512;
     550:	80 5c       	subi	r24, 0xC0	; 192
     552:	9f 4f       	sbci	r25, 0xFF	; 255
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
		LCD8_CMD(coordenada);
     55c:	9e 5f       	subi	r25, 0xFE	; 254
     55e:	0e 94 04 02 	call	0x408	; 0x408 <LCD8_CMD>
     562:	08 95       	ret

00000564 <LCD8_Clear>:
	}
}

// Borra el contenido del LCD
void LCD8_Clear(void) {
	LCD8_CMD(0b100);
     564:	84 e0       	ldi	r24, 0x04	; 4
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 04 02 	call	0x408	; 0x408 <LCD8_CMD>
     56c:	08 95       	ret

0000056e <float_to_string>:
}

// Convierte un número flotante a cadena con n decimales
void float_to_string(float num, char *buffer, uint8_t decimales) {
     56e:	8f 92       	push	r8
     570:	9f 92       	push	r9
     572:	af 92       	push	r10
     574:	bf 92       	push	r11
     576:	cf 92       	push	r12
     578:	df 92       	push	r13
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	cd b7       	in	r28, 0x3d	; 61
     588:	de b7       	in	r29, 0x3e	; 62
     58a:	2a 97       	sbiw	r28, 0x0a	; 10
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	4b 01       	movw	r8, r22
     598:	5c 01       	movw	r10, r24
     59a:	7a 01       	movw	r14, r20
	int parte_entera = (int)num;
     59c:	0e 94 17 09 	call	0x122e	; 0x122e <__fixsfsi>
     5a0:	8b 01       	movw	r16, r22
	int parte_decimal = (int)((num - parte_entera) * 100);
     5a2:	07 2e       	mov	r0, r23
     5a4:	00 0c       	add	r0, r0
     5a6:	88 0b       	sbc	r24, r24
     5a8:	99 0b       	sbc	r25, r25
     5aa:	0e 94 4f 09 	call	0x129e	; 0x129e <__floatsisf>
     5ae:	9b 01       	movw	r18, r22
     5b0:	ac 01       	movw	r20, r24
     5b2:	c5 01       	movw	r24, r10
     5b4:	b4 01       	movw	r22, r8
     5b6:	0e 94 38 08 	call	0x1070	; 0x1070 <__subsf3>
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	48 ec       	ldi	r20, 0xC8	; 200
     5c0:	52 e4       	ldi	r21, 0x42	; 66
     5c2:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     5c6:	0e 94 17 09 	call	0x122e	; 0x122e <__fixsfsi>
     5ca:	6b 01       	movw	r12, r22

	if (parte_decimal < 0) parte_decimal *= -1;
     5cc:	77 23       	and	r23, r23
     5ce:	24 f4       	brge	.+8      	; 0x5d8 <float_to_string+0x6a>
     5d0:	cc 24       	eor	r12, r12
     5d2:	dd 24       	eor	r13, r13
     5d4:	c6 1a       	sub	r12, r22
     5d6:	d7 0a       	sbc	r13, r23

	int i = 0;

	// Parte entera
	if (parte_entera == 0) {
     5d8:	01 15       	cp	r16, r1
     5da:	11 05       	cpc	r17, r1
     5dc:	c1 f4       	brne	.+48     	; 0x60e <float_to_string+0xa0>
		buffer[i++] = '0';
     5de:	80 e3       	ldi	r24, 0x30	; 48
     5e0:	d7 01       	movw	r26, r14
     5e2:	8c 93       	st	X, r24
     5e4:	e1 e0       	ldi	r30, 0x01	; 1
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	2c c0       	rjmp	.+88     	; 0x642 <float_to_string+0xd4>
	} else {
		int temp = parte_entera;
		char temp_buffer[10];
		int j = 0;
		while (temp > 0) {
			temp_buffer[j++] = (temp % 10) + '0';
     5ea:	c8 01       	movw	r24, r16
     5ec:	6a e0       	ldi	r22, 0x0A	; 10
     5ee:	70 e0       	ldi	r23, 0x00	; 0
     5f0:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__divmodhi4>
     5f4:	e1 e0       	ldi	r30, 0x01	; 1
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	ec 0f       	add	r30, r28
     5fa:	fd 1f       	adc	r31, r29
     5fc:	e2 0f       	add	r30, r18
     5fe:	f3 1f       	adc	r31, r19
     600:	80 5d       	subi	r24, 0xD0	; 208
     602:	80 83       	st	Z, r24
			temp /= 10;
     604:	06 2f       	mov	r16, r22
     606:	17 2f       	mov	r17, r23
	} else {
		int temp = parte_entera;
		char temp_buffer[10];
		int j = 0;
		while (temp > 0) {
			temp_buffer[j++] = (temp % 10) + '0';
     608:	2f 5f       	subi	r18, 0xFF	; 255
     60a:	3f 4f       	sbci	r19, 0xFF	; 255
     60c:	02 c0       	rjmp	.+4      	; 0x612 <float_to_string+0xa4>
     60e:	20 e0       	ldi	r18, 0x00	; 0
     610:	30 e0       	ldi	r19, 0x00	; 0
		buffer[i++] = '0';
	} else {
		int temp = parte_entera;
		char temp_buffer[10];
		int j = 0;
		while (temp > 0) {
     612:	10 16       	cp	r1, r16
     614:	11 06       	cpc	r1, r17
     616:	4c f3       	brlt	.-46     	; 0x5ea <float_to_string+0x7c>
     618:	e0 e0       	ldi	r30, 0x00	; 0
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	0f c0       	rjmp	.+30     	; 0x63c <float_to_string+0xce>
			temp_buffer[j++] = (temp % 10) + '0';
			temp /= 10;
		}
		while (j > 0) {
			buffer[i++] = temp_buffer[--j];
     61e:	c7 01       	movw	r24, r14
     620:	8e 0f       	add	r24, r30
     622:	9f 1f       	adc	r25, r31
     624:	21 50       	subi	r18, 0x01	; 1
     626:	31 09       	sbc	r19, r1
     628:	a1 e0       	ldi	r26, 0x01	; 1
     62a:	b0 e0       	ldi	r27, 0x00	; 0
     62c:	ac 0f       	add	r26, r28
     62e:	bd 1f       	adc	r27, r29
     630:	a2 0f       	add	r26, r18
     632:	b3 1f       	adc	r27, r19
     634:	4c 91       	ld	r20, X
     636:	dc 01       	movw	r26, r24
     638:	4c 93       	st	X, r20
     63a:	31 96       	adiw	r30, 0x01	; 1
		int j = 0;
		while (temp > 0) {
			temp_buffer[j++] = (temp % 10) + '0';
			temp /= 10;
		}
		while (j > 0) {
     63c:	12 16       	cp	r1, r18
     63e:	13 06       	cpc	r1, r19
     640:	74 f3       	brlt	.-36     	; 0x61e <float_to_string+0xb0>
			buffer[i++] = temp_buffer[--j];
		}
	}

	// Agrega punto decimal
	buffer[i++] = '.';
     642:	8f 01       	movw	r16, r30
     644:	0f 5f       	subi	r16, 0xFF	; 255
     646:	1f 4f       	sbci	r17, 0xFF	; 255
     648:	d7 01       	movw	r26, r14
     64a:	ae 0f       	add	r26, r30
     64c:	bf 1f       	adc	r27, r31
     64e:	8e e2       	ldi	r24, 0x2E	; 46
     650:	8c 93       	st	X, r24

	// Parte decimal (solo 2 dígitos)
	buffer[i++] = (parte_decimal / 10) + '0';
     652:	9f 01       	movw	r18, r30
     654:	2e 5f       	subi	r18, 0xFE	; 254
     656:	3f 4f       	sbci	r19, 0xFF	; 255
     658:	0e 0d       	add	r16, r14
     65a:	1f 1d       	adc	r17, r15
     65c:	c6 01       	movw	r24, r12
     65e:	6a e0       	ldi	r22, 0x0A	; 10
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__divmodhi4>
     666:	60 5d       	subi	r22, 0xD0	; 208
     668:	d8 01       	movw	r26, r16
     66a:	6c 93       	st	X, r22
	buffer[i++] = (parte_decimal % 10) + '0';
     66c:	33 96       	adiw	r30, 0x03	; 3
     66e:	d7 01       	movw	r26, r14
     670:	a2 0f       	add	r26, r18
     672:	b3 1f       	adc	r27, r19
     674:	80 5d       	subi	r24, 0xD0	; 208
     676:	8c 93       	st	X, r24

	buffer[i] = '\0';
     678:	ee 0d       	add	r30, r14
     67a:	ff 1d       	adc	r31, r15
     67c:	10 82       	st	Z, r1
}
     67e:	2a 96       	adiw	r28, 0x0a	; 10
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	f8 94       	cli
     684:	de bf       	out	0x3e, r29	; 62
     686:	0f be       	out	0x3f, r0	; 63
     688:	cd bf       	out	0x3d, r28	; 61
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	ff 90       	pop	r15
     694:	ef 90       	pop	r14
     696:	df 90       	pop	r13
     698:	cf 90       	pop	r12
     69a:	bf 90       	pop	r11
     69c:	af 90       	pop	r10
     69e:	9f 90       	pop	r9
     6a0:	8f 90       	pop	r8
     6a2:	08 95       	ret

000006a4 <LCD8_Variable>:
	_delay_ms(3);
	PORTD &= ~(1 << 4);
}

// Muestra un número flotante en el LCD con n decimales
void LCD8_Variable(float v, uint8_t n) {
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	2a 97       	sbiw	r28, 0x0a	; 10
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	24 2f       	mov	r18, r20
	char str[10];
	float_to_string(v, str, n);
     6ba:	ae 01       	movw	r20, r28
     6bc:	4f 5f       	subi	r20, 0xFF	; 255
     6be:	5f 4f       	sbci	r21, 0xFF	; 255
     6c0:	0e 94 b7 02 	call	0x56e	; 0x56e <float_to_string>
	LCD8_Write_String(str);
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>
}
     6cc:	2a 96       	adiw	r28, 0x0a	; 10
     6ce:	0f b6       	in	r0, 0x3f	; 63
     6d0:	f8 94       	cli
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	cd bf       	out	0x3d, r28	; 61
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	08 95       	ret

000006de <disp_acceso>:
	}
}

// Mensajes temporales de acceso
void disp_acceso(uint8_t rfid_status){
	switch(rfid_status){
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	21 f0       	breq	.+8      	; 0x6ea <disp_acceso+0xc>
     6e2:	98 f1       	brcs	.+102    	; 0x74a <disp_acceso+0x6c>
     6e4:	82 30       	cpi	r24, 0x02	; 2
     6e6:	c9 f0       	breq	.+50     	; 0x71a <disp_acceso+0x3c>
     6e8:	08 95       	ret
		case 1:
		LCD8_Clear();
     6ea:	0e 94 b2 02 	call	0x564	; 0x564 <LCD8_Clear>
		LCD8_Set_Cursor(0,0);
     6ee:	60 e0       	ldi	r22, 0x00	; 0
     6f0:	70 e0       	ldi	r23, 0x00	; 0
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 9a 02 	call	0x534	; 0x534 <LCD8_Set_Cursor>
		LCD8_Write_String("Bienvenido Pablo");
     6fa:	8d e0       	ldi	r24, 0x0D	; 13
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>
     702:	2f ef       	ldi	r18, 0xFF	; 255
     704:	8d e3       	ldi	r24, 0x3D	; 61
     706:	99 e4       	ldi	r25, 0x49	; 73
     708:	21 50       	subi	r18, 0x01	; 1
     70a:	80 40       	sbci	r24, 0x00	; 0
     70c:	90 40       	sbci	r25, 0x00	; 0
     70e:	e1 f7       	brne	.-8      	; 0x708 <disp_acceso+0x2a>
     710:	00 c0       	rjmp	.+0      	; 0x712 <disp_acceso+0x34>
     712:	00 00       	nop
		_delay_ms(1500);
		LCD8_Clear();
     714:	0e 94 b2 02 	call	0x564	; 0x564 <LCD8_Clear>
		break;
     718:	08 95       	ret
		case 2:
		LCD8_Clear();
     71a:	0e 94 b2 02 	call	0x564	; 0x564 <LCD8_Clear>
		LCD8_Set_Cursor(0,0);
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 9a 02 	call	0x534	; 0x534 <LCD8_Set_Cursor>
		LCD8_Write_String("Bienvenido Pedro");
     72a:	8e e1       	ldi	r24, 0x1E	; 30
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>
     732:	2f ef       	ldi	r18, 0xFF	; 255
     734:	8d e3       	ldi	r24, 0x3D	; 61
     736:	99 e4       	ldi	r25, 0x49	; 73
     738:	21 50       	subi	r18, 0x01	; 1
     73a:	80 40       	sbci	r24, 0x00	; 0
     73c:	90 40       	sbci	r25, 0x00	; 0
     73e:	e1 f7       	brne	.-8      	; 0x738 <disp_acceso+0x5a>
     740:	00 c0       	rjmp	.+0      	; 0x742 <disp_acceso+0x64>
     742:	00 00       	nop
		_delay_ms(1500);
		LCD8_Clear();
     744:	0e 94 b2 02 	call	0x564	; 0x564 <LCD8_Clear>
		break;
     748:	08 95       	ret
		case 0:
		LCD8_Clear();
     74a:	0e 94 b2 02 	call	0x564	; 0x564 <LCD8_Clear>
		LCD8_Set_Cursor(0,0);
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	0e 94 9a 02 	call	0x534	; 0x534 <LCD8_Set_Cursor>
		LCD8_Write_String("Acceso denegado");
     75a:	8f e2       	ldi	r24, 0x2F	; 47
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>
     762:	2f ef       	ldi	r18, 0xFF	; 255
     764:	8d e3       	ldi	r24, 0x3D	; 61
     766:	99 e4       	ldi	r25, 0x49	; 73
     768:	21 50       	subi	r18, 0x01	; 1
     76a:	80 40       	sbci	r24, 0x00	; 0
     76c:	90 40       	sbci	r25, 0x00	; 0
     76e:	e1 f7       	brne	.-8      	; 0x768 <disp_acceso+0x8a>
     770:	00 c0       	rjmp	.+0      	; 0x772 <disp_acceso+0x94>
     772:	00 00       	nop
		_delay_ms(1500);
		LCD8_Clear();
     774:	0e 94 b2 02 	call	0x564	; 0x564 <LCD8_Clear>
     778:	08 95       	ret

0000077a <disp_val>:
		break; // 3/4 -> sin mensaje
	}
}

// Mostrar temperatura y estado del servo
void disp_val(float t, float h, uint8_t d, uint8_t s, uint8_t m){
     77a:	4f 92       	push	r4
     77c:	5f 92       	push	r5
     77e:	6f 92       	push	r6
     780:	7f 92       	push	r7
     782:	8f 92       	push	r8
     784:	9f 92       	push	r9
     786:	af 92       	push	r10
     788:	bf 92       	push	r11
     78a:	ef 92       	push	r14
     78c:	2b 01       	movw	r4, r22
     78e:	3c 01       	movw	r6, r24
     790:	49 01       	movw	r8, r18
     792:	5a 01       	movw	r10, r20
	LCD8_Set_Cursor(0,0);
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 9a 02 	call	0x534	; 0x534 <LCD8_Set_Cursor>
	LCD8_Write_String("T:");
     7a0:	86 e4       	ldi	r24, 0x46	; 70
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>
	LCD8_Variable(t, 1);
     7a8:	41 e0       	ldi	r20, 0x01	; 1
     7aa:	c3 01       	movw	r24, r6
     7ac:	b2 01       	movw	r22, r4
     7ae:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD8_Variable>
	LCD8_Write_Char(' ');
     7b2:	80 e2       	ldi	r24, 0x20	; 32
     7b4:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD8_Write_Char>
	LCD8_Write_Char(0xDF); // °C
     7b8:	8f ed       	ldi	r24, 0xDF	; 223
     7ba:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD8_Write_Char>
	LCD8_Write_String("C");
     7be:	89 e4       	ldi	r24, 0x49	; 73
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>

	LCD8_Set_Cursor(1, 13);
     7c6:	6d e0       	ldi	r22, 0x0D	; 13
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 9a 02 	call	0x534	; 0x534 <LCD8_Set_Cursor>
	LCD8_Write_String("S:");
     7d2:	8b e4       	ldi	r24, 0x4B	; 75
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>
	LCD8_Write_String(s ? "ON" : "OFF");
     7da:	ee 20       	and	r14, r14
     7dc:	19 f0       	breq	.+6      	; 0x7e4 <disp_val+0x6a>
     7de:	8f e3       	ldi	r24, 0x3F	; 63
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <disp_val+0x6e>
     7e4:	82 e4       	ldi	r24, 0x42	; 66
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>
	
	LCD8_Set_Cursor(0, 1);   // esquina derecha de la 1ª línea
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 9a 02 	call	0x534	; 0x534 <LCD8_Set_Cursor>
	LCD8_Write_String("H:");
     7f8:	8e e4       	ldi	r24, 0x4E	; 78
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>
	LCD8_Variable(h, 2);
     800:	42 e0       	ldi	r20, 0x02	; 2
     802:	c5 01       	movw	r24, r10
     804:	b4 01       	movw	r22, r8
     806:	0e 94 52 03 	call	0x6a4	; 0x6a4 <LCD8_Variable>
	LCD8_Write_String("ppm");
     80a:	81 e5       	ldi	r24, 0x51	; 81
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>
}
     812:	ef 90       	pop	r14
     814:	bf 90       	pop	r11
     816:	af 90       	pop	r10
     818:	9f 90       	pop	r9
     81a:	8f 90       	pop	r8
     81c:	7f 90       	pop	r7
     81e:	6f 90       	pop	r6
     820:	5f 90       	pop	r5
     822:	4f 90       	pop	r4
     824:	08 95       	ret

00000826 <read_UART>:
	UART_Char('\n');
}

// Leer comandos desde UART
void read_UART(void){
	dato = UART_Read();
     826:	0e 94 5f 07 	call	0xebe	; 0xebe <UART_Read>
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <dato+0x1>
     830:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <dato>
	if(dato != 0){
     834:	00 97       	sbiw	r24, 0x00	; 0
     836:	09 f4       	brne	.+2      	; 0x83a <read_UART+0x14>
     838:	61 c0       	rjmp	.+194    	; 0x8fc <read_UART+0xd6>
		if(dato == 'A'){ // online
     83a:	81 34       	cpi	r24, 0x41	; 65
     83c:	91 05       	cpc	r25, r1
     83e:	f1 f4       	brne	.+60     	; 0x87c <read_UART+0x56>
			online_access = 1;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <online_access>
			PORTB |= (1<<5);
     846:	85 b1       	in	r24, 0x05	; 5
     848:	80 62       	ori	r24, 0x20	; 32
     84a:	85 b9       	out	0x05, r24	; 5
			LCD8_Clear();
     84c:	0e 94 b2 02 	call	0x564	; 0x564 <LCD8_Clear>
			LCD8_Set_Cursor(4,0);
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	84 e0       	ldi	r24, 0x04	; 4
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	0e 94 9a 02 	call	0x534	; 0x534 <LCD8_Set_Cursor>
			LCD8_Write_String("ONLINE");
     85c:	85 e5       	ldi	r24, 0x55	; 85
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>
     864:	2f ef       	ldi	r18, 0xFF	; 255
     866:	8d e3       	ldi	r24, 0x3D	; 61
     868:	99 e4       	ldi	r25, 0x49	; 73
     86a:	21 50       	subi	r18, 0x01	; 1
     86c:	80 40       	sbci	r24, 0x00	; 0
     86e:	90 40       	sbci	r25, 0x00	; 0
     870:	e1 f7       	brne	.-8      	; 0x86a <read_UART+0x44>
     872:	00 c0       	rjmp	.+0      	; 0x874 <read_UART+0x4e>
     874:	00 00       	nop
			_delay_ms(1500);
			LCD8_Clear();
     876:	0e 94 b2 02 	call	0x564	; 0x564 <LCD8_Clear>
     87a:	1f c0       	rjmp	.+62     	; 0x8ba <read_UART+0x94>
			} else if(dato == 'a'){ // offline
     87c:	81 36       	cpi	r24, 0x61	; 97
     87e:	91 05       	cpc	r25, r1
     880:	e1 f4       	brne	.+56     	; 0x8ba <read_UART+0x94>
			online_access = 0;
     882:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <online_access>
			PORTB &= ~(1<<5);
     886:	85 b1       	in	r24, 0x05	; 5
     888:	8f 7d       	andi	r24, 0xDF	; 223
     88a:	85 b9       	out	0x05, r24	; 5
			LCD8_Clear();
     88c:	0e 94 b2 02 	call	0x564	; 0x564 <LCD8_Clear>
			LCD8_Set_Cursor(4,1);
     890:	61 e0       	ldi	r22, 0x01	; 1
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	84 e0       	ldi	r24, 0x04	; 4
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 9a 02 	call	0x534	; 0x534 <LCD8_Set_Cursor>
			LCD8_Write_String("OFFLINE");
     89c:	8c e5       	ldi	r24, 0x5C	; 92
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>
     8a4:	2f ef       	ldi	r18, 0xFF	; 255
     8a6:	8d e3       	ldi	r24, 0x3D	; 61
     8a8:	99 e4       	ldi	r25, 0x49	; 73
     8aa:	21 50       	subi	r18, 0x01	; 1
     8ac:	80 40       	sbci	r24, 0x00	; 0
     8ae:	90 40       	sbci	r25, 0x00	; 0
     8b0:	e1 f7       	brne	.-8      	; 0x8aa <read_UART+0x84>
     8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <read_UART+0x8e>
     8b4:	00 00       	nop
			_delay_ms(1500);
			LCD8_Clear();
     8b6:	0e 94 b2 02 	call	0x564	; 0x564 <LCD8_Clear>
		}
		if(online_access){
     8ba:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <online_access>
     8be:	88 23       	and	r24, r24
     8c0:	e9 f0       	breq	.+58     	; 0x8fc <read_UART+0xd6>
			if(dato=='S') servo_pos=1;
     8c2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <dato>
     8c6:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <dato+0x1>
     8ca:	83 35       	cpi	r24, 0x53	; 83
     8cc:	91 05       	cpc	r25, r1
     8ce:	21 f4       	brne	.+8      	; 0x8d8 <read_UART+0xb2>
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <servo_pos>
     8d6:	08 95       	ret
			else if(dato=='s') servo_pos=0;
     8d8:	83 37       	cpi	r24, 0x73	; 115
     8da:	91 05       	cpc	r25, r1
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <read_UART+0xbe>
     8de:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <servo_pos>
     8e2:	08 95       	ret
			else if(dato=='V') fan_state=1;
     8e4:	86 35       	cpi	r24, 0x56	; 86
     8e6:	91 05       	cpc	r25, r1
     8e8:	21 f4       	brne	.+8      	; 0x8f2 <read_UART+0xcc>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <__data_end>
     8f0:	08 95       	ret
			else if(dato=='v') fan_state=0;
     8f2:	86 37       	cpi	r24, 0x76	; 118
     8f4:	91 05       	cpc	r25, r1
     8f6:	11 f4       	brne	.+4      	; 0x8fc <read_UART+0xd6>
     8f8:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <__data_end>
     8fc:	08 95       	ret

000008fe <I2Ctemp>:
		}
	}
}

// Leer temperatura del sensor AHT10
void I2Ctemp(void){
     8fe:	cf 93       	push	r28
	uint8_t status;

	// pedir medición
	I2C_Master_Start();
     900:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Master_Start>
	status = I2C_Master_Write((SLAVE_TEMP << 1) | 0);
     904:	80 e7       	ldi	r24, 0x70	; 112
     906:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	if(status != 1){ I2C_Master_Stop(); return; }
     90a:	81 30       	cpi	r24, 0x01	; 1
     90c:	19 f0       	breq	.+6      	; 0x914 <__stack+0x15>
     90e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
     912:	34 c0       	rjmp	.+104    	; 0x97c <__stack+0x7d>
	I2C_Master_Write(0xAC);
     914:	8c ea       	ldi	r24, 0xAC	; 172
     916:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	I2C_Master_Write(0x33);
     91a:	83 e3       	ldi	r24, 0x33	; 51
     91c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	I2C_Master_Write(0x00);
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	I2C_Master_Stop();
     926:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
     92a:	2f ef       	ldi	r18, 0xFF	; 255
     92c:	86 e1       	ldi	r24, 0x16	; 22
     92e:	91 e1       	ldi	r25, 0x11	; 17
     930:	21 50       	subi	r18, 0x01	; 1
     932:	80 40       	sbci	r24, 0x00	; 0
     934:	90 40       	sbci	r25, 0x00	; 0
     936:	e1 f7       	brne	.-8      	; 0x930 <__stack+0x31>
     938:	00 c0       	rjmp	.+0      	; 0x93a <__stack+0x3b>
     93a:	00 00       	nop
	_delay_ms(350);

	// leer 6 bytes
	I2C_Master_Start();
     93c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Master_Start>
	status = I2C_Master_Write((SLAVE_TEMP << 1) | 1);
     940:	81 e7       	ldi	r24, 0x71	; 113
     942:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	if(status != 1){ I2C_Master_Stop(); return; }
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	a1 f0       	breq	.+40     	; 0x972 <__stack+0x73>
     94a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
     94e:	16 c0       	rjmp	.+44     	; 0x97c <__stack+0x7d>
	for(uint8_t i=0;i<6;i++){
		status = I2C_Master_Read(&valorTYH[i], i<5);
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	c5 30       	cpi	r28, 0x05	; 5
     954:	08 f0       	brcs	.+2      	; 0x958 <__stack+0x59>
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	8c 2f       	mov	r24, r28
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	85 58       	subi	r24, 0x85	; 133
     95e:	9e 4f       	sbci	r25, 0xFE	; 254
     960:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Master_Read>
		if(status != 1){ I2C_Master_Stop(); return; }
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	19 f0       	breq	.+6      	; 0x96e <__stack+0x6f>
     968:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
     96c:	07 c0       	rjmp	.+14     	; 0x97c <__stack+0x7d>

	// leer 6 bytes
	I2C_Master_Start();
	status = I2C_Master_Write((SLAVE_TEMP << 1) | 1);
	if(status != 1){ I2C_Master_Stop(); return; }
	for(uint8_t i=0;i<6;i++){
     96e:	cf 5f       	subi	r28, 0xFF	; 255
     970:	01 c0       	rjmp	.+2      	; 0x974 <__stack+0x75>
     972:	c0 e0       	ldi	r28, 0x00	; 0
     974:	c6 30       	cpi	r28, 0x06	; 6
     976:	60 f3       	brcs	.-40     	; 0x950 <__stack+0x51>
		status = I2C_Master_Read(&valorTYH[i], i<5);
		if(status != 1){ I2C_Master_Stop(); return; }
	}
	I2C_Master_Stop();
     978:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
}
     97c:	cf 91       	pop	r28
     97e:	08 95       	ret

00000980 <I2Chumo>:
void I2Chumo(void){
	uint8_t status;
	I2C_Master_Start();
     980:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Master_Start>
	status = I2C_Master_Write((SLAVE_HUMO << 1) | 1); // lectura
     984:	81 e6       	ldi	r24, 0x61	; 97
     986:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	if(status != 1){ I2C_Master_Stop(); return; }
     98a:	81 30       	cpi	r24, 0x01	; 1
     98c:	19 f0       	breq	.+6      	; 0x994 <I2Chumo+0x14>
     98e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
     992:	08 95       	ret
	status = I2C_Master_Read(&valorH[0], 0);          // NACK en el último byte
     994:	60 e0       	ldi	r22, 0x00	; 0
     996:	81 e8       	ldi	r24, 0x81	; 129
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 14 01 	call	0x228	; 0x228 <I2C_Master_Read>
	I2C_Master_Stop();
     99e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
     9a2:	08 95       	ret

000009a4 <floatToString>:
}


// Convertir float a string
void floatToString(float num, char *str, int precision){
     9a4:	4f 92       	push	r4
     9a6:	5f 92       	push	r5
     9a8:	6f 92       	push	r6
     9aa:	7f 92       	push	r7
     9ac:	af 92       	push	r10
     9ae:	bf 92       	push	r11
     9b0:	cf 92       	push	r12
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	00 d0       	rcall	.+0      	; 0x9c2 <floatToString+0x1e>
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <floatToString+0x20>
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	2b 01       	movw	r4, r22
     9ca:	3c 01       	movw	r6, r24
     9cc:	7a 01       	movw	r14, r20
     9ce:	59 01       	movw	r10, r18
	int intPart = (int)num;
     9d0:	0e 94 17 09 	call	0x122e	; 0x122e <__fixsfsi>
     9d4:	69 83       	std	Y+1, r22	; 0x01
     9d6:	7a 83       	std	Y+2, r23	; 0x02
     9d8:	8b 83       	std	Y+3, r24	; 0x03
     9da:	9c 83       	std	Y+4, r25	; 0x04
	float decimalPart = num - intPart;
     9dc:	29 81       	ldd	r18, Y+1	; 0x01
     9de:	3a 81       	ldd	r19, Y+2	; 0x02
     9e0:	b9 01       	movw	r22, r18
     9e2:	33 0f       	add	r19, r19
     9e4:	88 0b       	sbc	r24, r24
     9e6:	99 0b       	sbc	r25, r25
     9e8:	0e 94 4f 09 	call	0x129e	; 0x129e <__floatsisf>
     9ec:	9b 01       	movw	r18, r22
     9ee:	ac 01       	movw	r20, r24
     9f0:	c3 01       	movw	r24, r6
     9f2:	b2 01       	movw	r22, r4
     9f4:	0e 94 38 08 	call	0x1070	; 0x1070 <__subsf3>
     9f8:	2b 01       	movw	r4, r22
     9fa:	3c 01       	movw	r6, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     9fc:	4a e0       	ldi	r20, 0x0A	; 10
     9fe:	b7 01       	movw	r22, r14
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	9a 81       	ldd	r25, Y+2	; 0x02
     a04:	0e 94 40 0c 	call	0x1880	; 0x1880 <__itoa_ncheck>
	itoa(intPart,str,10);
	int i=0;
     a08:	1a 82       	std	Y+2, r1	; 0x02
     a0a:	19 82       	std	Y+1, r1	; 0x01
	while(str[i]!='\0') i++;
     a0c:	05 c0       	rjmp	.+10     	; 0xa18 <floatToString+0x74>
     a0e:	89 81       	ldd	r24, Y+1	; 0x01
     a10:	9a 81       	ldd	r25, Y+2	; 0x02
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	9a 83       	std	Y+2, r25	; 0x02
     a16:	89 83       	std	Y+1, r24	; 0x01
     a18:	e9 81       	ldd	r30, Y+1	; 0x01
     a1a:	fa 81       	ldd	r31, Y+2	; 0x02
     a1c:	ee 0d       	add	r30, r14
     a1e:	ff 1d       	adc	r31, r15
     a20:	80 81       	ld	r24, Z
     a22:	81 11       	cpse	r24, r1
     a24:	f4 cf       	rjmp	.-24     	; 0xa0e <floatToString+0x6a>
	str[i++]='.';
     a26:	29 81       	ldd	r18, Y+1	; 0x01
     a28:	3a 81       	ldd	r19, Y+2	; 0x02
     a2a:	2f 5f       	subi	r18, 0xFF	; 255
     a2c:	3f 4f       	sbci	r19, 0xFF	; 255
     a2e:	3a 83       	std	Y+2, r19	; 0x02
     a30:	29 83       	std	Y+1, r18	; 0x01
     a32:	8e e2       	ldi	r24, 0x2E	; 46
     a34:	80 83       	st	Z, r24
	for(int j=0;j<precision;j++){
     a36:	00 e0       	ldi	r16, 0x00	; 0
     a38:	10 e0       	ldi	r17, 0x00	; 0
     a3a:	2a c0       	rjmp	.+84     	; 0xa90 <floatToString+0xec>
		decimalPart *= 10;
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	40 e2       	ldi	r20, 0x20	; 32
     a42:	51 e4       	ldi	r21, 0x41	; 65
     a44:	c3 01       	movw	r24, r6
     a46:	b2 01       	movw	r22, r4
     a48:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     a4c:	2b 01       	movw	r4, r22
     a4e:	3c 01       	movw	r6, r24
		int decDigit = (int)decimalPart;
     a50:	0e 94 17 09 	call	0x122e	; 0x122e <__fixsfsi>
		str[i++] = decDigit+'0';
     a54:	c9 80       	ldd	r12, Y+1	; 0x01
     a56:	da 80       	ldd	r13, Y+2	; 0x02
     a58:	3f ef       	ldi	r19, 0xFF	; 255
     a5a:	c3 1a       	sub	r12, r19
     a5c:	d3 0a       	sbc	r13, r19
     a5e:	e9 81       	ldd	r30, Y+1	; 0x01
     a60:	fa 81       	ldd	r31, Y+2	; 0x02
     a62:	ee 0d       	add	r30, r14
     a64:	ff 1d       	adc	r31, r15
     a66:	20 e3       	ldi	r18, 0x30	; 48
     a68:	26 0f       	add	r18, r22
     a6a:	20 83       	st	Z, r18
		decimalPart -= decDigit;
     a6c:	07 2e       	mov	r0, r23
     a6e:	00 0c       	add	r0, r0
     a70:	88 0b       	sbc	r24, r24
     a72:	99 0b       	sbc	r25, r25
     a74:	0e 94 4f 09 	call	0x129e	; 0x129e <__floatsisf>
     a78:	9b 01       	movw	r18, r22
     a7a:	ac 01       	movw	r20, r24
     a7c:	c3 01       	movw	r24, r6
     a7e:	b2 01       	movw	r22, r4
     a80:	0e 94 38 08 	call	0x1070	; 0x1070 <__subsf3>
     a84:	2b 01       	movw	r4, r22
     a86:	3c 01       	movw	r6, r24
	float decimalPart = num - intPart;
	itoa(intPart,str,10);
	int i=0;
	while(str[i]!='\0') i++;
	str[i++]='.';
	for(int j=0;j<precision;j++){
     a88:	0f 5f       	subi	r16, 0xFF	; 255
     a8a:	1f 4f       	sbci	r17, 0xFF	; 255
		decimalPart *= 10;
		int decDigit = (int)decimalPart;
		str[i++] = decDigit+'0';
     a8c:	da 82       	std	Y+2, r13	; 0x02
     a8e:	c9 82       	std	Y+1, r12	; 0x01
	float decimalPart = num - intPart;
	itoa(intPart,str,10);
	int i=0;
	while(str[i]!='\0') i++;
	str[i++]='.';
	for(int j=0;j<precision;j++){
     a90:	0a 15       	cp	r16, r10
     a92:	1b 05       	cpc	r17, r11
     a94:	9c f2       	brlt	.-90     	; 0xa3c <floatToString+0x98>
		decimalPart *= 10;
		int decDigit = (int)decimalPart;
		str[i++] = decDigit+'0';
		decimalPart -= decDigit;
	}
	str[i]='\0';
     a96:	29 81       	ldd	r18, Y+1	; 0x01
     a98:	3a 81       	ldd	r19, Y+2	; 0x02
     a9a:	2e 0d       	add	r18, r14
     a9c:	3f 1d       	adc	r19, r15
     a9e:	f9 01       	movw	r30, r18
     aa0:	10 82       	st	Z, r1
}
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	0f 90       	pop	r0
     aa8:	0f 90       	pop	r0
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	bf 90       	pop	r11
     abc:	af 90       	pop	r10
     abe:	7f 90       	pop	r7
     ac0:	6f 90       	pop	r6
     ac2:	5f 90       	pop	r5
     ac4:	4f 90       	pop	r4
     ac6:	08 95       	ret

00000ac8 <send_val>:
	LCD8_Variable(h, 2);
	LCD8_Write_String("ppm");
}

// Enviar datos por UART
void send_val(uint8_t s, uint8_t r, float t, float h){
     ac8:	4f 92       	push	r4
     aca:	5f 92       	push	r5
     acc:	6f 92       	push	r6
     ace:	7f 92       	push	r7
     ad0:	8f 92       	push	r8
     ad2:	9f 92       	push	r9
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	64 97       	sbiw	r28, 0x14	; 20
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	c8 2e       	mov	r12, r24
     afa:	d6 2e       	mov	r13, r22
     afc:	49 01       	movw	r8, r18
     afe:	5a 01       	movw	r10, r20
	UART_Char('s'); UART_Var(s); UART_Char(' ');
     b00:	83 e7       	ldi	r24, 0x73	; 115
     b02:	0e 94 68 07 	call	0xed0	; 0xed0 <UART_Char>
     b06:	6c 2d       	mov	r22, r12
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 4d 09 	call	0x129a	; 0x129a <__floatunsisf>
     b12:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_Var>
     b16:	80 e2       	ldi	r24, 0x20	; 32
     b18:	0e 94 68 07 	call	0xed0	; 0xed0 <UART_Char>
	UART_Char('r'); UART_Var(r); UART_Char(' ');
     b1c:	82 e7       	ldi	r24, 0x72	; 114
     b1e:	0e 94 68 07 	call	0xed0	; 0xed0 <UART_Char>
     b22:	6d 2d       	mov	r22, r13
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 4d 09 	call	0x129a	; 0x129a <__floatunsisf>
     b2e:	0e 94 1b 08 	call	0x1036	; 0x1036 <UART_Var>
     b32:	80 e2       	ldi	r24, 0x20	; 32
     b34:	0e 94 68 07 	call	0xed0	; 0xed0 <UART_Char>
	UART_Char('T');
     b38:	84 e5       	ldi	r24, 0x54	; 84
     b3a:	0e 94 68 07 	call	0xed0	; 0xed0 <UART_Char>
	char tempStr[10];
	floatToString(t, tempStr, 1);
     b3e:	21 e0       	ldi	r18, 0x01	; 1
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	ae 01       	movw	r20, r28
     b44:	4f 5f       	subi	r20, 0xFF	; 255
     b46:	5f 4f       	sbci	r21, 0xFF	; 255
     b48:	c5 01       	movw	r24, r10
     b4a:	b4 01       	movw	r22, r8
     b4c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <floatToString>
	UART_Write(tempStr);
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 6f 07 	call	0xede	; 0xede <UART_Write>
	UART_Char(' ');
     b58:	80 e2       	ldi	r24, 0x20	; 32
     b5a:	0e 94 68 07 	call	0xed0	; 0xed0 <UART_Char>
	UART_Char('H');
     b5e:	88 e4       	ldi	r24, 0x48	; 72
     b60:	0e 94 68 07 	call	0xed0	; 0xed0 <UART_Char>
	char humoStr[10];
	floatToString(h, humoStr, 2);
     b64:	22 e0       	ldi	r18, 0x02	; 2
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	ae 01       	movw	r20, r28
     b6a:	45 5f       	subi	r20, 0xF5	; 245
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	c8 01       	movw	r24, r16
     b70:	b7 01       	movw	r22, r14
     b72:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <floatToString>
	UART_Write(humoStr);
     b76:	ce 01       	movw	r24, r28
     b78:	0b 96       	adiw	r24, 0x0b	; 11
     b7a:	0e 94 6f 07 	call	0xede	; 0xede <UART_Write>
	UART_Char(' ');
     b7e:	80 e2       	ldi	r24, 0x20	; 32
     b80:	0e 94 68 07 	call	0xed0	; 0xed0 <UART_Char>
	UART_Char('\n');
     b84:	8a e0       	ldi	r24, 0x0A	; 10
     b86:	0e 94 68 07 	call	0xed0	; 0xed0 <UART_Char>
}
     b8a:	64 96       	adiw	r28, 0x14	; 20
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	1f 91       	pop	r17
     b9c:	0f 91       	pop	r16
     b9e:	ff 90       	pop	r15
     ba0:	ef 90       	pop	r14
     ba2:	df 90       	pop	r13
     ba4:	cf 90       	pop	r12
     ba6:	bf 90       	pop	r11
     ba8:	af 90       	pop	r10
     baa:	9f 90       	pop	r9
     bac:	8f 90       	pop	r8
     bae:	7f 90       	pop	r7
     bb0:	6f 90       	pop	r6
     bb2:	5f 90       	pop	r5
     bb4:	4f 90       	pop	r4
     bb6:	08 95       	ret

00000bb8 <main>:
void disp_val(float t, float h, uint8_t d, uint8_t s, uint8_t m);


int main(void) {
	// Inicializar I2C, UART y LCD
	I2C_Master_Init(100000, 1);
     bb8:	41 e0       	ldi	r20, 0x01	; 1
     bba:	60 ea       	ldi	r22, 0xA0	; 160
     bbc:	76 e8       	ldi	r23, 0x86	; 134
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 94 00 	call	0x128	; 0x128 <I2C_Master_Init>
	UART_Init();
     bc6:	0e 94 53 07 	call	0xea6	; 0xea6 <UART_Init>
	initLCD8();
     bca:	0e 94 aa 01 	call	0x354	; 0x354 <initLCD8>
	LCD8_Set_Cursor(0,0);
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 9a 02 	call	0x534	; 0x534 <LCD8_Set_Cursor>
	LCD8_Write_String("Iniciando...");
     bda:	84 e6       	ldi	r24, 0x64	; 100
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	0e 94 84 02 	call	0x508	; 0x508 <LCD8_Write_String>
     be2:	2f ef       	ldi	r18, 0xFF	; 255
     be4:	87 ea       	ldi	r24, 0xA7	; 167
     be6:	91 e6       	ldi	r25, 0x61	; 97
     be8:	21 50       	subi	r18, 0x01	; 1
     bea:	80 40       	sbci	r24, 0x00	; 0
     bec:	90 40       	sbci	r25, 0x00	; 0
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <main+0x30>
     bf0:	00 c0       	rjmp	.+0      	; 0xbf2 <main+0x3a>
     bf2:	00 00       	nop
	_delay_ms(2000);
	LCD8_Clear();
     bf4:	0e 94 b2 02 	call	0x564	; 0x564 <LCD8_Clear>

	DDRD |= (1<<2);
     bf8:	8a b1       	in	r24, 0x0a	; 10
     bfa:	84 60       	ori	r24, 0x04	; 4
     bfc:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<2);
     bfe:	8b b1       	in	r24, 0x0b	; 11
     c00:	84 60       	ori	r24, 0x04	; 4
     c02:	8b b9       	out	0x0b, r24	; 11

	// Inicializar sensor AHT10
	I2C_Master_Start();
     c04:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Master_Start>
	I2C_Master_Write((SLAVE_TEMP << 1) | 0);
     c08:	80 e7       	ldi	r24, 0x70	; 112
     c0a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	I2C_Master_Write(0xE1);
     c0e:	81 ee       	ldi	r24, 0xE1	; 225
     c10:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
	I2C_Master_Stop();
     c14:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
     c18:	2f ef       	ldi	r18, 0xFF	; 255
     c1a:	86 e1       	ldi	r24, 0x16	; 22
     c1c:	91 e1       	ldi	r25, 0x11	; 17
     c1e:	21 50       	subi	r18, 0x01	; 1
     c20:	80 40       	sbci	r24, 0x00	; 0
     c22:	90 40       	sbci	r25, 0x00	; 0
     c24:	e1 f7       	brne	.-8      	; 0xc1e <main+0x66>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <main+0x70>
     c28:	00 00       	nop
	_delay_ms(350);

	while(1) {
		read_UART(); // revisar comandos desde UART
     c2a:	0e 94 13 04 	call	0x826	; 0x826 <read_UART>

		I2Ctemp();   // leer temperatura
     c2e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <I2Ctemp>

		// Calcular temperatura
		uint32_t rawTemp = ((uint32_t)(valorTYH[3] & 0x0F) << 16) | ((uint32_t)valorTYH[4] << 8) | valorTYH[5];
     c32:	eb e7       	ldi	r30, 0x7B	; 123
     c34:	f1 e0       	ldi	r31, 0x01	; 1
     c36:	63 81       	ldd	r22, Z+3	; 0x03
     c38:	6f 70       	andi	r22, 0x0F	; 15
     c3a:	86 2f       	mov	r24, r22
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	bc 01       	movw	r22, r24
     c44:	55 27       	eor	r21, r21
     c46:	44 27       	eor	r20, r20
     c48:	84 81       	ldd	r24, Z+4	; 0x04
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	a0 e0       	ldi	r26, 0x00	; 0
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	ba 2f       	mov	r27, r26
     c52:	a9 2f       	mov	r26, r25
     c54:	98 2f       	mov	r25, r24
     c56:	88 27       	eor	r24, r24
     c58:	84 2b       	or	r24, r20
     c5a:	95 2b       	or	r25, r21
     c5c:	a6 2b       	or	r26, r22
     c5e:	b7 2b       	or	r27, r23
     c60:	25 81       	ldd	r18, Z+5	; 0x05
     c62:	bc 01       	movw	r22, r24
     c64:	cd 01       	movw	r24, r26
     c66:	62 2b       	or	r22, r18
		temperatura = (rawTemp * 200.0 / 1048576.0) - 50.0;
     c68:	0e 94 4d 09 	call	0x129a	; 0x129a <__floatunsisf>
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	48 e4       	ldi	r20, 0x48	; 72
     c72:	53 e4       	ldi	r21, 0x43	; 67
     c74:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e8       	ldi	r20, 0x80	; 128
     c7e:	55 e3       	ldi	r21, 0x35	; 53
     c80:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	48 e4       	ldi	r20, 0x48	; 72
     c8a:	52 e4       	ldi	r21, 0x42	; 66
     c8c:	0e 94 38 08 	call	0x1070	; 0x1070 <__subsf3>
     c90:	60 93 96 01 	sts	0x0196, r22	; 0x800196 <temperatura>
     c94:	70 93 97 01 	sts	0x0197, r23	; 0x800197 <temperatura+0x1>
     c98:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <temperatura+0x2>
     c9c:	90 93 99 01 	sts	0x0199, r25	; 0x800199 <temperatura+0x3>
		floatToString(temperatura, buf, 1);
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	42 e8       	ldi	r20, 0x82	; 130
     ca6:	51 e0       	ldi	r21, 0x01	; 1
     ca8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <floatToString>
		PORTD &= ~(1<<2);
     cac:	8b b1       	in	r24, 0x0b	; 11
     cae:	8b 7f       	andi	r24, 0xFB	; 251
     cb0:	8b b9       	out	0x0b, r24	; 11

		// Control de ventilador según temperatura
		if (temperatura > 29.0) {
     cb2:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <temperatura>
     cb6:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <temperatura+0x1>
     cba:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <temperatura+0x2>
     cbe:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <temperatura+0x3>
     cc2:	20 e0       	ldi	r18, 0x00	; 0
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	48 ee       	ldi	r20, 0xE8	; 232
     cc8:	51 e4       	ldi	r21, 0x41	; 65
     cca:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__gesf2>
     cce:	18 16       	cp	r1, r24
     cd0:	6c f4       	brge	.+26     	; 0xcec <main+0x134>
			// prender ventilador
			I2C_Master_Start();
     cd2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Master_Start>
			if (I2C_Master_Write((SLAVE_2 << 1) & 0xFE) == 1) I2C_Master_Write('V');
     cd6:	80 e8       	ldi	r24, 0x80	; 128
     cd8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	19 f4       	brne	.+6      	; 0xce6 <main+0x12e>
     ce0:	86 e5       	ldi	r24, 0x56	; 86
     ce2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
			I2C_Master_Stop();
     ce6:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
     cea:	0c c0       	rjmp	.+24     	; 0xd04 <main+0x14c>
			} else {
			// apagar ventilador
			I2C_Master_Start();
     cec:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Master_Start>
			if (I2C_Master_Write((SLAVE_2 << 1) & 0xFE) == 1) I2C_Master_Write('v');
     cf0:	80 e8       	ldi	r24, 0x80	; 128
     cf2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	19 f4       	brne	.+6      	; 0xd00 <main+0x148>
     cfa:	86 e7       	ldi	r24, 0x76	; 118
     cfc:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
			I2C_Master_Stop();
     d00:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
		}

		I2Chumo();                        // lee 1 byte del esclavo 0x30
     d04:	0e 94 c0 04 	call	0x980	; 0x980 <I2Chumo>
		uint8_t humo = valorH[0];         // Rs leído desde el esclavo
     d08:	60 91 81 01 	lds	r22, 0x0181	; 0x800181 <valorH>
		if (humo == 0) humo = 1;          // evita división entre cero
     d0c:	61 11       	cpse	r22, r1
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <main+0x15a>
     d10:	61 e0       	ldi	r22, 0x01	; 1

		// Calcular concentración (ejemplo con Ro = 5k)
		CH = (pow(50.0 / (5.0 / humo), 2)) / 1000.0f;
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 4f 09 	call	0x129e	; 0x129e <__floatsisf>
     d1c:	9b 01       	movw	r18, r22
     d1e:	ac 01       	movw	r20, r24
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	80 ea       	ldi	r24, 0xA0	; 160
     d26:	90 e4       	ldi	r25, 0x40	; 64
     d28:	0e 94 a5 08 	call	0x114a	; 0x114a <__divsf3>
     d2c:	9b 01       	movw	r18, r22
     d2e:	ac 01       	movw	r20, r24
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	88 e4       	ldi	r24, 0x48	; 72
     d36:	92 e4       	ldi	r25, 0x42	; 66
     d38:	0e 94 a5 08 	call	0x114a	; 0x114a <__divsf3>
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	50 e4       	ldi	r21, 0x40	; 64
     d44:	0e 94 4d 0a 	call	0x149a	; 0x149a <pow>
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	4a e7       	ldi	r20, 0x7A	; 122
     d4e:	54 e4       	ldi	r21, 0x44	; 68
     d50:	0e 94 a5 08 	call	0x114a	; 0x114a <__divsf3>
     d54:	60 93 77 01 	sts	0x0177, r22	; 0x800177 <CH>
     d58:	70 93 78 01 	sts	0x0178, r23	; 0x800178 <CH+0x1>
     d5c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <CH+0x2>
     d60:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <CH+0x3>

		// Leer estado RFID del esclavo
		I2C_Master_Start();
     d64:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Master_Start>
		if (I2C_Master_Write((SLAVE_2 << 1) | 0x01) == 1) {
     d68:	81 e8       	ldi	r24, 0x81	; 129
     d6a:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
     d6e:	81 30       	cpi	r24, 0x01	; 1
     d70:	59 f4       	brne	.+22     	; 0xd88 <main+0x1d0>
			TWCR = (1<<TWINT)|(1<<TWEN);
     d72:	84 e8       	ldi	r24, 0x84	; 132
     d74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
			while (!(TWCR & (1<<TWINT)));
     d78:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     d7c:	88 23       	and	r24, r24
     d7e:	e4 f7       	brge	.-8      	; 0xd78 <main+0x1c0>
			rfid_status = TWDR;
     d80:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     d84:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <rfid_status>
		}
		I2C_Master_Stop();
     d88:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
     d8c:	8f e1       	ldi	r24, 0x1F	; 31
     d8e:	9e e4       	ldi	r25, 0x4E	; 78
     d90:	01 97       	sbiw	r24, 0x01	; 1
     d92:	f1 f7       	brne	.-4      	; 0xd90 <main+0x1d8>
     d94:	00 c0       	rjmp	.+0      	; 0xd96 <main+0x1de>
     d96:	00 00       	nop
		_delay_ms(5);

		// Actualizar posición del servo según RFID
		if (rfid_status == 1 || rfid_status == 2) {
     d98:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rfid_status>
     d9c:	9f ef       	ldi	r25, 0xFF	; 255
     d9e:	98 0f       	add	r25, r24
     da0:	92 30       	cpi	r25, 0x02	; 2
     da2:	30 f4       	brcc	.+12     	; 0xdb0 <main+0x1f8>
			servo_pos = 1;            // tarjeta válida abre
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <servo_pos>
			disp_acceso(rfid_status); // mensaje bienvenida
     daa:	0e 94 6f 03 	call	0x6de	; 0x6de <disp_acceso>
     dae:	0b c0       	rjmp	.+22     	; 0xdc6 <main+0x20e>
			} else if (rfid_status == 0) {
     db0:	81 11       	cpse	r24, r1
     db2:	05 c0       	rjmp	.+10     	; 0xdbe <main+0x206>
			servo_pos = 0;
     db4:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <servo_pos>
			disp_acceso(0);           // acceso denegado
     db8:	0e 94 6f 03 	call	0x6de	; 0x6de <disp_acceso>
     dbc:	04 c0       	rjmp	.+8      	; 0xdc6 <main+0x20e>
			} else if (rfid_status == 4) {
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	11 f4       	brne	.+4      	; 0xdc6 <main+0x20e>
			servo_pos = 0;            // cierre manual
     dc2:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <servo_pos>
		}

		// Mandar S/s al esclavo solo si cambió
		if (servo_pos != last_sent_servo) {
     dc6:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <servo_pos>
     dca:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <last_sent_servo>
     dce:	98 17       	cp	r25, r24
     dd0:	b1 f0       	breq	.+44     	; 0xdfe <main+0x246>
			I2C_Master_Start();
     dd2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Master_Start>
			if (I2C_Master_Write((SLAVE_2 << 1) & 0xFE) == 1) {
     dd6:	80 e8       	ldi	r24, 0x80	; 128
     dd8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	49 f4       	brne	.+18     	; 0xdf2 <main+0x23a>
				I2C_Master_Write(servo_pos == 1 ? 'S' : 's');
     de0:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <servo_pos>
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	11 f4       	brne	.+4      	; 0xdec <main+0x234>
     de8:	83 e5       	ldi	r24, 0x53	; 83
     dea:	01 c0       	rjmp	.+2      	; 0xdee <main+0x236>
     dec:	83 e7       	ldi	r24, 0x73	; 115
     dee:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
			}
			I2C_Master_Stop();
     df2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
			last_sent_servo = servo_pos;
     df6:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <servo_pos>
     dfa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <last_sent_servo>
		}

		// Mandar V/v al esclavo solo si cambió ventilador
		if (fan_state != last_sent_fan) {
     dfe:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <__data_end>
     e02:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <last_sent_fan>
     e06:	98 17       	cp	r25, r24
     e08:	b1 f0       	breq	.+44     	; 0xe36 <main+0x27e>
			I2C_Master_Start();
     e0a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Master_Start>
			if (I2C_Master_Write((SLAVE_2 << 1) & 0xFE) == 1) {
     e0e:	80 e8       	ldi	r24, 0x80	; 128
     e10:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	49 f4       	brne	.+18     	; 0xe2a <main+0x272>
				I2C_Master_Write(fan_state == 1 ? 'V' : 'v');
     e18:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	11 f4       	brne	.+4      	; 0xe24 <main+0x26c>
     e20:	86 e5       	ldi	r24, 0x56	; 86
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <main+0x26e>
     e24:	86 e7       	ldi	r24, 0x76	; 118
     e26:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <I2C_Master_Write>
			}
			I2C_Master_Stop();
     e2a:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_Master_Stop>
			last_sent_fan = fan_state;
     e2e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <__data_end>
     e32:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <last_sent_fan>
		}

		// Mostrar temperatura y servo en LCD
		disp_val(temperatura, CH,  rfid_status, servo_pos, online_access);
     e36:	20 91 77 01 	lds	r18, 0x0177	; 0x800177 <CH>
     e3a:	30 91 78 01 	lds	r19, 0x0178	; 0x800178 <CH+0x1>
     e3e:	40 91 79 01 	lds	r20, 0x0179	; 0x800179 <CH+0x2>
     e42:	50 91 7a 01 	lds	r21, 0x017A	; 0x80017a <CH+0x3>
     e46:	60 91 96 01 	lds	r22, 0x0196	; 0x800196 <temperatura>
     e4a:	70 91 97 01 	lds	r23, 0x0197	; 0x800197 <temperatura+0x1>
     e4e:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <temperatura+0x2>
     e52:	90 91 99 01 	lds	r25, 0x0199	; 0x800199 <temperatura+0x3>
     e56:	c0 90 76 01 	lds	r12, 0x0176	; 0x800176 <online_access>
     e5a:	e0 90 75 01 	lds	r14, 0x0175	; 0x800175 <servo_pos>
     e5e:	00 91 0c 01 	lds	r16, 0x010C	; 0x80010c <rfid_status>
     e62:	0e 94 bd 03 	call	0x77a	; 0x77a <disp_val>

		// Enviar datos por UART
		send_val(servo_pos, rfid_status, temperatura, CH);
     e66:	e0 90 77 01 	lds	r14, 0x0177	; 0x800177 <CH>
     e6a:	f0 90 78 01 	lds	r15, 0x0178	; 0x800178 <CH+0x1>
     e6e:	00 91 79 01 	lds	r16, 0x0179	; 0x800179 <CH+0x2>
     e72:	10 91 7a 01 	lds	r17, 0x017A	; 0x80017a <CH+0x3>
     e76:	20 91 96 01 	lds	r18, 0x0196	; 0x800196 <temperatura>
     e7a:	30 91 97 01 	lds	r19, 0x0197	; 0x800197 <temperatura+0x1>
     e7e:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <temperatura+0x2>
     e82:	50 91 99 01 	lds	r21, 0x0199	; 0x800199 <temperatura+0x3>
     e86:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <rfid_status>
     e8a:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <servo_pos>
     e8e:	0e 94 64 05 	call	0xac8	; 0xac8 <send_val>
     e92:	9f ef       	ldi	r25, 0xFF	; 255
     e94:	29 e6       	ldi	r18, 0x69	; 105
     e96:	88 e1       	ldi	r24, 0x18	; 24
     e98:	91 50       	subi	r25, 0x01	; 1
     e9a:	20 40       	sbci	r18, 0x00	; 0
     e9c:	80 40       	sbci	r24, 0x00	; 0
     e9e:	e1 f7       	brne	.-8      	; 0xe98 <main+0x2e0>
     ea0:	00 c0       	rjmp	.+0      	; 0xea2 <main+0x2ea>
     ea2:	00 00       	nop
     ea4:	c2 ce       	rjmp	.-636    	; 0xc2a <main+0x72>

00000ea6 <UART_Init>:
		} else {  // Si es un caracter normal
		if (rxIndex < BUFFER_SIZE - 1) {  // Guardar solo hasta 3 digitos
			rxBuffer[rxIndex++] = receivedChar;
		}
	}
}
     ea6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     eaa:	87 e6       	ldi	r24, 0x67	; 103
     eac:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     eb0:	88 e9       	ldi	r24, 0x98	; 152
     eb2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     eb6:	86 e0       	ldi	r24, 0x06	; 6
     eb8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     ebc:	08 95       	ret

00000ebe <UART_Read>:
     ebe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ec2:	88 23       	and	r24, r24
     ec4:	1c f4       	brge	.+6      	; 0xecc <UART_Read+0xe>
     ec6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     eca:	08 95       	ret
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	08 95       	ret

00000ed0 <UART_Char>:
     ed0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ed4:	95 ff       	sbrs	r25, 5
     ed6:	fc cf       	rjmp	.-8      	; 0xed0 <UART_Char>
     ed8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     edc:	08 95       	ret

00000ede <UART_Write>:
     ede:	ac 01       	movw	r20, r24
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	07 c0       	rjmp	.+14     	; 0xef2 <UART_Write+0x14>
     ee4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     ee8:	95 ff       	sbrs	r25, 5
     eea:	fc cf       	rjmp	.-8      	; 0xee4 <UART_Write+0x6>
     eec:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     ef0:	2f 5f       	subi	r18, 0xFF	; 255
     ef2:	fa 01       	movw	r30, r20
     ef4:	e2 0f       	add	r30, r18
     ef6:	f1 1d       	adc	r31, r1
     ef8:	30 81       	ld	r19, Z
     efa:	31 11       	cpse	r19, r1
     efc:	f3 cf       	rjmp	.-26     	; 0xee4 <UART_Write+0x6>
     efe:	08 95       	ret

00000f00 <float_to_stringu>:
		while(!(UCSR0A&(1<<UDRE0)));
		UDR0 = texto[i];
	}
}

void float_to_stringu(float num, char *buffer, uint8_t decimales) {
     f00:	8f 92       	push	r8
     f02:	9f 92       	push	r9
     f04:	af 92       	push	r10
     f06:	bf 92       	push	r11
     f08:	cf 92       	push	r12
     f0a:	df 92       	push	r13
     f0c:	ef 92       	push	r14
     f0e:	ff 92       	push	r15
     f10:	0f 93       	push	r16
     f12:	1f 93       	push	r17
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	2a 97       	sbiw	r28, 0x0a	; 10
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	f8 94       	cli
     f22:	de bf       	out	0x3e, r29	; 62
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	cd bf       	out	0x3d, r28	; 61
     f28:	4b 01       	movw	r8, r22
     f2a:	5c 01       	movw	r10, r24
     f2c:	7a 01       	movw	r14, r20
	int parte_entera = (int)num;  // parte entera
     f2e:	0e 94 17 09 	call	0x122e	; 0x122e <__fixsfsi>
     f32:	8b 01       	movw	r16, r22
	int parte_decimal = (int)((num - parte_entera) * 100);  // parte decimal
     f34:	07 2e       	mov	r0, r23
     f36:	00 0c       	add	r0, r0
     f38:	88 0b       	sbc	r24, r24
     f3a:	99 0b       	sbc	r25, r25
     f3c:	0e 94 4f 09 	call	0x129e	; 0x129e <__floatsisf>
     f40:	9b 01       	movw	r18, r22
     f42:	ac 01       	movw	r20, r24
     f44:	c5 01       	movw	r24, r10
     f46:	b4 01       	movw	r22, r8
     f48:	0e 94 38 08 	call	0x1070	; 0x1070 <__subsf3>
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	48 ec       	ldi	r20, 0xC8	; 200
     f52:	52 e4       	ldi	r21, 0x42	; 66
     f54:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
     f58:	0e 94 17 09 	call	0x122e	; 0x122e <__fixsfsi>
     f5c:	6b 01       	movw	r12, r22
	
	if (parte_decimal < 0) parte_decimal *= -1;  // no negativo
     f5e:	77 23       	and	r23, r23
     f60:	24 f4       	brge	.+8      	; 0xf6a <float_to_stringu+0x6a>
     f62:	cc 24       	eor	r12, r12
     f64:	dd 24       	eor	r13, r13
     f66:	c6 1a       	sub	r12, r22
     f68:	d7 0a       	sbc	r13, r23

	// Convertir a caracteres
	int i = 0;
	if (parte_entera == 0) {
     f6a:	01 15       	cp	r16, r1
     f6c:	11 05       	cpc	r17, r1
     f6e:	c1 f4       	brne	.+48     	; 0xfa0 <float_to_stringu+0xa0>
		buffer[i++] = '0';
     f70:	80 e3       	ldi	r24, 0x30	; 48
     f72:	d7 01       	movw	r26, r14
     f74:	8c 93       	st	X, r24
     f76:	e1 e0       	ldi	r30, 0x01	; 1
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	2c c0       	rjmp	.+88     	; 0xfd4 <float_to_stringu+0xd4>
		} else {
		int temp = parte_entera;
		char temp_buffer[10];
		int j = 0;
		while (temp > 0) {  // Extraer digitos
			temp_buffer[j++] = (temp % 10) + '0';
     f7c:	c8 01       	movw	r24, r16
     f7e:	6a e0       	ldi	r22, 0x0A	; 10
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__divmodhi4>
     f86:	e1 e0       	ldi	r30, 0x01	; 1
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	ec 0f       	add	r30, r28
     f8c:	fd 1f       	adc	r31, r29
     f8e:	e2 0f       	add	r30, r18
     f90:	f3 1f       	adc	r31, r19
     f92:	80 5d       	subi	r24, 0xD0	; 208
     f94:	80 83       	st	Z, r24
			temp /= 10;
     f96:	06 2f       	mov	r16, r22
     f98:	17 2f       	mov	r17, r23
		} else {
		int temp = parte_entera;
		char temp_buffer[10];
		int j = 0;
		while (temp > 0) {  // Extraer digitos
			temp_buffer[j++] = (temp % 10) + '0';
     f9a:	2f 5f       	subi	r18, 0xFF	; 255
     f9c:	3f 4f       	sbci	r19, 0xFF	; 255
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <float_to_stringu+0xa4>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
		buffer[i++] = '0';
		} else {
		int temp = parte_entera;
		char temp_buffer[10];
		int j = 0;
		while (temp > 0) {  // Extraer digitos
     fa4:	10 16       	cp	r1, r16
     fa6:	11 06       	cpc	r1, r17
     fa8:	4c f3       	brlt	.-46     	; 0xf7c <float_to_stringu+0x7c>
     faa:	e0 e0       	ldi	r30, 0x00	; 0
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	0f c0       	rjmp	.+30     	; 0xfce <float_to_stringu+0xce>
			temp_buffer[j++] = (temp % 10) + '0';
			temp /= 10;
		}
		while (j > 0) {  // Invertir los digitos
			buffer[i++] = temp_buffer[--j];
     fb0:	c7 01       	movw	r24, r14
     fb2:	8e 0f       	add	r24, r30
     fb4:	9f 1f       	adc	r25, r31
     fb6:	21 50       	subi	r18, 0x01	; 1
     fb8:	31 09       	sbc	r19, r1
     fba:	a1 e0       	ldi	r26, 0x01	; 1
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ac 0f       	add	r26, r28
     fc0:	bd 1f       	adc	r27, r29
     fc2:	a2 0f       	add	r26, r18
     fc4:	b3 1f       	adc	r27, r19
     fc6:	4c 91       	ld	r20, X
     fc8:	dc 01       	movw	r26, r24
     fca:	4c 93       	st	X, r20
     fcc:	31 96       	adiw	r30, 0x01	; 1
		int j = 0;
		while (temp > 0) {  // Extraer digitos
			temp_buffer[j++] = (temp % 10) + '0';
			temp /= 10;
		}
		while (j > 0) {  // Invertir los digitos
     fce:	12 16       	cp	r1, r18
     fd0:	13 06       	cpc	r1, r19
     fd2:	74 f3       	brlt	.-36     	; 0xfb0 <float_to_stringu+0xb0>
			buffer[i++] = temp_buffer[--j];
		}
	}

	// punto decimal
	buffer[i++] = '.';
     fd4:	8f 01       	movw	r16, r30
     fd6:	0f 5f       	subi	r16, 0xFF	; 255
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
     fda:	d7 01       	movw	r26, r14
     fdc:	ae 0f       	add	r26, r30
     fde:	bf 1f       	adc	r27, r31
     fe0:	8e e2       	ldi	r24, 0x2E	; 46
     fe2:	8c 93       	st	X, r24

	// decimal a caracteres
	buffer[i++] = (parte_decimal / 10) + '0';
     fe4:	9f 01       	movw	r18, r30
     fe6:	2e 5f       	subi	r18, 0xFE	; 254
     fe8:	3f 4f       	sbci	r19, 0xFF	; 255
     fea:	0e 0d       	add	r16, r14
     fec:	1f 1d       	adc	r17, r15
     fee:	c6 01       	movw	r24, r12
     ff0:	6a e0       	ldi	r22, 0x0A	; 10
     ff2:	70 e0       	ldi	r23, 0x00	; 0
     ff4:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__divmodhi4>
     ff8:	60 5d       	subi	r22, 0xD0	; 208
     ffa:	d8 01       	movw	r26, r16
     ffc:	6c 93       	st	X, r22
	buffer[i++] = (parte_decimal % 10) + '0';
     ffe:	33 96       	adiw	r30, 0x03	; 3
    1000:	d7 01       	movw	r26, r14
    1002:	a2 0f       	add	r26, r18
    1004:	b3 1f       	adc	r27, r19
    1006:	80 5d       	subi	r24, 0xD0	; 208
    1008:	8c 93       	st	X, r24

	
	buffer[i] = '\0';
    100a:	ee 0d       	add	r30, r14
    100c:	ff 1d       	adc	r31, r15
    100e:	10 82       	st	Z, r1
}
    1010:	2a 96       	adiw	r28, 0x0a	; 10
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	ff 90       	pop	r15
    1026:	ef 90       	pop	r14
    1028:	df 90       	pop	r13
    102a:	cf 90       	pop	r12
    102c:	bf 90       	pop	r11
    102e:	af 90       	pop	r10
    1030:	9f 90       	pop	r9
    1032:	8f 90       	pop	r8
    1034:	08 95       	ret

00001036 <UART_Var>:

void UART_Var(float v){
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	2a 97       	sbiw	r28, 0x0a	; 10
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
	char str[10];
	float_to_stringu(v, str, 2);
    104a:	22 e0       	ldi	r18, 0x02	; 2
    104c:	ae 01       	movw	r20, r28
    104e:	4f 5f       	subi	r20, 0xFF	; 255
    1050:	5f 4f       	sbci	r21, 0xFF	; 255
    1052:	0e 94 80 07 	call	0xf00	; 0xf00 <float_to_stringu>
	UART_Write(str);
    1056:	ce 01       	movw	r24, r28
    1058:	01 96       	adiw	r24, 0x01	; 1
    105a:	0e 94 6f 07 	call	0xede	; 0xede <UART_Write>
}
    105e:	2a 96       	adiw	r28, 0x0a	; 10
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <__subsf3>:
    1070:	50 58       	subi	r21, 0x80	; 128

00001072 <__addsf3>:
    1072:	bb 27       	eor	r27, r27
    1074:	aa 27       	eor	r26, r26
    1076:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__addsf3x>
    107a:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__fp_round>
    107e:	0e 94 93 09 	call	0x1326	; 0x1326 <__fp_pscA>
    1082:	38 f0       	brcs	.+14     	; 0x1092 <__addsf3+0x20>
    1084:	0e 94 9a 09 	call	0x1334	; 0x1334 <__fp_pscB>
    1088:	20 f0       	brcs	.+8      	; 0x1092 <__addsf3+0x20>
    108a:	39 f4       	brne	.+14     	; 0x109a <__addsf3+0x28>
    108c:	9f 3f       	cpi	r25, 0xFF	; 255
    108e:	19 f4       	brne	.+6      	; 0x1096 <__addsf3+0x24>
    1090:	26 f4       	brtc	.+8      	; 0x109a <__addsf3+0x28>
    1092:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_nan>
    1096:	0e f4       	brtc	.+2      	; 0x109a <__addsf3+0x28>
    1098:	e0 95       	com	r30
    109a:	e7 fb       	bst	r30, 7
    109c:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__fp_inf>

000010a0 <__addsf3x>:
    10a0:	e9 2f       	mov	r30, r25
    10a2:	0e 94 b2 09 	call	0x1364	; 0x1364 <__fp_split3>
    10a6:	58 f3       	brcs	.-42     	; 0x107e <__addsf3+0xc>
    10a8:	ba 17       	cp	r27, r26
    10aa:	62 07       	cpc	r22, r18
    10ac:	73 07       	cpc	r23, r19
    10ae:	84 07       	cpc	r24, r20
    10b0:	95 07       	cpc	r25, r21
    10b2:	20 f0       	brcs	.+8      	; 0x10bc <__addsf3x+0x1c>
    10b4:	79 f4       	brne	.+30     	; 0x10d4 <__addsf3x+0x34>
    10b6:	a6 f5       	brtc	.+104    	; 0x1120 <__addsf3x+0x80>
    10b8:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__fp_zero>
    10bc:	0e f4       	brtc	.+2      	; 0x10c0 <__addsf3x+0x20>
    10be:	e0 95       	com	r30
    10c0:	0b 2e       	mov	r0, r27
    10c2:	ba 2f       	mov	r27, r26
    10c4:	a0 2d       	mov	r26, r0
    10c6:	0b 01       	movw	r0, r22
    10c8:	b9 01       	movw	r22, r18
    10ca:	90 01       	movw	r18, r0
    10cc:	0c 01       	movw	r0, r24
    10ce:	ca 01       	movw	r24, r20
    10d0:	a0 01       	movw	r20, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	ff 27       	eor	r31, r31
    10d6:	59 1b       	sub	r21, r25
    10d8:	99 f0       	breq	.+38     	; 0x1100 <__addsf3x+0x60>
    10da:	59 3f       	cpi	r21, 0xF9	; 249
    10dc:	50 f4       	brcc	.+20     	; 0x10f2 <__addsf3x+0x52>
    10de:	50 3e       	cpi	r21, 0xE0	; 224
    10e0:	68 f1       	brcs	.+90     	; 0x113c <__addsf3x+0x9c>
    10e2:	1a 16       	cp	r1, r26
    10e4:	f0 40       	sbci	r31, 0x00	; 0
    10e6:	a2 2f       	mov	r26, r18
    10e8:	23 2f       	mov	r18, r19
    10ea:	34 2f       	mov	r19, r20
    10ec:	44 27       	eor	r20, r20
    10ee:	58 5f       	subi	r21, 0xF8	; 248
    10f0:	f3 cf       	rjmp	.-26     	; 0x10d8 <__addsf3x+0x38>
    10f2:	46 95       	lsr	r20
    10f4:	37 95       	ror	r19
    10f6:	27 95       	ror	r18
    10f8:	a7 95       	ror	r26
    10fa:	f0 40       	sbci	r31, 0x00	; 0
    10fc:	53 95       	inc	r21
    10fe:	c9 f7       	brne	.-14     	; 0x10f2 <__addsf3x+0x52>
    1100:	7e f4       	brtc	.+30     	; 0x1120 <__addsf3x+0x80>
    1102:	1f 16       	cp	r1, r31
    1104:	ba 0b       	sbc	r27, r26
    1106:	62 0b       	sbc	r22, r18
    1108:	73 0b       	sbc	r23, r19
    110a:	84 0b       	sbc	r24, r20
    110c:	ba f0       	brmi	.+46     	; 0x113c <__addsf3x+0x9c>
    110e:	91 50       	subi	r25, 0x01	; 1
    1110:	a1 f0       	breq	.+40     	; 0x113a <__addsf3x+0x9a>
    1112:	ff 0f       	add	r31, r31
    1114:	bb 1f       	adc	r27, r27
    1116:	66 1f       	adc	r22, r22
    1118:	77 1f       	adc	r23, r23
    111a:	88 1f       	adc	r24, r24
    111c:	c2 f7       	brpl	.-16     	; 0x110e <__addsf3x+0x6e>
    111e:	0e c0       	rjmp	.+28     	; 0x113c <__addsf3x+0x9c>
    1120:	ba 0f       	add	r27, r26
    1122:	62 1f       	adc	r22, r18
    1124:	73 1f       	adc	r23, r19
    1126:	84 1f       	adc	r24, r20
    1128:	48 f4       	brcc	.+18     	; 0x113c <__addsf3x+0x9c>
    112a:	87 95       	ror	r24
    112c:	77 95       	ror	r23
    112e:	67 95       	ror	r22
    1130:	b7 95       	ror	r27
    1132:	f7 95       	ror	r31
    1134:	9e 3f       	cpi	r25, 0xFE	; 254
    1136:	08 f0       	brcs	.+2      	; 0x113a <__addsf3x+0x9a>
    1138:	b0 cf       	rjmp	.-160    	; 0x109a <__addsf3+0x28>
    113a:	93 95       	inc	r25
    113c:	88 0f       	add	r24, r24
    113e:	08 f0       	brcs	.+2      	; 0x1142 <__addsf3x+0xa2>
    1140:	99 27       	eor	r25, r25
    1142:	ee 0f       	add	r30, r30
    1144:	97 95       	ror	r25
    1146:	87 95       	ror	r24
    1148:	08 95       	ret

0000114a <__divsf3>:
    114a:	0e 94 b9 08 	call	0x1172	; 0x1172 <__divsf3x>
    114e:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__fp_round>
    1152:	0e 94 9a 09 	call	0x1334	; 0x1334 <__fp_pscB>
    1156:	58 f0       	brcs	.+22     	; 0x116e <__divsf3+0x24>
    1158:	0e 94 93 09 	call	0x1326	; 0x1326 <__fp_pscA>
    115c:	40 f0       	brcs	.+16     	; 0x116e <__divsf3+0x24>
    115e:	29 f4       	brne	.+10     	; 0x116a <__divsf3+0x20>
    1160:	5f 3f       	cpi	r21, 0xFF	; 255
    1162:	29 f0       	breq	.+10     	; 0x116e <__divsf3+0x24>
    1164:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__fp_inf>
    1168:	51 11       	cpse	r21, r1
    116a:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_szero>
    116e:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_nan>

00001172 <__divsf3x>:
    1172:	0e 94 b2 09 	call	0x1364	; 0x1364 <__fp_split3>
    1176:	68 f3       	brcs	.-38     	; 0x1152 <__divsf3+0x8>

00001178 <__divsf3_pse>:
    1178:	99 23       	and	r25, r25
    117a:	b1 f3       	breq	.-20     	; 0x1168 <__divsf3+0x1e>
    117c:	55 23       	and	r21, r21
    117e:	91 f3       	breq	.-28     	; 0x1164 <__divsf3+0x1a>
    1180:	95 1b       	sub	r25, r21
    1182:	55 0b       	sbc	r21, r21
    1184:	bb 27       	eor	r27, r27
    1186:	aa 27       	eor	r26, r26
    1188:	62 17       	cp	r22, r18
    118a:	73 07       	cpc	r23, r19
    118c:	84 07       	cpc	r24, r20
    118e:	38 f0       	brcs	.+14     	; 0x119e <__divsf3_pse+0x26>
    1190:	9f 5f       	subi	r25, 0xFF	; 255
    1192:	5f 4f       	sbci	r21, 0xFF	; 255
    1194:	22 0f       	add	r18, r18
    1196:	33 1f       	adc	r19, r19
    1198:	44 1f       	adc	r20, r20
    119a:	aa 1f       	adc	r26, r26
    119c:	a9 f3       	breq	.-22     	; 0x1188 <__divsf3_pse+0x10>
    119e:	35 d0       	rcall	.+106    	; 0x120a <__divsf3_pse+0x92>
    11a0:	0e 2e       	mov	r0, r30
    11a2:	3a f0       	brmi	.+14     	; 0x11b2 <__divsf3_pse+0x3a>
    11a4:	e0 e8       	ldi	r30, 0x80	; 128
    11a6:	32 d0       	rcall	.+100    	; 0x120c <__divsf3_pse+0x94>
    11a8:	91 50       	subi	r25, 0x01	; 1
    11aa:	50 40       	sbci	r21, 0x00	; 0
    11ac:	e6 95       	lsr	r30
    11ae:	00 1c       	adc	r0, r0
    11b0:	ca f7       	brpl	.-14     	; 0x11a4 <__divsf3_pse+0x2c>
    11b2:	2b d0       	rcall	.+86     	; 0x120a <__divsf3_pse+0x92>
    11b4:	fe 2f       	mov	r31, r30
    11b6:	29 d0       	rcall	.+82     	; 0x120a <__divsf3_pse+0x92>
    11b8:	66 0f       	add	r22, r22
    11ba:	77 1f       	adc	r23, r23
    11bc:	88 1f       	adc	r24, r24
    11be:	bb 1f       	adc	r27, r27
    11c0:	26 17       	cp	r18, r22
    11c2:	37 07       	cpc	r19, r23
    11c4:	48 07       	cpc	r20, r24
    11c6:	ab 07       	cpc	r26, r27
    11c8:	b0 e8       	ldi	r27, 0x80	; 128
    11ca:	09 f0       	breq	.+2      	; 0x11ce <__divsf3_pse+0x56>
    11cc:	bb 0b       	sbc	r27, r27
    11ce:	80 2d       	mov	r24, r0
    11d0:	bf 01       	movw	r22, r30
    11d2:	ff 27       	eor	r31, r31
    11d4:	93 58       	subi	r25, 0x83	; 131
    11d6:	5f 4f       	sbci	r21, 0xFF	; 255
    11d8:	3a f0       	brmi	.+14     	; 0x11e8 <__divsf3_pse+0x70>
    11da:	9e 3f       	cpi	r25, 0xFE	; 254
    11dc:	51 05       	cpc	r21, r1
    11de:	78 f0       	brcs	.+30     	; 0x11fe <__divsf3_pse+0x86>
    11e0:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__fp_inf>
    11e4:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_szero>
    11e8:	5f 3f       	cpi	r21, 0xFF	; 255
    11ea:	e4 f3       	brlt	.-8      	; 0x11e4 <__divsf3_pse+0x6c>
    11ec:	98 3e       	cpi	r25, 0xE8	; 232
    11ee:	d4 f3       	brlt	.-12     	; 0x11e4 <__divsf3_pse+0x6c>
    11f0:	86 95       	lsr	r24
    11f2:	77 95       	ror	r23
    11f4:	67 95       	ror	r22
    11f6:	b7 95       	ror	r27
    11f8:	f7 95       	ror	r31
    11fa:	9f 5f       	subi	r25, 0xFF	; 255
    11fc:	c9 f7       	brne	.-14     	; 0x11f0 <__divsf3_pse+0x78>
    11fe:	88 0f       	add	r24, r24
    1200:	91 1d       	adc	r25, r1
    1202:	96 95       	lsr	r25
    1204:	87 95       	ror	r24
    1206:	97 f9       	bld	r25, 7
    1208:	08 95       	ret
    120a:	e1 e0       	ldi	r30, 0x01	; 1
    120c:	66 0f       	add	r22, r22
    120e:	77 1f       	adc	r23, r23
    1210:	88 1f       	adc	r24, r24
    1212:	bb 1f       	adc	r27, r27
    1214:	62 17       	cp	r22, r18
    1216:	73 07       	cpc	r23, r19
    1218:	84 07       	cpc	r24, r20
    121a:	ba 07       	cpc	r27, r26
    121c:	20 f0       	brcs	.+8      	; 0x1226 <__divsf3_pse+0xae>
    121e:	62 1b       	sub	r22, r18
    1220:	73 0b       	sbc	r23, r19
    1222:	84 0b       	sbc	r24, r20
    1224:	ba 0b       	sbc	r27, r26
    1226:	ee 1f       	adc	r30, r30
    1228:	88 f7       	brcc	.-30     	; 0x120c <__divsf3_pse+0x94>
    122a:	e0 95       	com	r30
    122c:	08 95       	ret

0000122e <__fixsfsi>:
    122e:	0e 94 1e 09 	call	0x123c	; 0x123c <__fixunssfsi>
    1232:	68 94       	set
    1234:	b1 11       	cpse	r27, r1
    1236:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_szero>
    123a:	08 95       	ret

0000123c <__fixunssfsi>:
    123c:	0e 94 ba 09 	call	0x1374	; 0x1374 <__fp_splitA>
    1240:	88 f0       	brcs	.+34     	; 0x1264 <__fixunssfsi+0x28>
    1242:	9f 57       	subi	r25, 0x7F	; 127
    1244:	98 f0       	brcs	.+38     	; 0x126c <__fixunssfsi+0x30>
    1246:	b9 2f       	mov	r27, r25
    1248:	99 27       	eor	r25, r25
    124a:	b7 51       	subi	r27, 0x17	; 23
    124c:	b0 f0       	brcs	.+44     	; 0x127a <__fixunssfsi+0x3e>
    124e:	e1 f0       	breq	.+56     	; 0x1288 <__fixunssfsi+0x4c>
    1250:	66 0f       	add	r22, r22
    1252:	77 1f       	adc	r23, r23
    1254:	88 1f       	adc	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	1a f0       	brmi	.+6      	; 0x1260 <__fixunssfsi+0x24>
    125a:	ba 95       	dec	r27
    125c:	c9 f7       	brne	.-14     	; 0x1250 <__fixunssfsi+0x14>
    125e:	14 c0       	rjmp	.+40     	; 0x1288 <__fixunssfsi+0x4c>
    1260:	b1 30       	cpi	r27, 0x01	; 1
    1262:	91 f0       	breq	.+36     	; 0x1288 <__fixunssfsi+0x4c>
    1264:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <__fp_zero>
    1268:	b1 e0       	ldi	r27, 0x01	; 1
    126a:	08 95       	ret
    126c:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__fp_zero>
    1270:	67 2f       	mov	r22, r23
    1272:	78 2f       	mov	r23, r24
    1274:	88 27       	eor	r24, r24
    1276:	b8 5f       	subi	r27, 0xF8	; 248
    1278:	39 f0       	breq	.+14     	; 0x1288 <__fixunssfsi+0x4c>
    127a:	b9 3f       	cpi	r27, 0xF9	; 249
    127c:	cc f3       	brlt	.-14     	; 0x1270 <__fixunssfsi+0x34>
    127e:	86 95       	lsr	r24
    1280:	77 95       	ror	r23
    1282:	67 95       	ror	r22
    1284:	b3 95       	inc	r27
    1286:	d9 f7       	brne	.-10     	; 0x127e <__fixunssfsi+0x42>
    1288:	3e f4       	brtc	.+14     	; 0x1298 <__fixunssfsi+0x5c>
    128a:	90 95       	com	r25
    128c:	80 95       	com	r24
    128e:	70 95       	com	r23
    1290:	61 95       	neg	r22
    1292:	7f 4f       	sbci	r23, 0xFF	; 255
    1294:	8f 4f       	sbci	r24, 0xFF	; 255
    1296:	9f 4f       	sbci	r25, 0xFF	; 255
    1298:	08 95       	ret

0000129a <__floatunsisf>:
    129a:	e8 94       	clt
    129c:	09 c0       	rjmp	.+18     	; 0x12b0 <__floatsisf+0x12>

0000129e <__floatsisf>:
    129e:	97 fb       	bst	r25, 7
    12a0:	3e f4       	brtc	.+14     	; 0x12b0 <__floatsisf+0x12>
    12a2:	90 95       	com	r25
    12a4:	80 95       	com	r24
    12a6:	70 95       	com	r23
    12a8:	61 95       	neg	r22
    12aa:	7f 4f       	sbci	r23, 0xFF	; 255
    12ac:	8f 4f       	sbci	r24, 0xFF	; 255
    12ae:	9f 4f       	sbci	r25, 0xFF	; 255
    12b0:	99 23       	and	r25, r25
    12b2:	a9 f0       	breq	.+42     	; 0x12de <__floatsisf+0x40>
    12b4:	f9 2f       	mov	r31, r25
    12b6:	96 e9       	ldi	r25, 0x96	; 150
    12b8:	bb 27       	eor	r27, r27
    12ba:	93 95       	inc	r25
    12bc:	f6 95       	lsr	r31
    12be:	87 95       	ror	r24
    12c0:	77 95       	ror	r23
    12c2:	67 95       	ror	r22
    12c4:	b7 95       	ror	r27
    12c6:	f1 11       	cpse	r31, r1
    12c8:	f8 cf       	rjmp	.-16     	; 0x12ba <__floatsisf+0x1c>
    12ca:	fa f4       	brpl	.+62     	; 0x130a <__floatsisf+0x6c>
    12cc:	bb 0f       	add	r27, r27
    12ce:	11 f4       	brne	.+4      	; 0x12d4 <__floatsisf+0x36>
    12d0:	60 ff       	sbrs	r22, 0
    12d2:	1b c0       	rjmp	.+54     	; 0x130a <__floatsisf+0x6c>
    12d4:	6f 5f       	subi	r22, 0xFF	; 255
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255
    12d8:	8f 4f       	sbci	r24, 0xFF	; 255
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	16 c0       	rjmp	.+44     	; 0x130a <__floatsisf+0x6c>
    12de:	88 23       	and	r24, r24
    12e0:	11 f0       	breq	.+4      	; 0x12e6 <__floatsisf+0x48>
    12e2:	96 e9       	ldi	r25, 0x96	; 150
    12e4:	11 c0       	rjmp	.+34     	; 0x1308 <__floatsisf+0x6a>
    12e6:	77 23       	and	r23, r23
    12e8:	21 f0       	breq	.+8      	; 0x12f2 <__floatsisf+0x54>
    12ea:	9e e8       	ldi	r25, 0x8E	; 142
    12ec:	87 2f       	mov	r24, r23
    12ee:	76 2f       	mov	r23, r22
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <__floatsisf+0x5e>
    12f2:	66 23       	and	r22, r22
    12f4:	71 f0       	breq	.+28     	; 0x1312 <__floatsisf+0x74>
    12f6:	96 e8       	ldi	r25, 0x86	; 134
    12f8:	86 2f       	mov	r24, r22
    12fa:	70 e0       	ldi	r23, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	2a f0       	brmi	.+10     	; 0x130a <__floatsisf+0x6c>
    1300:	9a 95       	dec	r25
    1302:	66 0f       	add	r22, r22
    1304:	77 1f       	adc	r23, r23
    1306:	88 1f       	adc	r24, r24
    1308:	da f7       	brpl	.-10     	; 0x1300 <__floatsisf+0x62>
    130a:	88 0f       	add	r24, r24
    130c:	96 95       	lsr	r25
    130e:	87 95       	ror	r24
    1310:	97 f9       	bld	r25, 7
    1312:	08 95       	ret

00001314 <__fp_inf>:
    1314:	97 f9       	bld	r25, 7
    1316:	9f 67       	ori	r25, 0x7F	; 127
    1318:	80 e8       	ldi	r24, 0x80	; 128
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	08 95       	ret

00001320 <__fp_nan>:
    1320:	9f ef       	ldi	r25, 0xFF	; 255
    1322:	80 ec       	ldi	r24, 0xC0	; 192
    1324:	08 95       	ret

00001326 <__fp_pscA>:
    1326:	00 24       	eor	r0, r0
    1328:	0a 94       	dec	r0
    132a:	16 16       	cp	r1, r22
    132c:	17 06       	cpc	r1, r23
    132e:	18 06       	cpc	r1, r24
    1330:	09 06       	cpc	r0, r25
    1332:	08 95       	ret

00001334 <__fp_pscB>:
    1334:	00 24       	eor	r0, r0
    1336:	0a 94       	dec	r0
    1338:	12 16       	cp	r1, r18
    133a:	13 06       	cpc	r1, r19
    133c:	14 06       	cpc	r1, r20
    133e:	05 06       	cpc	r0, r21
    1340:	08 95       	ret

00001342 <__fp_round>:
    1342:	09 2e       	mov	r0, r25
    1344:	03 94       	inc	r0
    1346:	00 0c       	add	r0, r0
    1348:	11 f4       	brne	.+4      	; 0x134e <__fp_round+0xc>
    134a:	88 23       	and	r24, r24
    134c:	52 f0       	brmi	.+20     	; 0x1362 <__fp_round+0x20>
    134e:	bb 0f       	add	r27, r27
    1350:	40 f4       	brcc	.+16     	; 0x1362 <__fp_round+0x20>
    1352:	bf 2b       	or	r27, r31
    1354:	11 f4       	brne	.+4      	; 0x135a <__fp_round+0x18>
    1356:	60 ff       	sbrs	r22, 0
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <__fp_round+0x20>
    135a:	6f 5f       	subi	r22, 0xFF	; 255
    135c:	7f 4f       	sbci	r23, 0xFF	; 255
    135e:	8f 4f       	sbci	r24, 0xFF	; 255
    1360:	9f 4f       	sbci	r25, 0xFF	; 255
    1362:	08 95       	ret

00001364 <__fp_split3>:
    1364:	57 fd       	sbrc	r21, 7
    1366:	90 58       	subi	r25, 0x80	; 128
    1368:	44 0f       	add	r20, r20
    136a:	55 1f       	adc	r21, r21
    136c:	59 f0       	breq	.+22     	; 0x1384 <__fp_splitA+0x10>
    136e:	5f 3f       	cpi	r21, 0xFF	; 255
    1370:	71 f0       	breq	.+28     	; 0x138e <__fp_splitA+0x1a>
    1372:	47 95       	ror	r20

00001374 <__fp_splitA>:
    1374:	88 0f       	add	r24, r24
    1376:	97 fb       	bst	r25, 7
    1378:	99 1f       	adc	r25, r25
    137a:	61 f0       	breq	.+24     	; 0x1394 <__fp_splitA+0x20>
    137c:	9f 3f       	cpi	r25, 0xFF	; 255
    137e:	79 f0       	breq	.+30     	; 0x139e <__fp_splitA+0x2a>
    1380:	87 95       	ror	r24
    1382:	08 95       	ret
    1384:	12 16       	cp	r1, r18
    1386:	13 06       	cpc	r1, r19
    1388:	14 06       	cpc	r1, r20
    138a:	55 1f       	adc	r21, r21
    138c:	f2 cf       	rjmp	.-28     	; 0x1372 <__fp_split3+0xe>
    138e:	46 95       	lsr	r20
    1390:	f1 df       	rcall	.-30     	; 0x1374 <__fp_splitA>
    1392:	08 c0       	rjmp	.+16     	; 0x13a4 <__fp_splitA+0x30>
    1394:	16 16       	cp	r1, r22
    1396:	17 06       	cpc	r1, r23
    1398:	18 06       	cpc	r1, r24
    139a:	99 1f       	adc	r25, r25
    139c:	f1 cf       	rjmp	.-30     	; 0x1380 <__fp_splitA+0xc>
    139e:	86 95       	lsr	r24
    13a0:	71 05       	cpc	r23, r1
    13a2:	61 05       	cpc	r22, r1
    13a4:	08 94       	sec
    13a6:	08 95       	ret

000013a8 <__fp_zero>:
    13a8:	e8 94       	clt

000013aa <__fp_szero>:
    13aa:	bb 27       	eor	r27, r27
    13ac:	66 27       	eor	r22, r22
    13ae:	77 27       	eor	r23, r23
    13b0:	cb 01       	movw	r24, r22
    13b2:	97 f9       	bld	r25, 7
    13b4:	08 95       	ret

000013b6 <__gesf2>:
    13b6:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__fp_cmp>
    13ba:	08 f4       	brcc	.+2      	; 0x13be <__gesf2+0x8>
    13bc:	8f ef       	ldi	r24, 0xFF	; 255
    13be:	08 95       	ret

000013c0 <__mulsf3>:
    13c0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3x>
    13c4:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__fp_round>
    13c8:	0e 94 93 09 	call	0x1326	; 0x1326 <__fp_pscA>
    13cc:	38 f0       	brcs	.+14     	; 0x13dc <__mulsf3+0x1c>
    13ce:	0e 94 9a 09 	call	0x1334	; 0x1334 <__fp_pscB>
    13d2:	20 f0       	brcs	.+8      	; 0x13dc <__mulsf3+0x1c>
    13d4:	95 23       	and	r25, r21
    13d6:	11 f0       	breq	.+4      	; 0x13dc <__mulsf3+0x1c>
    13d8:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__fp_inf>
    13dc:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_nan>
    13e0:	11 24       	eor	r1, r1
    13e2:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_szero>

000013e6 <__mulsf3x>:
    13e6:	0e 94 b2 09 	call	0x1364	; 0x1364 <__fp_split3>
    13ea:	70 f3       	brcs	.-36     	; 0x13c8 <__mulsf3+0x8>

000013ec <__mulsf3_pse>:
    13ec:	95 9f       	mul	r25, r21
    13ee:	c1 f3       	breq	.-16     	; 0x13e0 <__mulsf3+0x20>
    13f0:	95 0f       	add	r25, r21
    13f2:	50 e0       	ldi	r21, 0x00	; 0
    13f4:	55 1f       	adc	r21, r21
    13f6:	62 9f       	mul	r22, r18
    13f8:	f0 01       	movw	r30, r0
    13fa:	72 9f       	mul	r23, r18
    13fc:	bb 27       	eor	r27, r27
    13fe:	f0 0d       	add	r31, r0
    1400:	b1 1d       	adc	r27, r1
    1402:	63 9f       	mul	r22, r19
    1404:	aa 27       	eor	r26, r26
    1406:	f0 0d       	add	r31, r0
    1408:	b1 1d       	adc	r27, r1
    140a:	aa 1f       	adc	r26, r26
    140c:	64 9f       	mul	r22, r20
    140e:	66 27       	eor	r22, r22
    1410:	b0 0d       	add	r27, r0
    1412:	a1 1d       	adc	r26, r1
    1414:	66 1f       	adc	r22, r22
    1416:	82 9f       	mul	r24, r18
    1418:	22 27       	eor	r18, r18
    141a:	b0 0d       	add	r27, r0
    141c:	a1 1d       	adc	r26, r1
    141e:	62 1f       	adc	r22, r18
    1420:	73 9f       	mul	r23, r19
    1422:	b0 0d       	add	r27, r0
    1424:	a1 1d       	adc	r26, r1
    1426:	62 1f       	adc	r22, r18
    1428:	83 9f       	mul	r24, r19
    142a:	a0 0d       	add	r26, r0
    142c:	61 1d       	adc	r22, r1
    142e:	22 1f       	adc	r18, r18
    1430:	74 9f       	mul	r23, r20
    1432:	33 27       	eor	r19, r19
    1434:	a0 0d       	add	r26, r0
    1436:	61 1d       	adc	r22, r1
    1438:	23 1f       	adc	r18, r19
    143a:	84 9f       	mul	r24, r20
    143c:	60 0d       	add	r22, r0
    143e:	21 1d       	adc	r18, r1
    1440:	82 2f       	mov	r24, r18
    1442:	76 2f       	mov	r23, r22
    1444:	6a 2f       	mov	r22, r26
    1446:	11 24       	eor	r1, r1
    1448:	9f 57       	subi	r25, 0x7F	; 127
    144a:	50 40       	sbci	r21, 0x00	; 0
    144c:	9a f0       	brmi	.+38     	; 0x1474 <__mulsf3_pse+0x88>
    144e:	f1 f0       	breq	.+60     	; 0x148c <__mulsf3_pse+0xa0>
    1450:	88 23       	and	r24, r24
    1452:	4a f0       	brmi	.+18     	; 0x1466 <__mulsf3_pse+0x7a>
    1454:	ee 0f       	add	r30, r30
    1456:	ff 1f       	adc	r31, r31
    1458:	bb 1f       	adc	r27, r27
    145a:	66 1f       	adc	r22, r22
    145c:	77 1f       	adc	r23, r23
    145e:	88 1f       	adc	r24, r24
    1460:	91 50       	subi	r25, 0x01	; 1
    1462:	50 40       	sbci	r21, 0x00	; 0
    1464:	a9 f7       	brne	.-22     	; 0x1450 <__mulsf3_pse+0x64>
    1466:	9e 3f       	cpi	r25, 0xFE	; 254
    1468:	51 05       	cpc	r21, r1
    146a:	80 f0       	brcs	.+32     	; 0x148c <__mulsf3_pse+0xa0>
    146c:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__fp_inf>
    1470:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_szero>
    1474:	5f 3f       	cpi	r21, 0xFF	; 255
    1476:	e4 f3       	brlt	.-8      	; 0x1470 <__mulsf3_pse+0x84>
    1478:	98 3e       	cpi	r25, 0xE8	; 232
    147a:	d4 f3       	brlt	.-12     	; 0x1470 <__mulsf3_pse+0x84>
    147c:	86 95       	lsr	r24
    147e:	77 95       	ror	r23
    1480:	67 95       	ror	r22
    1482:	b7 95       	ror	r27
    1484:	f7 95       	ror	r31
    1486:	e7 95       	ror	r30
    1488:	9f 5f       	subi	r25, 0xFF	; 255
    148a:	c1 f7       	brne	.-16     	; 0x147c <__mulsf3_pse+0x90>
    148c:	fe 2b       	or	r31, r30
    148e:	88 0f       	add	r24, r24
    1490:	91 1d       	adc	r25, r1
    1492:	96 95       	lsr	r25
    1494:	87 95       	ror	r24
    1496:	97 f9       	bld	r25, 7
    1498:	08 95       	ret

0000149a <pow>:
    149a:	fa 01       	movw	r30, r20
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	30 96       	adiw	r30, 0x00	; 0
    14a2:	21 05       	cpc	r18, r1
    14a4:	31 05       	cpc	r19, r1
    14a6:	a1 f1       	breq	.+104    	; 0x1510 <pow+0x76>
    14a8:	61 15       	cp	r22, r1
    14aa:	71 05       	cpc	r23, r1
    14ac:	61 f4       	brne	.+24     	; 0x14c6 <pow+0x2c>
    14ae:	80 38       	cpi	r24, 0x80	; 128
    14b0:	bf e3       	ldi	r27, 0x3F	; 63
    14b2:	9b 07       	cpc	r25, r27
    14b4:	49 f1       	breq	.+82     	; 0x1508 <pow+0x6e>
    14b6:	68 94       	set
    14b8:	90 38       	cpi	r25, 0x80	; 128
    14ba:	81 05       	cpc	r24, r1
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <pow+0x3c>
    14be:	80 38       	cpi	r24, 0x80	; 128
    14c0:	bf ef       	ldi	r27, 0xFF	; 255
    14c2:	9b 07       	cpc	r25, r27
    14c4:	41 f0       	breq	.+16     	; 0x14d6 <pow+0x3c>
    14c6:	99 23       	and	r25, r25
    14c8:	4a f5       	brpl	.+82     	; 0x151c <pow+0x82>
    14ca:	ff 3f       	cpi	r31, 0xFF	; 255
    14cc:	e1 05       	cpc	r30, r1
    14ce:	31 05       	cpc	r19, r1
    14d0:	21 05       	cpc	r18, r1
    14d2:	19 f1       	breq	.+70     	; 0x151a <pow+0x80>
    14d4:	e8 94       	clt
    14d6:	08 94       	sec
    14d8:	e7 95       	ror	r30
    14da:	d9 01       	movw	r26, r18
    14dc:	aa 23       	and	r26, r26
    14de:	29 f4       	brne	.+10     	; 0x14ea <pow+0x50>
    14e0:	ab 2f       	mov	r26, r27
    14e2:	be 2f       	mov	r27, r30
    14e4:	f8 5f       	subi	r31, 0xF8	; 248
    14e6:	d0 f3       	brcs	.-12     	; 0x14dc <pow+0x42>
    14e8:	10 c0       	rjmp	.+32     	; 0x150a <pow+0x70>
    14ea:	ff 5f       	subi	r31, 0xFF	; 255
    14ec:	70 f4       	brcc	.+28     	; 0x150a <pow+0x70>
    14ee:	a6 95       	lsr	r26
    14f0:	e0 f7       	brcc	.-8      	; 0x14ea <pow+0x50>
    14f2:	f7 39       	cpi	r31, 0x97	; 151
    14f4:	50 f0       	brcs	.+20     	; 0x150a <pow+0x70>
    14f6:	19 f0       	breq	.+6      	; 0x14fe <pow+0x64>
    14f8:	ff 3a       	cpi	r31, 0xAF	; 175
    14fa:	38 f4       	brcc	.+14     	; 0x150a <pow+0x70>
    14fc:	9f 77       	andi	r25, 0x7F	; 127
    14fe:	9f 93       	push	r25
    1500:	0d d0       	rcall	.+26     	; 0x151c <pow+0x82>
    1502:	0f 90       	pop	r0
    1504:	07 fc       	sbrc	r0, 7
    1506:	90 58       	subi	r25, 0x80	; 128
    1508:	08 95       	ret
    150a:	46 f0       	brts	.+16     	; 0x151c <pow+0x82>
    150c:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_nan>
    1510:	60 e0       	ldi	r22, 0x00	; 0
    1512:	70 e0       	ldi	r23, 0x00	; 0
    1514:	80 e8       	ldi	r24, 0x80	; 128
    1516:	9f e3       	ldi	r25, 0x3F	; 63
    1518:	08 95       	ret
    151a:	4f e7       	ldi	r20, 0x7F	; 127
    151c:	9f 77       	andi	r25, 0x7F	; 127
    151e:	5f 93       	push	r21
    1520:	4f 93       	push	r20
    1522:	3f 93       	push	r19
    1524:	2f 93       	push	r18
    1526:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <log>
    152a:	2f 91       	pop	r18
    152c:	3f 91       	pop	r19
    152e:	4f 91       	pop	r20
    1530:	5f 91       	pop	r21
    1532:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__mulsf3>
    1536:	0c 94 a5 0a 	jmp	0x154a	; 0x154a <exp>
    153a:	29 f4       	brne	.+10     	; 0x1546 <pow+0xac>
    153c:	16 f0       	brts	.+4      	; 0x1542 <pow+0xa8>
    153e:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__fp_inf>
    1542:	0c 94 d4 09 	jmp	0x13a8	; 0x13a8 <__fp_zero>
    1546:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_nan>

0000154a <exp>:
    154a:	0e 94 ba 09 	call	0x1374	; 0x1374 <__fp_splitA>
    154e:	a8 f3       	brcs	.-22     	; 0x153a <pow+0xa0>
    1550:	96 38       	cpi	r25, 0x86	; 134
    1552:	a0 f7       	brcc	.-24     	; 0x153c <pow+0xa2>
    1554:	07 f8       	bld	r0, 7
    1556:	0f 92       	push	r0
    1558:	e8 94       	clt
    155a:	2b e3       	ldi	r18, 0x3B	; 59
    155c:	3a ea       	ldi	r19, 0xAA	; 170
    155e:	48 eb       	ldi	r20, 0xB8	; 184
    1560:	5f e7       	ldi	r21, 0x7F	; 127
    1562:	0e 94 f6 09 	call	0x13ec	; 0x13ec <__mulsf3_pse>
    1566:	0f 92       	push	r0
    1568:	0f 92       	push	r0
    156a:	0f 92       	push	r0
    156c:	4d b7       	in	r20, 0x3d	; 61
    156e:	5e b7       	in	r21, 0x3e	; 62
    1570:	0f 92       	push	r0
    1572:	0e 94 b4 0b 	call	0x1768	; 0x1768 <modf>
    1576:	e8 e6       	ldi	r30, 0x68	; 104
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__fp_powser>
    157e:	4f 91       	pop	r20
    1580:	5f 91       	pop	r21
    1582:	ef 91       	pop	r30
    1584:	ff 91       	pop	r31
    1586:	e5 95       	asr	r30
    1588:	ee 1f       	adc	r30, r30
    158a:	ff 1f       	adc	r31, r31
    158c:	49 f0       	breq	.+18     	; 0x15a0 <exp+0x56>
    158e:	fe 57       	subi	r31, 0x7E	; 126
    1590:	e0 68       	ori	r30, 0x80	; 128
    1592:	44 27       	eor	r20, r20
    1594:	ee 0f       	add	r30, r30
    1596:	44 1f       	adc	r20, r20
    1598:	fa 95       	dec	r31
    159a:	e1 f7       	brne	.-8      	; 0x1594 <exp+0x4a>
    159c:	41 95       	neg	r20
    159e:	55 0b       	sbc	r21, r21
    15a0:	0e 94 2e 0b 	call	0x165c	; 0x165c <ldexp>
    15a4:	0f 90       	pop	r0
    15a6:	07 fe       	sbrs	r0, 7
    15a8:	0c 94 22 0b 	jmp	0x1644	; 0x1644 <inverse>
    15ac:	08 95       	ret

000015ae <__fp_cmp>:
    15ae:	99 0f       	add	r25, r25
    15b0:	00 08       	sbc	r0, r0
    15b2:	55 0f       	add	r21, r21
    15b4:	aa 0b       	sbc	r26, r26
    15b6:	e0 e8       	ldi	r30, 0x80	; 128
    15b8:	fe ef       	ldi	r31, 0xFE	; 254
    15ba:	16 16       	cp	r1, r22
    15bc:	17 06       	cpc	r1, r23
    15be:	e8 07       	cpc	r30, r24
    15c0:	f9 07       	cpc	r31, r25
    15c2:	c0 f0       	brcs	.+48     	; 0x15f4 <__fp_cmp+0x46>
    15c4:	12 16       	cp	r1, r18
    15c6:	13 06       	cpc	r1, r19
    15c8:	e4 07       	cpc	r30, r20
    15ca:	f5 07       	cpc	r31, r21
    15cc:	98 f0       	brcs	.+38     	; 0x15f4 <__fp_cmp+0x46>
    15ce:	62 1b       	sub	r22, r18
    15d0:	73 0b       	sbc	r23, r19
    15d2:	84 0b       	sbc	r24, r20
    15d4:	95 0b       	sbc	r25, r21
    15d6:	39 f4       	brne	.+14     	; 0x15e6 <__fp_cmp+0x38>
    15d8:	0a 26       	eor	r0, r26
    15da:	61 f0       	breq	.+24     	; 0x15f4 <__fp_cmp+0x46>
    15dc:	23 2b       	or	r18, r19
    15de:	24 2b       	or	r18, r20
    15e0:	25 2b       	or	r18, r21
    15e2:	21 f4       	brne	.+8      	; 0x15ec <__fp_cmp+0x3e>
    15e4:	08 95       	ret
    15e6:	0a 26       	eor	r0, r26
    15e8:	09 f4       	brne	.+2      	; 0x15ec <__fp_cmp+0x3e>
    15ea:	a1 40       	sbci	r26, 0x01	; 1
    15ec:	a6 95       	lsr	r26
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	81 1d       	adc	r24, r1
    15f2:	81 1d       	adc	r24, r1
    15f4:	08 95       	ret

000015f6 <__fp_powser>:
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	1f 93       	push	r17
    15fc:	0f 93       	push	r16
    15fe:	ff 92       	push	r15
    1600:	ef 92       	push	r14
    1602:	df 92       	push	r13
    1604:	7b 01       	movw	r14, r22
    1606:	8c 01       	movw	r16, r24
    1608:	68 94       	set
    160a:	06 c0       	rjmp	.+12     	; 0x1618 <__fp_powser+0x22>
    160c:	da 2e       	mov	r13, r26
    160e:	ef 01       	movw	r28, r30
    1610:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3x>
    1614:	fe 01       	movw	r30, r28
    1616:	e8 94       	clt
    1618:	a5 91       	lpm	r26, Z+
    161a:	25 91       	lpm	r18, Z+
    161c:	35 91       	lpm	r19, Z+
    161e:	45 91       	lpm	r20, Z+
    1620:	55 91       	lpm	r21, Z+
    1622:	a6 f3       	brts	.-24     	; 0x160c <__fp_powser+0x16>
    1624:	ef 01       	movw	r28, r30
    1626:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__addsf3x>
    162a:	fe 01       	movw	r30, r28
    162c:	97 01       	movw	r18, r14
    162e:	a8 01       	movw	r20, r16
    1630:	da 94       	dec	r13
    1632:	69 f7       	brne	.-38     	; 0x160e <__fp_powser+0x18>
    1634:	df 90       	pop	r13
    1636:	ef 90       	pop	r14
    1638:	ff 90       	pop	r15
    163a:	0f 91       	pop	r16
    163c:	1f 91       	pop	r17
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <inverse>:
    1644:	9b 01       	movw	r18, r22
    1646:	ac 01       	movw	r20, r24
    1648:	60 e0       	ldi	r22, 0x00	; 0
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	80 e8       	ldi	r24, 0x80	; 128
    164e:	9f e3       	ldi	r25, 0x3F	; 63
    1650:	0c 94 a5 08 	jmp	0x114a	; 0x114a <__divsf3>
    1654:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__fp_inf>
    1658:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__fp_mpack>

0000165c <ldexp>:
    165c:	0e 94 ba 09 	call	0x1374	; 0x1374 <__fp_splitA>
    1660:	d8 f3       	brcs	.-10     	; 0x1658 <inverse+0x14>
    1662:	99 23       	and	r25, r25
    1664:	c9 f3       	breq	.-14     	; 0x1658 <inverse+0x14>
    1666:	94 0f       	add	r25, r20
    1668:	51 1d       	adc	r21, r1
    166a:	a3 f3       	brvs	.-24     	; 0x1654 <inverse+0x10>
    166c:	91 50       	subi	r25, 0x01	; 1
    166e:	50 40       	sbci	r21, 0x00	; 0
    1670:	94 f0       	brlt	.+36     	; 0x1696 <ldexp+0x3a>
    1672:	59 f0       	breq	.+22     	; 0x168a <ldexp+0x2e>
    1674:	88 23       	and	r24, r24
    1676:	32 f0       	brmi	.+12     	; 0x1684 <ldexp+0x28>
    1678:	66 0f       	add	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	88 1f       	adc	r24, r24
    167e:	91 50       	subi	r25, 0x01	; 1
    1680:	50 40       	sbci	r21, 0x00	; 0
    1682:	c1 f7       	brne	.-16     	; 0x1674 <ldexp+0x18>
    1684:	9e 3f       	cpi	r25, 0xFE	; 254
    1686:	51 05       	cpc	r21, r1
    1688:	2c f7       	brge	.-54     	; 0x1654 <inverse+0x10>
    168a:	88 0f       	add	r24, r24
    168c:	91 1d       	adc	r25, r1
    168e:	96 95       	lsr	r25
    1690:	87 95       	ror	r24
    1692:	97 f9       	bld	r25, 7
    1694:	08 95       	ret
    1696:	5f 3f       	cpi	r21, 0xFF	; 255
    1698:	ac f0       	brlt	.+42     	; 0x16c4 <ldexp+0x68>
    169a:	98 3e       	cpi	r25, 0xE8	; 232
    169c:	9c f0       	brlt	.+38     	; 0x16c4 <ldexp+0x68>
    169e:	bb 27       	eor	r27, r27
    16a0:	86 95       	lsr	r24
    16a2:	77 95       	ror	r23
    16a4:	67 95       	ror	r22
    16a6:	b7 95       	ror	r27
    16a8:	08 f4       	brcc	.+2      	; 0x16ac <ldexp+0x50>
    16aa:	b1 60       	ori	r27, 0x01	; 1
    16ac:	93 95       	inc	r25
    16ae:	c1 f7       	brne	.-16     	; 0x16a0 <ldexp+0x44>
    16b0:	bb 0f       	add	r27, r27
    16b2:	58 f7       	brcc	.-42     	; 0x168a <ldexp+0x2e>
    16b4:	11 f4       	brne	.+4      	; 0x16ba <ldexp+0x5e>
    16b6:	60 ff       	sbrs	r22, 0
    16b8:	e8 cf       	rjmp	.-48     	; 0x168a <ldexp+0x2e>
    16ba:	6f 5f       	subi	r22, 0xFF	; 255
    16bc:	7f 4f       	sbci	r23, 0xFF	; 255
    16be:	8f 4f       	sbci	r24, 0xFF	; 255
    16c0:	9f 4f       	sbci	r25, 0xFF	; 255
    16c2:	e3 cf       	rjmp	.-58     	; 0x168a <ldexp+0x2e>
    16c4:	0c 94 d5 09 	jmp	0x13aa	; 0x13aa <__fp_szero>
    16c8:	16 f0       	brts	.+4      	; 0x16ce <ldexp+0x72>
    16ca:	0c 94 e8 0b 	jmp	0x17d0	; 0x17d0 <__fp_mpack>
    16ce:	0c 94 90 09 	jmp	0x1320	; 0x1320 <__fp_nan>
    16d2:	68 94       	set
    16d4:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__fp_inf>

000016d8 <log>:
    16d8:	0e 94 ba 09 	call	0x1374	; 0x1374 <__fp_splitA>
    16dc:	a8 f3       	brcs	.-22     	; 0x16c8 <ldexp+0x6c>
    16de:	99 23       	and	r25, r25
    16e0:	c1 f3       	breq	.-16     	; 0x16d2 <ldexp+0x76>
    16e2:	ae f3       	brts	.-22     	; 0x16ce <ldexp+0x72>
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	1f 93       	push	r17
    16ea:	0f 93       	push	r16
    16ec:	ff 92       	push	r15
    16ee:	c9 2f       	mov	r28, r25
    16f0:	dd 27       	eor	r29, r29
    16f2:	88 23       	and	r24, r24
    16f4:	2a f0       	brmi	.+10     	; 0x1700 <log+0x28>
    16f6:	21 97       	sbiw	r28, 0x01	; 1
    16f8:	66 0f       	add	r22, r22
    16fa:	77 1f       	adc	r23, r23
    16fc:	88 1f       	adc	r24, r24
    16fe:	da f7       	brpl	.-10     	; 0x16f6 <log+0x1e>
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e8       	ldi	r20, 0x80	; 128
    1706:	5f eb       	ldi	r21, 0xBF	; 191
    1708:	9f e3       	ldi	r25, 0x3F	; 63
    170a:	88 39       	cpi	r24, 0x98	; 152
    170c:	20 f0       	brcs	.+8      	; 0x1716 <log+0x3e>
    170e:	80 3e       	cpi	r24, 0xE0	; 224
    1710:	38 f0       	brcs	.+14     	; 0x1720 <log+0x48>
    1712:	21 96       	adiw	r28, 0x01	; 1
    1714:	8f 77       	andi	r24, 0x7F	; 127
    1716:	0e 94 39 08 	call	0x1072	; 0x1072 <__addsf3>
    171a:	e0 e9       	ldi	r30, 0x90	; 144
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	04 c0       	rjmp	.+8      	; 0x1728 <log+0x50>
    1720:	0e 94 39 08 	call	0x1072	; 0x1072 <__addsf3>
    1724:	ed eb       	ldi	r30, 0xBD	; 189
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <__fp_powser>
    172c:	8b 01       	movw	r16, r22
    172e:	be 01       	movw	r22, r28
    1730:	ec 01       	movw	r28, r24
    1732:	fb 2e       	mov	r15, r27
    1734:	6f 57       	subi	r22, 0x7F	; 127
    1736:	71 09       	sbc	r23, r1
    1738:	75 95       	asr	r23
    173a:	77 1f       	adc	r23, r23
    173c:	88 0b       	sbc	r24, r24
    173e:	99 0b       	sbc	r25, r25
    1740:	0e 94 4f 09 	call	0x129e	; 0x129e <__floatsisf>
    1744:	28 e1       	ldi	r18, 0x18	; 24
    1746:	32 e7       	ldi	r19, 0x72	; 114
    1748:	41 e3       	ldi	r20, 0x31	; 49
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <__mulsf3x>
    1750:	af 2d       	mov	r26, r15
    1752:	98 01       	movw	r18, r16
    1754:	ae 01       	movw	r20, r28
    1756:	ff 90       	pop	r15
    1758:	0f 91       	pop	r16
    175a:	1f 91       	pop	r17
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	0e 94 50 08 	call	0x10a0	; 0x10a0 <__addsf3x>
    1764:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__fp_round>

00001768 <modf>:
    1768:	fa 01       	movw	r30, r20
    176a:	dc 01       	movw	r26, r24
    176c:	aa 0f       	add	r26, r26
    176e:	bb 1f       	adc	r27, r27
    1770:	9b 01       	movw	r18, r22
    1772:	ac 01       	movw	r20, r24
    1774:	bf 57       	subi	r27, 0x7F	; 127
    1776:	28 f4       	brcc	.+10     	; 0x1782 <modf+0x1a>
    1778:	22 27       	eor	r18, r18
    177a:	33 27       	eor	r19, r19
    177c:	44 27       	eor	r20, r20
    177e:	50 78       	andi	r21, 0x80	; 128
    1780:	20 c0       	rjmp	.+64     	; 0x17c2 <modf+0x5a>
    1782:	b7 51       	subi	r27, 0x17	; 23
    1784:	90 f4       	brcc	.+36     	; 0x17aa <modf+0x42>
    1786:	ab 2f       	mov	r26, r27
    1788:	00 24       	eor	r0, r0
    178a:	46 95       	lsr	r20
    178c:	37 95       	ror	r19
    178e:	27 95       	ror	r18
    1790:	01 1c       	adc	r0, r1
    1792:	a3 95       	inc	r26
    1794:	d2 f3       	brmi	.-12     	; 0x178a <modf+0x22>
    1796:	00 20       	and	r0, r0
    1798:	71 f0       	breq	.+28     	; 0x17b6 <modf+0x4e>
    179a:	22 0f       	add	r18, r18
    179c:	33 1f       	adc	r19, r19
    179e:	44 1f       	adc	r20, r20
    17a0:	b3 95       	inc	r27
    17a2:	da f3       	brmi	.-10     	; 0x179a <modf+0x32>
    17a4:	0e d0       	rcall	.+28     	; 0x17c2 <modf+0x5a>
    17a6:	0c 94 38 08 	jmp	0x1070	; 0x1070 <__subsf3>
    17aa:	61 30       	cpi	r22, 0x01	; 1
    17ac:	71 05       	cpc	r23, r1
    17ae:	a0 e8       	ldi	r26, 0x80	; 128
    17b0:	8a 07       	cpc	r24, r26
    17b2:	b9 46       	sbci	r27, 0x69	; 105
    17b4:	30 f4       	brcc	.+12     	; 0x17c2 <modf+0x5a>
    17b6:	9b 01       	movw	r18, r22
    17b8:	ac 01       	movw	r20, r24
    17ba:	66 27       	eor	r22, r22
    17bc:	77 27       	eor	r23, r23
    17be:	88 27       	eor	r24, r24
    17c0:	90 78       	andi	r25, 0x80	; 128
    17c2:	30 96       	adiw	r30, 0x00	; 0
    17c4:	21 f0       	breq	.+8      	; 0x17ce <modf+0x66>
    17c6:	20 83       	st	Z, r18
    17c8:	31 83       	std	Z+1, r19	; 0x01
    17ca:	42 83       	std	Z+2, r20	; 0x02
    17cc:	53 83       	std	Z+3, r21	; 0x03
    17ce:	08 95       	ret

000017d0 <__fp_mpack>:
    17d0:	9f 3f       	cpi	r25, 0xFF	; 255
    17d2:	31 f0       	breq	.+12     	; 0x17e0 <__fp_mpack_finite+0xc>

000017d4 <__fp_mpack_finite>:
    17d4:	91 50       	subi	r25, 0x01	; 1
    17d6:	20 f4       	brcc	.+8      	; 0x17e0 <__fp_mpack_finite+0xc>
    17d8:	87 95       	ror	r24
    17da:	77 95       	ror	r23
    17dc:	67 95       	ror	r22
    17de:	b7 95       	ror	r27
    17e0:	88 0f       	add	r24, r24
    17e2:	91 1d       	adc	r25, r1
    17e4:	96 95       	lsr	r25
    17e6:	87 95       	ror	r24
    17e8:	97 f9       	bld	r25, 7
    17ea:	08 95       	ret

000017ec <__divmodhi4>:
    17ec:	97 fb       	bst	r25, 7
    17ee:	07 2e       	mov	r0, r23
    17f0:	16 f4       	brtc	.+4      	; 0x17f6 <__divmodhi4+0xa>
    17f2:	00 94       	com	r0
    17f4:	07 d0       	rcall	.+14     	; 0x1804 <__divmodhi4_neg1>
    17f6:	77 fd       	sbrc	r23, 7
    17f8:	09 d0       	rcall	.+18     	; 0x180c <__divmodhi4_neg2>
    17fa:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__udivmodhi4>
    17fe:	07 fc       	sbrc	r0, 7
    1800:	05 d0       	rcall	.+10     	; 0x180c <__divmodhi4_neg2>
    1802:	3e f4       	brtc	.+14     	; 0x1812 <__divmodhi4_exit>

00001804 <__divmodhi4_neg1>:
    1804:	90 95       	com	r25
    1806:	81 95       	neg	r24
    1808:	9f 4f       	sbci	r25, 0xFF	; 255
    180a:	08 95       	ret

0000180c <__divmodhi4_neg2>:
    180c:	70 95       	com	r23
    180e:	61 95       	neg	r22
    1810:	7f 4f       	sbci	r23, 0xFF	; 255

00001812 <__divmodhi4_exit>:
    1812:	08 95       	ret

00001814 <__udivmodsi4>:
    1814:	a1 e2       	ldi	r26, 0x21	; 33
    1816:	1a 2e       	mov	r1, r26
    1818:	aa 1b       	sub	r26, r26
    181a:	bb 1b       	sub	r27, r27
    181c:	fd 01       	movw	r30, r26
    181e:	0d c0       	rjmp	.+26     	; 0x183a <__udivmodsi4_ep>

00001820 <__udivmodsi4_loop>:
    1820:	aa 1f       	adc	r26, r26
    1822:	bb 1f       	adc	r27, r27
    1824:	ee 1f       	adc	r30, r30
    1826:	ff 1f       	adc	r31, r31
    1828:	a2 17       	cp	r26, r18
    182a:	b3 07       	cpc	r27, r19
    182c:	e4 07       	cpc	r30, r20
    182e:	f5 07       	cpc	r31, r21
    1830:	20 f0       	brcs	.+8      	; 0x183a <__udivmodsi4_ep>
    1832:	a2 1b       	sub	r26, r18
    1834:	b3 0b       	sbc	r27, r19
    1836:	e4 0b       	sbc	r30, r20
    1838:	f5 0b       	sbc	r31, r21

0000183a <__udivmodsi4_ep>:
    183a:	66 1f       	adc	r22, r22
    183c:	77 1f       	adc	r23, r23
    183e:	88 1f       	adc	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	1a 94       	dec	r1
    1844:	69 f7       	brne	.-38     	; 0x1820 <__udivmodsi4_loop>
    1846:	60 95       	com	r22
    1848:	70 95       	com	r23
    184a:	80 95       	com	r24
    184c:	90 95       	com	r25
    184e:	9b 01       	movw	r18, r22
    1850:	ac 01       	movw	r20, r24
    1852:	bd 01       	movw	r22, r26
    1854:	cf 01       	movw	r24, r30
    1856:	08 95       	ret

00001858 <__udivmodhi4>:
    1858:	aa 1b       	sub	r26, r26
    185a:	bb 1b       	sub	r27, r27
    185c:	51 e1       	ldi	r21, 0x11	; 17
    185e:	07 c0       	rjmp	.+14     	; 0x186e <__udivmodhi4_ep>

00001860 <__udivmodhi4_loop>:
    1860:	aa 1f       	adc	r26, r26
    1862:	bb 1f       	adc	r27, r27
    1864:	a6 17       	cp	r26, r22
    1866:	b7 07       	cpc	r27, r23
    1868:	10 f0       	brcs	.+4      	; 0x186e <__udivmodhi4_ep>
    186a:	a6 1b       	sub	r26, r22
    186c:	b7 0b       	sbc	r27, r23

0000186e <__udivmodhi4_ep>:
    186e:	88 1f       	adc	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	5a 95       	dec	r21
    1874:	a9 f7       	brne	.-22     	; 0x1860 <__udivmodhi4_loop>
    1876:	80 95       	com	r24
    1878:	90 95       	com	r25
    187a:	bc 01       	movw	r22, r24
    187c:	cd 01       	movw	r24, r26
    187e:	08 95       	ret

00001880 <__itoa_ncheck>:
    1880:	bb 27       	eor	r27, r27
    1882:	4a 30       	cpi	r20, 0x0A	; 10
    1884:	31 f4       	brne	.+12     	; 0x1892 <__itoa_ncheck+0x12>
    1886:	99 23       	and	r25, r25
    1888:	22 f4       	brpl	.+8      	; 0x1892 <__itoa_ncheck+0x12>
    188a:	bd e2       	ldi	r27, 0x2D	; 45
    188c:	90 95       	com	r25
    188e:	81 95       	neg	r24
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__utoa_common>

00001896 <__utoa_ncheck>:
    1896:	bb 27       	eor	r27, r27

00001898 <__utoa_common>:
    1898:	fb 01       	movw	r30, r22
    189a:	55 27       	eor	r21, r21
    189c:	aa 27       	eor	r26, r26
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	aa 1f       	adc	r26, r26
    18a4:	a4 17       	cp	r26, r20
    18a6:	10 f0       	brcs	.+4      	; 0x18ac <__utoa_common+0x14>
    18a8:	a4 1b       	sub	r26, r20
    18aa:	83 95       	inc	r24
    18ac:	50 51       	subi	r21, 0x10	; 16
    18ae:	b9 f7       	brne	.-18     	; 0x189e <__utoa_common+0x6>
    18b0:	a0 5d       	subi	r26, 0xD0	; 208
    18b2:	aa 33       	cpi	r26, 0x3A	; 58
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <__utoa_common+0x20>
    18b6:	a9 5d       	subi	r26, 0xD9	; 217
    18b8:	a1 93       	st	Z+, r26
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	79 f7       	brne	.-34     	; 0x189c <__utoa_common+0x4>
    18be:	b1 11       	cpse	r27, r1
    18c0:	b1 93       	st	Z+, r27
    18c2:	11 92       	st	Z+, r1
    18c4:	cb 01       	movw	r24, r22
    18c6:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <strrev>

000018ca <strrev>:
    18ca:	dc 01       	movw	r26, r24
    18cc:	fc 01       	movw	r30, r24
    18ce:	67 2f       	mov	r22, r23
    18d0:	71 91       	ld	r23, Z+
    18d2:	77 23       	and	r23, r23
    18d4:	e1 f7       	brne	.-8      	; 0x18ce <strrev+0x4>
    18d6:	32 97       	sbiw	r30, 0x02	; 2
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <strrev+0x18>
    18da:	7c 91       	ld	r23, X
    18dc:	6d 93       	st	X+, r22
    18de:	70 83       	st	Z, r23
    18e0:	62 91       	ld	r22, -Z
    18e2:	ae 17       	cp	r26, r30
    18e4:	bf 07       	cpc	r27, r31
    18e6:	c8 f3       	brcs	.-14     	; 0x18da <strrev+0x10>
    18e8:	08 95       	ret

000018ea <_exit>:
    18ea:	f8 94       	cli

000018ec <__stop_program>:
    18ec:	ff cf       	rjmp	.-2      	; 0x18ec <__stop_program>
